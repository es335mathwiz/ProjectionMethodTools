Needs["simpleRBCModel`"]



Print["variable names (symbols?) should come from model bmat comp. don't use tm1"];
Print["provide shock names should come from model bmat comp"];
chkOrd=2;
chkPts={
{8,.1,.3},
{3,-.02,.02}
}

mig00=Private`makeInitGuess[modSpec={compCon,stateSel,{{ctm1},{ktm1}},
noCnstrnGuess,{1,2,1,1,1},getRBCFixedPoint},xtm1Val={.5},epsVal={-.1},{}]
(*

Private`makeInitStateTryEqnsSubbed[modSpec,xtm1Val,epsVal,{},za={kkArg}]

Private`makeSysFunction[modSpec,xtm1Val,epsVal,{},za]

fp00=fpForInitStateFunc[modSpec,{.4},{-.02},{}]





interp00=makeInterpFuncPF[modSpec,
Function[{xx},fpForInitStateFunc[modSpec,{xx},{0},{}]],chkOrd,chkPts]


interp01=makeInterpFuncPF[modSpec,
Function[{xx},fpForInitStateFunc[modSpec,{xx},{0},interp00]],chkOrd,chkPts]


interp02=makeInterpFuncPF[modSpec,
Function[{xx},fpForInitStateFunc[modSpec,{xx},{0},interp01]],chkOrd,chkPts]


iterpf00=iterPF[modSpec,chkOrd,chkPts,{}]
iterpf01=iterPF[modSpec,chkOrd,chkPts,iterpf00]



forpf00=forIOrdNPtsPF[modSpec,chkOrd,chkPts,{},ignore,3]



{ig,ig,zFuncsOnePF,finFuncOnePF}=genFinalPF[modSpec,chkOrd,chkPts,{},3];

*)

(*

mig00=Private`makeInitGuess[modSpec={compCon,stateSel,xtm1={{cctm1},{kktm1}},noCnstrnGuess,{1,2,1,1,1},getRBCFixedPoint},xtm1Val={.14},epsVal={-.03},{}]


Private`makeInitStateTryEqnsSubbed[modSpec,xtm1Val,epsVal,{},za={kkArg}]

Private`makeSysFunction[modSpec,xtm1Val,epsVal,{},za]

fp00=fpForInitStateFunc[modSpec,{.4,0},{-.01},{}]
fp0012=fpForInitStateFunc[modSpec,{.4,0},{-.01},{},{1,2}]


tryFuncVal=(tryFunc=Function[{xx},fpForInitStateFunc[{compCon,stateSel,xtm1={{cctm1},{kktm1}},noCnstrnGuess,{1,2,1,1,1},getRBCFixedPoint},{xx},{0},{}]])[.15]


tryFuncEps=Private`makeREFunc[modSpec,{}];
doInt=Private`myExpect[modSpec,tryFuncEps[1][.4,0],Private`tryEps,.01]

doInt=Private`myExpect[modSpec,tryFuncEps[#][.4,0],Private`tryEps,.01]&/@{1,2,-1}




hap=Private`doScalarIntegInterp[modSpec,1,tryFuncEps,2,chkPts,.01]


interp00=makeInterpFuncRE[modSpec,chkOrd,chkPts,{},.01]

iterre00=iterRE[modSpec,chkOrd,chkPts,{},0.01]
iterre01=iterRE[modSpec,chkOrd,chkPts,iterre00,0.01]

iterre02=iterRE[modSpec,chkOrd,chkPts,iterre01,0.01]





forpf00=forIOrdNPtsRE[modSpec,chkOrd,chkPts,{},0.01,3]






{ig,ig,zFuncsOneRE0,finFuncOneRE0}=genFinalRE[{compCon,stateSel,xtm1={{cctm1},{kktm1}},noCnstrnGuess,{1,2,1,1,1},getRBCFixedPoint},chkOrd,chkPts,{},0,2];



{ig,ig,zFuncsOneRE,finFuncOneRE}=genFinalRE[{compCon,stateSel,xtm1={{cctm1},{kktm1}},noCnstrnGuess,{1,2,1,1,1},getRBCFixedPoint},chkOrd,chkPts,{},.01,2];



*)

(*
modVars={{ccVar},{kkVar}}
notAPath=genPath[xtm1=modVars,bmat,phimat,fmat,psieps,psic,psiz,2,5]

Print["cs01"]
cs01=genCompSlackSysFunc[{compCon,stateSel,xtm1,noCnstrnGuess,{1,2,1,1},getRBCFixedPoint},
bmat,phimat,fmat,psieps,psic,psiz,1]//Chop//N

Print["genFinalPF"]
chkPts={{3,-.1,.1},{3,-.2,.2}};chkOrd=2;
{ig,ig,zFuncsZeroPF,finFuncZeroPF}=genFinalPF[{compCon,stateSel,modVars,
noCnstrnGuess,{1,2,1,1},getRBCFixedPoint},chkOrd,chkPts,{},0];


makeInterpFuncPF[{compCon,stateSel,modVars,
noCnstrnGuess,{1,2,1,1},getRBCFixedPoint},
finFuncZeroPF,{1pos_List,iOrder_Integer,
gSpec:{{_Integer,_?NumberQ,_?NumberQ}..}
}]
(*
{ig,ig,zFuncsOnePF,finFuncOnePF}=genFinalPF[{compCon,stateSel,modVars,
noCnstrnGuess,{1,2,1,1},getRBCFixedPoint},chkOrd,chkPts,{},1];

(*for the constant lr*)
Inverse[IdentityMatrix[2]-fmat] . phimat . psic

Print["cs02"]
cs02=genCompSlackSysFunc[{compCon,stateSel,xtm1,noCnstrnGuess,{1,2,1,1},getRBCFixedPoint},bmat,phimat,fmat,psieps,psic,psiz,2]//Chop
*)


*)
