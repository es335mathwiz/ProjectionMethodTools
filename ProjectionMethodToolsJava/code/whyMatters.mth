Needs["occBindRecur`"]

(*impose one period*)

chkPts=10;chkOrd=2;
{ig,ig,zFuncsOne,finFuncOne}=genFinalPF[chkOrd,chkPts,{},0];
fdrOne=genFinalDR[finFuncOne];


(*set up to solve system t and honor constraints*)
assessPF[finFuncOne]


(*applying decision rule leads to different solution than the expected path
after the first period*)
apOne=aPathFinal[-.4,0,0,finFuncOne]
iterateOne=iterateDR[fdrOne,{-.4,0,0},sigma$u/.lucaSubs,2]

toCmpOne={iterateOne[[6+Range[3]]],
apOne[[6+Range[3]]]}


(*a handy function for iterating the dr*)
reArrange[{{qtm1_},{_},{rutm1_}}]:={qtm1,rutm1,0}




(*impose two periods*)
chkPts=10;chkOrd=2;
{ig,ig,zFuncsTwo,finFuncTwo}=genFinalPF[chkOrd,chkPts,{},1];
fdrTwo=genFinalDR[finFuncTwo];


iterateTwo=iterateDR[fdrTwo,{-.4,0,0},sigma$u/.lucaSubs,3]
apTwo=aPathFinal[-.4,0,0,finFuncTwo]
(*agree for first period*)
toCmpTwo={iterateTwo[[3+Range[3]]],
apTwo[[3+Range[3]]]}
(*not second*)
toCmpTwo={iterateTwo[[6+Range[3]]],
apTwo[[6+Range[3]]]}
(*must apply the dr imposing the rule for one period to get agreement*)
drToNewPath=iterateDR[fdrOne,
(reArrange[aPathFinal[-.4,0,0,finFuncTwo][[3+Range[3]]]]),sigma$u/.lucaSubs,2]

(*try two period path from the second period*)
aPathFinal @@  Append[reArrange[apTwo[[6+Range[3]]]],finFuncTwo]






(*impose three periods*)
chkPts=10;chkOrd=2;
{ig,ig,zFuncsThree,finFuncThree}=genFinalPF[chkOrd,chkPts,{},2];
fdrThree=genFinalDR[finFuncThree];


iterateThree=iterateDR[fdrThree,{-.4,0,0},sigma$u/.lucaSubs,4]
apThree=aPathFinal[-.4,0,0,finFuncThree]
(*agree for first period*)
toCmpThree={iterateThree[[3+Range[3]]],
apThree[[3+Range[3]]]}
(*not second*)
toCmpThree={iterateThree[[6+Range[3]]],
apThree[[6+Range[3]]]}
(*must apply the dr imposing the rule for one period to get agreement*)
drToNewPath=iterateDR[fdrOne,
(reArrange[aPathFinal[-.4,0,0,finFuncThree][[3+Range[3]]]]),sigma$u/.lucaSubs,2]

(*try three period path from the second period*)
aPathFinal @@  Append[reArrange[apThree[[6+Range[3]]]],finFuncThree]








(*setup to solve first period*)
ap=aPathFinal[-.4,0,0,onePeriodFunc]
hmatAppFinal[-.4,0,0,onePeriodFunc]
hmatAppGeneric[ap]


















(*solves unconstrained system but violates constraints in tp1*)
(*set up to solve system but violates constraints in tp1 and tp2*)
apPlus=aPathFinal[-.4,0,0,onePeriodFunc,1]
hmatAppGeneric[apPlus]
