Get["prepPackages.mth"]

lucaEqn={qq[t]- (beta*(1-rho)*qq[t+1] + rho*qq[t-1] - sigma * rr[t] + (eps[uu][t])),rr[t]- phi*qq[t]}


Export["lucaEqn.pdf",TableForm[Transpose[{lucaEqn}]]]

newWeightedStochasticBasis[lucaMod, lucaEqn]




{{stateVar, nonStateVar, theShock}, modEqns} = 
  GenerateModelCode[lucaMod];

lucaSubs={beta->99/100,phi->1,rho->1/2,sigma->1,rUnderBar->2/100,qLow->-.5,qHigh->.9,integOrder->{5},stdDev->0.02,theMean->{0}};

modParams={beta,phi,rho,sigma}/.{beta->99/100,phi->1,rho->1/2,sigma->1,rUnderBar->2/100}//N;
modEqns[updateParams[modParams]]

polyRange = {{qLow, qHigh}} /. lucaSubs;
initPower = {2};shockPower={1};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. lucaSubs, initPower, theShock, 
   theMean //. lucaSubs, {stdDev} //. lucaSubs, 
   integOrder //. lucaSubs, shockPower, nonStateVar];



(*needs expanding*)
numRowsCols=(initPower[[1]]+1)*(shockPower[[1]]+1);
tryMat=ArrayFlatten[{{ConstantArray[.1,{1,numRowsCols}]},{ConstantArray[.2,{1,numRowsCols}]}}];
lucaBasis[setAllWeights[tryMat]]



theMod=modEqns
theBasis=lucaBasis;

  





doNVal[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ]:=
Module[{vt,xxX,xxXVals},
theBasis[setAllWeights[theMat]];
vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime];
xxX=vt[evalVar[aBasis]];
xxXVals=xxX[getTheVal[]][getArray[]]]

stateVarQ[vName_String,aBasis_?JavaObjectQ]:=
With[{theRow=Position[gtStateVars[aBasis],vName]},
If[theRow==={},False,True]]
nonStateVarQ[vName_String,aBasis_?JavaObjectQ]:=
With[{theRow=Position[gtNonStateVars[aBasis],vName]},
If[theRow==={},False,True]]


doVal[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ]:=
Module[{vt,xxX,xxXVals},
theBasis[setAllWeights[theMat]];
vt=
Which[stateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime",vName,vTime],
nonStateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime],
True,Throw[vName,"-doVal:not in state or non-state-"]];
xxX=vt[evalVar[aBasis]];
xxXVals=xxX[getTheVal[]][getArray[]]]

doDrv[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ]:=
Module[{vt,xxX,xxXVals},
theBasis[setAllWeights[theMat]];
vt=
Which[stateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime",vName,vTime],
nonStateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime],
True,Throw[vName,"-doDrv:not in state or non-state-"]];xxX=vt[evalVar[aBasis]];
xxXDrvs=xxX[getTheJac[]][getArray[]]]


doVal[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ,{ii_Integer,jj_Integer},val_?NumberQ]:=
doVal[vName,vTime,aBasis,ReplacePart[theMat,{ii,jj}->theMat[[ii,jj]]+val]]
(*

theDelta=0.01;
bigRes=MapIndexed[doVal["qq",1,theBasis,tryMat,#2,theDelta]&,tryMat,{2}]



diffs=Map[#-orig&,bigRes,{2}]/theDelta

*)
doNumDrv[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ,{ii_Integer,jj_Integer},val_?NumberQ]:=
(doVal[vName,vTime,aBasis,theMat,{ii,jj},val]-doVal[vName,vTime,aBasis,theMat])/val

varNumberState[vName_String,aBasis_?JavaObjectQ]:=
Position[
Which[
stateVarQ[vName,aBasis],gtStateVars[aBasis],
True,Throw[vName,"-varNumber:variable not found in state-"]],vName][[1,1]]



cmpDrvs[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,theMat_?MatrixQ,val_?NumberQ]:=
With[{theRow=Position[
Which[
stateVarQ[vName,aBasis],gtStateVars[aBasis],
nonStateVarQ[vName,aBasis],gtNonStateVars[aBasis],
True,Throw[vName,"-cmpDrvs:variable not found-"]],vName],cols=Length[tryMat[[1]]]},
If[Not[Or[stateVarQ[vName,aBasis],nonStateVarQ[vName,aBasis]]],
Throw[vName,"-variable not found-"],
doDrv[vName,vTime,aBasis,theMat][[All,Range[cols]]]-
ArrayFlatten[{doNumDrv[vName,vTime,aBasis,theMat,{theRow[[1,1]],#},0.01]&/@Range[cols]}]]]


getPhiFunc[vName_String,theBasis_?JavaObjectQ]:=
Module[{theStatePoly=theBasis[getTheState[]],
vNumber=varNumberState[vName,theBasis]},
With[{rng=theStatePoly[getRanges[]][[vNumber]],
ord=theStatePoly[getOrders[]][[vNumber]]},
phiFunc[vName,ord,rng[[1]],rng[[2]]]//Expand//Chop]]

getRawPhiFunc[vName_String,theBasis_?JavaObjectQ]:=
Module[{theStatePoly=theBasis[getTheState[]],
vNumber=varNumberState[vName,theBasis]},
With[{ord=theStatePoly[getOrders[]][[vNumber]]},
phiFunc[vName,ord,-1,1]]//Expand//Chop]



forIterate[wts_List]:=
With[{state0=wts. ooPolys//Chop},
With[{someSubs=qq->#&/@state0[[1]]},
wts . (preEvalPolys/.#)&/@someSubs]]


Splice["modelDoEqnsCalcs.mtex","luca.tex",PageWidth->Infinity]




(*
daGr=theStatePoly[getTheGrid[]]

ePoints=daGr[getXformedChebNodePts[#]]&/@theStatePoly[getStateVariableNames[]]
eSubs={qq->#[[1]],uu$Shock->#[[2]]}& /@Transpose[ePoints]

ooPolys=Transpose[(preEvalPolys=doExportOrderedOuter[theBasis]/.toSymbSubs[theBasis])/.eSubs]
{state0,nstate0}=tryMat . ooPolys//Chop;

nxtStep=forIterate[coeffs=Array[aa,{2,6}]];
theDrv=D[nxtStep,#] &/@ Flatten[coeffs]//Expand

nowSubs=Thread[Flatten[coeffs]->Flatten[tryMat]];
*)
