Get["prepPackages.mth"]


lucaEqn = {qq[
    t] - (betap*(1 - rhop)*qq[t + 1] + rhop*qq[t - 1] - sigmap*rr[t] +
      ru[t]), rr[t] - phip*qq[t], 
  ru[t] - rho$ru*ru[t - 1] - eps[uu][t]}

Export["lucaEqn.pdf",TableForm[Transpose[{lucaEqn}]]]

lucaSubs = {betap -> 99/100, phip -> 1, rhop -> 1/2, sigmap -> 1, 
   rUnderBar -> 2/100, qLow -> -.5, qHigh -> .5, 
   ruLow -> -4*sigma$u/(1 - rho$ru), 
   ruHigh ->  4*sigma$u/(1 - rho$ru), integOrder -> {5}, 
   sigma$u -> 0.02, theMean -> {0}, rho$ru -> 0.5};

modParams = {betap, phip, rhop, sigmap, rho$ru} //. lucaSubs // N;




newWeightedStochasticBasis[lucaMod, lucaEqn]


{{stateVar, nonStateVar, theShock}, modEqns} = 
  GenerateModelCode[lucaMod];

modEqns[updateParams[modParams]]

polyRange = {{ruLow, ruHigh}, {qLow, qHigh}} /. lucaSubs;
initPower = {2, 2}; shockPower = {1};



lucaBasis = 
  GenerateBasis[stateVar, polyRange //. lucaSubs, initPower, theShock, 
   theMean //. lucaSubs, {sigma$u} //. lucaSubs, 
   integOrder //. lucaSubs, shockPower, nonStateVar];


(*needs expanding*)
numRowsCols=(initPower[[1]]+1)*(initPower[[2]]+1)*(shockPower[[1]]+1);
tryMat=ArrayFlatten[
{{ConstantArray[.1,{1,numRowsCols}]},
{ConstantArray[.2,{1,numRowsCols}]},
{ConstantArray[.3,{1,numRowsCols}]}
}];
lucaBasis[setAllWeights[tryMat]]



theMod=modEqns
theBasis=lucaBasis;

  


Splice["modelDoEqnsCalcs.mtex","luca.tex",PageWidth->Infinity]





(*

theDelta=0.01;
bigRes=MapIndexed[doVal["qq",1,theBasis,tryMat,#2,theDelta]&,tryMat,{2}]



diffs=Map[#-orig&,bigRes,{2}]/theDelta

*)






(*
daGr=theStatePoly[getTheGrid[]]

ePoints=daGr[getXformedChebNodePts[#]]&/@theStatePoly[getStateVariableNames[]]
eSubs={qq->#[[1]],uu$Shock->#[[2]]}& /@Transpose[ePoints]

ooPolys=Transpose[(preEvalPolys=doExportOrderedOuter[theBasis]/.toSymbSubs[theBasis])/.eSubs]
{state0,nstate0}=tryMat . ooPolys//Chop;

nxtStep=forIterate[coeffs=Array[aa,{2,6}]];
theDrv=D[nxtStep,#] &/@ Flatten[coeffs]//Expand

nowSubs=Thread[Flatten[coeffs]->Flatten[tryMat]];
*)
