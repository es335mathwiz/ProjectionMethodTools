Needs["ProjectionInterface`"]
(*
Get["ProjectionInterface`"]
Get["paperFocus.mth"]

zSubNow=Nest[doRecurIneqOcc,{},2];
numZs=Length[zSubNow];
zVarNames=Flatten[redoGenZVars[numZs,1]]/.ProjectionInterface`Private`ridTSubs;
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])];
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0];
xVars=Through[#[Global`t]]&/@xVarsNoT;
thePath=genPath[numZs+1]/.
{Global`qtm1->(xVars[[-1,1]]/.Global`t->Global`t-1),Global`rtm1->Global`rr[Global`t-1],
Global`rutm1->(xVars[[-1,2]]/.Global`t->Global`t-1),Global`eps->Global`eps[Global`ru][Global`t]};
xTp1Vals=MapThread[{
#2[[1]][#3[[1]][Global`t],#3[[2]][Global`t],0],
#2[[2]][#3[[1]][Global`t],#3[[2]][Global`t],0]}&,
{Drop[xVars,-1],Drop[zSubNow,0],Drop[xVarsNoT,1]}]






zSubs=
MapThread[(#1[Global`t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xTp1Vals}];
zEqns=ProjectionInterface`Private`subOutPiecewise[zSubs/.HoldPattern[xx_->yy_]->xx  -(yy)];
zZap=(zVarNames[[-1]][Global`t]/.Flatten[Solve[thePath[[5,1]]==Global`rUnderBar//Global`numIt,zVarNames[[-1]][Global`t]]])//Expand;
theEqns=Join[
	({xVars[[-1,1]]-(thePath[[4,1]]),xVars[[-1,2]]-(thePath[[6,1]])})//Expand,
{Global`discrep[Global`t]-((thePath[[5,1]]/.zVarNames[[-1]][Global`t]->0)-Global`rUnderBar//Global`numIt),
Global`rr[Global`t]-(thePath[[5,1]])
},
zEqns,
{zVarNames[[-1]][Global`t]-(Global`eqvdIf[Global`discrep[Global`t]>=0,0,zZap//Expand]//Expand)}//Expand];
newWeightedStochasticBasis[modSymb,(theEqns)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modSymb];
polyRange = {{Global`qLow, Global`qHigh}, {Global`ruLow, Global`ruHigh}} //. Global`mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. Global`mySubs, initPower, theShock,
    Global`theMean //. Global`mySubs, {Global`sigma$u} //. Global`mySubs, 
   Global`integOrder //. Global`mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {Length[theEqns], 1}], modClass, simp];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 01"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{1,1,1}]];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 02"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{2,2,1}]];
If[to$551[isConvergedQ[]]===True,Print["converged 03"],Throw["projection polynomial computation did not converge"]];

*)
n(*

to Test or and and

*)
(*
try[eqns_List]:=
Module[{},
ProjectionInterface`Private`subOutEqvdIf[
ProjectionInterface`Private`subOutConds[
ProjectionInterface`Private`subOutDoInt[
ProjectionInterface`Private`subOutErf[
ProjectionInterface`Private`subOutPower[
ProjectionInterface`Private`subOutPlus[
ProjectionInterface`Private`subOutTimes[
ProjectionInterface`Private`subOutRational[
ProjectionInterface`Private`subOutStateNonStateVars[
	ProjectionInterface`Private`subOutEps[ProjectionInterface`Private`subOutPiecewise[#]]]]]]]]]]]&[eqns]]


ProjectionInterface`Private`subOutConds[eqns_List]:=eqns/.{
	Global`eqvdIf[Or[condPrs__],
   EquationValDrv[cc_String],
   EquationValDrv[dd_String]]:>
      EquationValDrv[
    "(toughStuffHere"<> doConds[condPrs]<>StringJoin @@ (ToString/@{condPrs})<>
      	"endTough).eqvdIf("<>cc<>","<>dd<>")"]
}


doConds[theConds_]:=Module[{},
Print["before"];
Print[FullForm[theConds]];
Print[FullForm[Head[theConds]]];
Print[FullForm[Length[theConds]]];

Print["after"];
"num elems="<>ToString[Length[List @@condPrs]]]






doConds[theConds_]:=Module[{},
Print["before"];
Print[FullForm[theConds]];
Print[FullForm[Head[theConds]]];
Print[FullForm[theConds/.moreSubs]];
Print["after"];
"num elems="<>ToString[Length[List @@condPrs]]]



moreSubs=Or[cond1_[EquationValDrv[aa1_String],bb1:(__?Projection`Interface`Private`noVars)],cond2_Symbol[EquationValDrv[aa2_String],bb2:(__?Projection`Interface`Private`noVars)]]:>
      EquationValDrv[
      	"("<>aa1<>rightCondStr[cond1]<>ToString[CForm[bb1]]<>").or("<>
      	aa2<>rightCondStr[cond2]<>ToString[CForm[bb2]]<>")"]

Get["cleanUp.mth"]

use 

Global`eqvdIf[cond_Symbol[EquationValDrv[aa_String],bb:(__?noVars)],
   EquationValDrv[cc_String],
   EquationValDrv[dd_String]]:>
      EquationValDrv[aa<>rightCondStr[cond]<>ToString[CForm[bb]]<>").eqvdIf("<>cc<>","<>dd<>")"],

*)



exper={eqvdIf[aa[t] >bb[t]|| cc[t]>=uu[t],hh[t],zz[t]]}
exper1={eqvdIf[aa[t] >3|| cc[t]>=6,hh[t],zz[t]]}
exper2={eqvdIf[aa[t] >bb[t]||aa[t] >yy[t]|| cc[t]>=uu[t],hh[t],zz[t]]}
exper5={eqvdIf[aa[t] >bb[t]&&aa[t] >yy[t]&& cc[t]>=uu[t],hh[t],zz[t]]}
exper6={eqvdIf[aa[t] >bb[t],eqvdIf[hh[t]<7,jj[t],zz[t]],zz[t]]}
(*
not yet implemented noVars t vars in conditions

exper3={eqvdIf[aa >3|| zz>=6,hh[t],zz[t]]}
exper4={eqvdIf[3 < aa|| zz>=6,hh[t],zz[t]]}

*)
