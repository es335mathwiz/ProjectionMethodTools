Needs["JLink`"]
Needs["ProjectionInterface`"]
Get["prepPackages.mth"]




lucaEqns = {qq[
     t] - (betap*(1 - rhop)*qq[t + 1] + rhop*qq[t - 1] - 
      sigmap*rr[t] + ru[t]), rr[t] - phip*qq[t], 
   ru[t] - rho$ru*ru[t - 1] - adj*eps[uu][t]};
newWeightedStochasticBasis[lucaMod, lucaEqns];
{{stateVar, nonStateVar, theShock}, modEqns} = 
  GenerateModelCode[lucaMod];

debugSubs = {betap -> 99/100, phip -> 1, rhop -> 1/2, sigmap -> 1, 
  rUnderBar -> 2/100, qLow -> -.5, qHigh -> .5, 
  ruLow -> -4*sigma$u/(1 - rho$ru), ruHigh ->  4*sigma$u/(1 - rho$ru),
   integOrder -> {5}, sigma$u -> 0.02, theMean -> {0}, rho$ru -> 0, 
  adj -> 1}; debugParams = {adj, betap, phip, rhop, rho$ru, 
    sigmap} //. debugSubs // N;
modEqns[updateParams[debugParams]]


polyRange = {{ruLow, ruHigh}, {qLow, qHigh}} /. debugSubs;
initPower = {1, 1}; shockPower = {1};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. debugSubs, initPower, 
   theShock, theMean //. debugSubs, {sigma$u} //. debugSubs, 
   integOrder //. debugSubs, shockPower, nonStateVar];



hmat = {{-rhop, 0, 0, 1, sigmap, -1, -(betap*(1 - rhop)), 0, 0}, {0, 
    0, 0, -phip, 1, 0, 0, 0, 0}, {0, 0, -rho$ru, 0, 0, 1, 0, 0, 0}};
bmat = {{(2*rhop)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), 
    0, (2*rho$ru)/(1 + 2*betap*(-1 + rhop)*rho$ru + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {(2*
       phip*rhop)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), 
    0, (2*phip*rho$ru)/(1 + 2*betap*(-1 + rhop)*rho$ru + phip*sigmap +
        Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {0, 0,
     rho$ru}};
phimat = {{2/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), (-2*
       sigmap)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), 
    2/(1 + 2*betap*(-1 + rhop)*rho$ru + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {(2*
       phip)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), (2*
        betap*(-1 + rhop)*rhop + 
       phip*sigmap*(1 + phip*sigmap - 
          Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]))/(2*
       betap*(-1 + rhop)*rhop), (2*phip)/(1 + 
       2*betap*(-1 + rhop)*rho$ru + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {0, 0, 
    1}};
fmat = {{(1 + phip*sigmap - 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])/(2*rhop),
     0, 0}, {(phip*(1 + phip*sigmap - 
         Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]))/(2*
       rhop), 0, 0}, {0, 0, 0}};


debugMat = 
 ReplacePart[
    ConstantArray[
     0, {3, 8}], {{1, 2} -> 0.16` *bmat[[1, 1]], {1, 3} -> 
      0.5`*bmat[[1, 3]], {1, 5} -> 
      0.05713940027745613` *0*phimat[[1, 3]], {2, 2} -> 
      0.16` *bmat[[3, 1]], {2, 3} -> 0.5`*bmat[[3, 3]], {2, 5} -> 
      0.05713940027745613` *0*phimat[[3, 3]], {3, 2} -> 
      0.16` *bmat[[2, 1]], {3, 3} -> 0.5`*bmat[[2, 3]], {3, 5} -> 
      0.05713940027745613` *0*phimat[[2, 3]]}] //. debugSubs // N


qkArray=Array[qk,{3,8}];
theProd=qkArray . Transpose[{doExportOrderedOuter[lucaBasis]}]


act=debugMat  . Transpose[{doExportOrderedOuter[lucaBasis]}]


targ=(bmat . {{qq},{rr},{ru}} + phimat . {{0},{0},{adj}} .{{uu$Shock}}) + zero * (qq*rr+qq*uu$Shock+rr*uu$Shock+ qq*rr*uu$Shock)



goodQkArray=qkArray/.Flatten[Solve[Thread[(tcl=Flatten[CoefficientList[targ,{qq,ru,uu$Shock}]])==
(acl=Flatten[CoefficientList[theProd,{"qq","ru","uu$Shock"}]])]/.zero->0,
Flatten[qkArray]]]


goodQkArray=qkArray/.Flatten[Solve[Thread[(tcl=Flatten[CoefficientList[targ,{qq,ru,uu$Shock}]])==
(acl=Flatten[CoefficientList[theProd,{"qq","ru","uu$Shock"}]])]/.zero->0,
Flatten[qkArray]]]


debugMat=goodQkArray[[{1,3,2}]];
