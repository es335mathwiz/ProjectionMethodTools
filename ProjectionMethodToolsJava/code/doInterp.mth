Get["ProjectionInterface`"];t
(*
Get["prep.mth"]
*)
Get["doNNonRecursive.mth"]
genZFuncs[numZs_Integer]:=
Module[{tryNth=genMinCSSys[numZs]},
With[{tryNthFunc=Function @@ {{qtm1,rutm1,eps},tryNth},
theZVars=Reverse[Flatten[
ProjectionInterface`Private`GenZVars[numZs-1,1]]]},
tryNthVals[qtm1_?NumberQ,rutm1_?NumberQ,eps_?NumberQ]:=
theZVars/.Flatten[Solve[tryNthFunc[qtm1,rutm1,eps],theZVars,Reals]];
With[{forInterp=tryNthVals},
FunctionInterpolation[forInterp[qq,ru,ep][[1]],
{qq,-.1,.1},{ru,-.4,.4},{ep,-.2,.2}]]]]


genZFuncs[numZs_Integer,
intOrd_Integer,intPrec_Integer,accGl_Integer,precGl_Integer,
intPts_Integer,mRecur_Integer]:=
Module[{tryNth=genMinCSSys[numZs]},
With[{tryNthFunc=Function @@ {{qtm1,rutm1,eps},tryNth},
theZVars=Reverse[Flatten[
ProjectionInterface`Private`redoGenZVars[numZs-1,1]]]},
tryNthVals[qtm1_?NumberQ,rutm1_?NumberQ,eps_?NumberQ]:=
theZVars/.Flatten[Solve[tryNthFunc[qtm1,rutm1,eps],theZVars,Reals]];
With[{forInterp=tryNthVals},
FunctionInterpolation[forInterp[qq,ru,ep][[1]],
{qq,-.1,.1},{ru,-.4,.4},{ep,-.2,.2},
InterpolationOrder->intOrd,InterpolationPrecision->intPrec,
AccuracyGoal->accGl,PrecisionGoal->precGl,
InterpolationPoints->intPts,MaxRecursion->mRecur]]]]
(*
tryNthValsFirst[qq_,ru_,ep_]:=tryNthVals[qq,ru,ep][[1]]
tryNthValsSecond[qq_,ru_,ep_]:=tryNthVals[qq,ru,ep][[2]]

Print["constructing interpolating functions"]

Print["numZs=",numZs];
{t1,func}=Timing[fI1=FunctionInterpolation[tryNthValsFirst[qq,ru,ep],{qq,-.1,.1},{ru,-.4,.4},{ep,-.2,.2}]]

Options[FunctionInterpolation]
Out[90]= {InterpolationOrder -> 3, InterpolationPrecision -> Automatic, 
    AccuracyGoal -> Automatic, PrecisionGoal -> Automatic, 
    InterpolationPoints -> 11, MaxRecursion -> 6}
Interpolation Points must be >=2




*)







