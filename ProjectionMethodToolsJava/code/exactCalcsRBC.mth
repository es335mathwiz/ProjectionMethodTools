Needs["simpleRBCModel`"]
Needs["AMASeriesRepresentation`"]
thVal=theta//.ssSolnSubsRE//.simpParamSubs;
kVal = kk /. Private`kSSSubRE//.simpParamSubs;
cVal = cc /. Private`cSSSubRE//.simpParamSubs ;
kLow = 1/10*kVal;
kHigh = 4*kVal;
sigVal = sigma //. simpParamSubs;
sigLow = -3*sigVal;
sigHigh = 3*sigVal;
thLow = 9/10;
thHigh = 11/10;
pdf=NormalDistribution[0, sigVal];

linMod={Private`bmatSymbRE // N, Private`phimatSymbRE // N, 
    Private`fmatSymbRE // N, Private`psiepsSymbRE // N, 
    Private`psicSymbRE // N, Private`psiz // N,{{0}}};

X0Z0=genX0Z0Funcs[linMod];


anX={1,.18,1.1};
anXEps={1,.18,1.1,0.01};
anXEpsZs={1,.18,1.1,0.01,.1,.2,.3};
probDims={3,1,3};

(*X0Z0 @@ anX -> xt,zt*)


(*
{x1z1PF,X1Z1PF}=doIterPF[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext];



{x1z1RE,X1Z1RE}=doIterRE[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext,{pdf}];



{x2z2PF,X2Z2PF}=doIterPF[linMod,X1Z1PF,X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext];



bunchOfPFs=nestIterPF[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[4]]],
Private`rbcEqnsFunctionalNext,4];

pathErrs[probDims,bunchOfPFs[[3]],Private`rbcEqnsFunctionalNext,Transpose[{anX}],{{0.01}}]




{x2z2RE,X2Z2RE}=doIterRE[linMod,X1Z1RE,X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext,{pdf}];



bunchOfPFs=nestIterPF[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[4]]],
Private`rbcEqnsFunctionalNext,4];
pathErrs[probDims,bunchOfPFs[[3]],Private`rbcEqnsFunctionalNext,Transpose[{anX}],{{0.01}}]



truncErrorMat[Private`fmat // N,Private`phimat // N,1]


*)
(*



pathErrs[{4,1,4},boo[[3]],Private`rbcEqnsFunctional,Transpose[{anX}],{{0.01}}]


careful=NestList[doIter[linMod,#[[2]],x1z1[1,.18,1,1,0][[Range[4]]],
Private`rbcEqnsFunctional]&,{ig,{X0Z0}},4];

huh=genPath[linMod,careful[[3,1]],careful[[2,2]],Transpose[{anX}],{{0.01}}]
(Flatten[huh[[1]]][[Range[12]]])-(Flatten[huh[[2]]][[Range[12]]])




forx1z1=genLilXkZkFunc[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[4]]]];
x1z1Prime=genFRFunc[probDims,forx1z1Prime,Private`rbcEqnsFunctional];

forx1z1=genLilXkZkFunc[linMod];       
(*forx1z1 @@ anXEpsZs
huh=NestList[doIter[linMod,#[[2]],x2z2[1,.18,1,1,0][[Range[4]]],
Private`rbcEqnsFunctional]&,{ig,{X3Z3,X2Z2,X1Z1}},2]
; -> xtm1,xt,xtp1*)

x1z1=genFRFunc[probDims,forx1z1,Private`rbcEqnsFunctional];
*)

(*x1z1 @@ anXEps ->xt,zt*)
(*
X1Z1=genXZFuncPF[probDims,x1z1];
(*X1Z1 @@ anX -> xt,zt*)

X1Z1RE=genXZFuncRE[probDims,x1z1,{NormalDistribution[0,0.01]}]
forx1z1Prime=genLilXkZkFunc[linMod,{X0Z0,X0Z0,X0Z0},x1z1[1,.18,1,1,0][[Range[4]]]];
x1z1Prime=genFRFunc[probDims,forx1z1Prime,Private`rbcEqnsFunctional];
(*x1z1Prime @@ anXEps -> xt,zt same as non prime*)
*)
(*
x2z2=genFPFunc[linMod,{X1Z1},x1z1[1,.18,1,1,0][[Range[4]]],Private`rbcEqnsFunctional];
X2Z2=genXZFuncPF[probDims,x2z2];




x3z3=genFPFunc[linMod,{X2Z2,X1Z1},x2z2[1,.18,1,1,0][[Range[4]]],Private`rbcEqnsFunctional];
X3Z3=genXZFuncPF[probDims,x3z3];



x4z4=genFPFunc[linMod,{X3Z3,X2Z2,X1Z1},x2z2[1,.18,1,1,0][[Range[4]]],Private`rbcEqnsFunctional];
X4Z4=genXZFuncPF[probDims,x4z4];


{x5z5,X5Z5}=doIter[linMod,{X3Z3,X2Z2,X1Z1},x2z2[1,.18,1,1,0][[Range[4]]],
Private`rbcEqnsFunctional];



huh=NestList[doIter[linMod,#[[2]],x2z2[1,.18,1,1,0][[Range[4]]],
Private`rbcEqnsFunctional]&,{ig,{X3Z3,X2Z2,X1Z1}},2]


careful=NestList[doIter[linMod,#[[2]],x1z1[1,.18,1,1,0][[Range[4]]],
Private`rbcEqnsFunctional]&,{ig,{X0Z0}},4];
huh=genPath[careful[[2,1]],careful[[1,2]],Transpose[{anX}],{{0}}];
Private`rbcEqnsFunctional @@ Append[Flatten[huh],0]
huh=genPath[careful[[2,1]],Append[careful[[1,2]],X0Z0],Transpose[{anX}],{{0.01}}];
Private`rbcEqnsFunctional @@ Append[Flatten[huh],0.01]


condExpExt @@ anXEps ->{{1.}, {0.18}, {1.1}, {0.392455}, {0.203981}, {1.10577}}

zContrib[linMod,{hip},hip[.1,.2,.1,1]]
forx2z2=genLilXkZkFunc[linMod,{X1Z1},x1z1[1,.18,1,1,0][[Range[4]]]];
(*forx2z2 @@ anXEpsZs  xtm1,xt,xtp1*)
x2z2=genFRFunc[probDims,forx2z2,Private`rbcEqnsFunctional];
(*x2z2 @@ anXEps ->xt,zt*)




(*one time period*)
(*00*)

solnSubsExt00 = 
  Private`makeConstraintFindRootFunc[
   Private`hFuncExt, {Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N}, {}];

solnFuncsExt00 = Private`subsFuncToVecFunc[solnSubsExt00];

eqnErrs00 = eqnErrsOnPathPF[solnFuncsExt00, {.1, kVal*1.25, 10, .9, .05}, 
   20];

linMod={Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N};



anErr01[kkk_?NumberQ,ttt_?NumberQ,eee_?NumberQ]:=
((Private`rbcEqnsExt/.(Private`tog//N))/.eps[theta][t]->eee)/.
Thread[{ig,ig,ig,ig,cc[t-1],kk[t-1],ratioThetaToC[t-1],theta[t-1],cc[t],kk[t],ratioThetaToC[t],theta[t],cc[t+1],kk[t+1],ratioThetaToC[t+1],theta[t+1]}->Flatten[(Private`computeXtPath[linMod,1,1]/.{ProtectedSymbols`xxxtm1Var$4->ttt,ProtectedSymbols`xxxtm1Var$2->kkk,epsVar$1->eee})/.solnSubsExt00[it,kkk,ig,ttt,eee]]]


FindMaximum[{
And[.1<= kkk<=.7,.9<=ttt<=1.1,-0.03<=eee<=0.03]},
{kkk,ttt,eee}]

Plot3D[Norm[anErr01[kkk,ttt,0]],{kkk,.1,.8},{ttt,.9,1.1}]

(*two periods*)

genEqnSubs01[kNow_, aThVal_, anEpsVal_] :=With[
{ theZVars=Reverse[Flatten[genZVars[1,4,-1]]]/.zName_[t]->zName,
theXtm1Vars=Private`genXtm1Vars[4],
theEpsVars=Private`genEpsVars[1]},
 Function[{kkguess, thetaguess}, 
  Join[{kk[t - 1] -> kNow, theta[t - 1] -> aThVal, 
    eps[theta][t] -> anEpsVal}, 
   Thread[{cc[t], kk[t], ratioThetaToC[t], theta[t], cc[t + 1], 
      kk[t + 1], ratioThetaToC[t + 1], theta[t + 1], cc[t + 2], 
      kk[t + 2], ratioThetaToC[t + 2], theta[t + 2]} -> 
    Flatten[(Private`computeXtPath[{Private`bmatExt // N, 
Private`phimatExt // N,  Private`fmatExt // N, 
Private`psiepsExt, Private`psicExt, 
    Private`psizExt}, 2, 0][[4+Range[12]]] // N // Expand )/. 
{theXtm1Vars[[2]] -> kNow, 
        theXtm1Vars[[4]] -> aThVal, theEpsVars[[1]] -> anEpsVal}]], 
   Thread[theZVars :> {solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[
       9]], solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[10]], 
      solnFuncsExt00[{ig, kkgdip[1,.18,1,1,0]uess, ig, thetaguess, 0}][[11]], 
      solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[12]]}]]]]


updateGuess01[kkguessVal_, thetaguessVal_, theSubs_] := With[{},
  With[{forFR = 
     Thread[(Private`rbcEqnsExt //. 
           Private`tog //. (theSubs[kkguessVal, thetaguessVal]) (*// 
         Simplify*)) == 0]},
   (*Print[{forFR,zzz$1$1/.(theSubs[kkguessVal,thetaguessVal])}];*)
   Flatten[{({cc[t], kk[t], theta[t],cc[t+1], kk[t+1], theta[t+1]} //. 
          theSubs[kkguessVal, thetaguessVal]) /. #, Last /@ #} &@
     FindRoot[
      forFR, {{zzz$0$1, 0}, {zzz$0$2, 0}, {zzz$0$3, 0}, {zzz$0$4, 
        0}}]]]]


quickFunc01[kValNow_, thetaValNow_, epsValNow_] := 
 FixedPoint[
  updateGuess01 @@ 
    Append[#[[{2, 3}]], 
     genEqnSubs01[kValNow, thetaValNow, epsValNow]] &, {.1, kVal, 1}, 
  15]



anErr02[kkk_?NumberQ,ttt_?NumberQ,eee_?NumberQ]:=With[
{qfRes=quickFunc01[kkk,ttt,eee]},
With[{sfRes=
solnFuncsExt00[{ig,qfRes[[2]],ig,qfRes[[3]],0}]},Print["from qfRes an sfRes",{qfRes,sfRes}];
With[{pathSubs=Flatten[(Private`computeXtPath[linMod,2,1]/.{ProtectedSymbols`xxxtm1Var$4->ttt,ProtectedSymbols`xxxtm1Var$2->kkk,epsVar$1->eee})/.
Thread[{zzz$0$1,zzz$0$2,zzz$0$3,zzz$0$4}->qfRes[[6+Range[4]]]]/.Thread[{zzz$1$1,zzz$1$2,zzz$1$3,zzz$1$4}->sfRes[[8+Range[4]]]]]},Print["pathSubs=",pathSubs];
((Private`rbcEqnsExt/.(Private`tog//N))/.eps[theta][t]->eee)/.
Thread[{ig,ig,ig,ig,ig,ig,ig,ig,cc[t-1],kk[t-1],ratioThetaToC[t-1],theta[t-1],cc[t],kk[t],ratioThetaToC[t],theta[t],cc[t+1],kk[t+1],ratioThetaToC[t+1],theta[t+1]}->pathSubs]]]]


Plot3D[Norm[anErr02[kkk,ttt,0]],{kkk,.1,.8},{ttt,.9,1.1}]



(*

<<JavaGraphics`

Timing[twoPerErr=Plot3D[quickFunc01[kkk, ttt, 0][[1]] - 
  condExpExt[.1, kkk, .1, ttt, 0][[4]], {kkk, .1, .4}, {ttt, .9, 1.1},
  PlotRange -> All]]
Export["cFuncTwoPerErr.pdf",twoPerErr]

Timing[Plot3D[quickFunc02[kkk, ttt, 0][[1]] - 
  condExpExt[.1, kkk, .1, ttt, 0][[4]], {kkk, .1, .4}, {ttt, .9, 1.1},
  PlotRange -> All]]

Export["cFuncThreePerErr.pdf",threePerErr]

*)




(*three periods*)

genEqnSubs02[kNow_, aThVal_, anEpsVal_] :=With[
{ theZVars=Flatten[Reverse/@genZVars[2,4,-1]]/.zName_[t]->zName,
theXtm1Vars=Private`genXtm1Vars[4],
theEpsVars=Private`genEpsVars[1]},
 Function[{kkguess, thetaguess},
With[{qfVal=quickFunc01[kkguess,thetaguess,0]},
  Join[{kk[t - 1] -> kNow, theta[t - 1] -> aThVal, 
    eps[theta][t] -> anEpsVal}, 
   Thread[{cc[t], kk[t], ratioThetaToC[t], theta[t], cc[t + 1], 
      kk[t + 1], ratioThetaToC[t + 1], theta[t + 1], cc[t + 2], 
      kk[t + 2], ratioThetaToC[t + 2], theta[t + 2]} -> 
    Flatten[(Private`computeXtPath[{Private`bmatExt // N, 
Private`phimatExt // N,  Private`fmatExt // N, 
Private`psiepsExt, Private`psicExt, 
    Private`psizExt}, 3, 0][[4+Range[12]]] // N // Expand )/. 
{theXtm1Vars[[2]] -> kNow, 
        theXtm1Vars[[4]] -> aThVal, theEpsVars[[1]] -> anEpsVal}]], 
   Thread[theZVars :> 
{
qfVal[[7]],
qfVal[[8]],
qfVal[[9]],
qfVal[[10]],
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[9]], 
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[10]], 
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[11]], 
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[12]]
}
]]]]]


updateGuess02[kkguessVal_, thetaguessVal_, theSubs_] := 
With[{subVals=theSubs[kkguessVal, thetaguessVal]},
  With[{forFR = 
     Thread[(Private`rbcEqnsExt //. 
           N[Private`tog] //. (subVals)(* // 
         Simplify*)) == 0]},
   Flatten[{({cc[t], kk[t], theta[t],cc[t+1], kk[t+1], theta[t+1]} //. 
          (subVals)) /. #, Last /@ #} &@
     FindRoot[
      forFR, {{zzz$0$1, 0}, {zzz$0$2, 0}, {zzz$0$3, 0}, {zzz$0$4, 
        0}}]]]]


quickFunc02[kValNow_, thetaValNow_, epsValNow_] := 
 FixedPoint[
  updateGuess02 @@ 
    Append[#[[{2, 3}]], 
     genEqnSubs02[kValNow, thetaValNow, epsValNow]] &, {.1, N[kVal], 1}, 
  15]


anErr03[kkk_?NumberQ,ttt_?NumberQ,eee_?NumberQ]:=With[
{qfRes02=quickFunc02[kkk,ttt,eee]},
With[{qfRes01=quickFunc01[qfRes02[[2]],qfRes02[[3]],0]},
With[{sfRes=
solnFuncsExt00[{ig,qfRes01[[2]],ig,qfRes01[[3]],0}]},Print["from qfRes01, qfRes02 an sfRes",{qfRes01,qfRes02,sfRes}];
With[{pathSubs=Flatten[(Private`computeXtPath[linMod,3,1]/.{ProtectedSymbols`xxxtm1Var$4->ttt,ProtectedSymbols`xxxtm1Var$2->kkk,epsVar$1->eee})/.
Thread[{zzz$0$1,zzz$0$2,zzz$0$3,zzz$0$4}->qfRes02[[6+Range[4]]]]/.Thread[{zzz$1$1,zzz$1$2,zzz$1$3,zzz$1$4}->qfRes01[[6+Range[4]]]]/.Thread[{zzz$2$1,zzz$2$2,zzz$2$3,zzz$2$4}->sfRes[[8+Range[4]]]]]},Print["pathSubs=",pathSubs];
((Private`rbcEqnsExt/.(Private`tog//N))/.eps[theta][t]->eee)/.
Thread[{ig,ig,ig,ig,ig,ig,ig,ig,ig,ig,ig,ig,cc[t-1],kk[t-1],ratioThetaToC[t-1],theta[t-1],cc[t],kk[t],ratioThetaToC[t],theta[t],cc[t+1],kk[t+1],ratioThetaToC[t+1],theta[t+1]}->pathSubs]]]]]


Plot3D[Norm[anErr03[kkk,ttt,0]],{kkk,.1,.8},{ttt,.9,1.1}]









(*approx



eqnSubs00 = 
  Join[{kk[t - 1] -> kNow, theta[t - 1] -> aThVal, 
    eps[theta][t] -> anEpsVal}, 
   Thread[{cc[t], kk[t], ratioThetaToC[t], theta[t], cc[t + 1], 
      kk[t + 1], ratioThetaToC[t + 1], theta[t + 1]} -> 
     Flatten[{xtExt00, xtp1Ext00} /. {xxxtm1Var$2 -> kVal, 
         xxxtm1Var$4 -> aThVal, epsVar$1 -> anEpsVal} /. someSubs00]]];

Private`rbcEqnsExt //. Private`tog /. eqnSubs00



numNodes = 150; 
aGSpec = {1, {numNodes, kLow, kHigh}, {numNodes, thLow, 
    thHigh}, {numNodes, 3*sigLow, 3*sigHigh}};

solnFuncsExt00PF = 
  Private`makeInterpFuncPF[solnFuncsExt00, {1, 3}, aGSpec, 1];

solnSubsExt01 = 
  Private`makeConstraintFixedPointFunc[
   Private`hFuncExt, {Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N}, 
   solnFuncsExt00PF[[8 + Range[4]]], {}, {{.2}, {.3}, {.2}, {.9}}, {1,
     3}];
someSubs01 = solnSubsExt01[.1, kNow, 10, aThVal, anEpsVal];
solnFuncsExt01 = Private`subsFuncToVecFunc[solnSubsExt01];
*)
*)




(*used compiled
genX0Z0Funcs[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ}]:=
With[{numXVars=Length[BB],numZVars=Length[psiZ[[1]]]},
With[{xtm1Vars=Private`genXtm1Vars[numXVars]},
With[{compArgs={#,_Real}&/@xtm1Vars},
Compile @@ {compArgs,Join[BB.Transpose[{xtm1Vars}]+
Inverse[IdentityMatrix[Length[xtm1Vars]]-FF] . phi . psiC,ConstantArray[0,{numZVars,1}]]}]]]
*)

(*
genX0Z0Funcs[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ}]:=
With[{numXVars=Length[BB],numZVars=Length[psiZ[[1]]]},
With[{xtm1Vars=Private`genXtm1Vars[numXVars]},
With[{compArgs=xtm1Vars},
Function @@ {compArgs,Join[BB.Transpose[{xtm1Vars}]+
Inverse[IdentityMatrix[Length[xtm1Vars]]-FF] . phi . psiC,ConstantArray[0,{numZVars,1}]]}]]]




(*func of xtm1vars,epsvars,zvars*)
genLilXkZkFunc[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ}]:=
With[{numXVars=Length[BB],
numEpsVars=Length[psiEps[[1]]],numZVars=Length[psiZ[[1]]]},
With[{xtm1Vars=Private`genXtm1Vars[numXVars],
epsVars=Private`genEpsVars[numEpsVars],
zVars=Reverse[Flatten[genZVars[0,numZVars]]]},
With[{compArgs={#,_Real}&/@Join[xtm1Vars,epsVars,zVars]},
Compile @@ {compArgs,
With[{xtVals=BB.Transpose[{xtm1Vars}]+
Inverse[IdentityMatrix[Length[xtm1Vars]]-FF] . phi . psiC + phi . psiEps . Transpose[{epsVars}]+
phi . psiZ . Transpose[{zVars}]},
Join[Transpose[{xtm1Vars}],xtVals,
BB.xtVals+Inverse[IdentityMatrix[Length[xtm1Vars]]-FF] . phi . psiC,
Transpose[{epsVars}]]]}]]]


(*func of xtm1vars,epsvars,zvars and a guess for xt*)
genLilXkZkFunc[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ},XZFuncs:{_Function..},xtGuess_?MatrixQ]:=
With[{numXVars=Length[BB],
numEpsVars=Length[psiEps[[1]]],numZVars=Length[psiZ[[1]]]},
With[{xtm1Vars=Private`genXtm1Vars[numXVars],
epsVars=Private`genEpsVars[numEpsVars],
zVars=Reverse[Flatten[genZVars[0,numZVars]]]},
With[{fCon=fSum[linMod,XZFuncs,xtGuess]},
With[{compArgs={#,_Real}&/@Join[xtm1Vars,epsVars,zVars]},
Compile @@ {compArgs,
With[{xtVals=BB.Transpose[{xtm1Vars}]+
Inverse[IdentityMatrix[Length[xtm1Vars]]-FF] . phi . psiC + phi . psiEps . Transpose[{epsVars}]+
phi . psiZ . Transpose[{zVars}] +FF.fCon},
Join[Transpose[{xtm1Vars}],xtVals,
BB.xtVals+Inverse[IdentityMatrix[Length[xtm1Vars]]-FF] . phi . psiC+fCon,
Transpose[{epsVars}]]]}]]]]

(*sum for tp1 mult by FF for t*)
fSum[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ},XZFuncs:{_Function..},xtGuess_?MatrixQ]:=
With[{numXVars=Length[BB],numZVars=Length[psiZ[[1]]]},
With[{
fPows=NestList[FF.#&,IdentityMatrix[numZVars],Length[XZFuncs]-1]},
With[{xzRes=Drop[FoldList[#2@@(Flatten[#1][[Range[numXVars]]])&,
xtGuess,XZFuncs],1]},Plus @@
MapThread[Dot[#1,phi.psiZ.Drop[#2,numXVars]]&,{fPows , xzRes}]]]]

genPath[xzFunc_Function,
XZFuncs:{_Function..},xtm1Val_?MatrixQ,epsVal_?MatrixQ]:=
With[{numXVars=Length[xtm1Val]},
With[{xtVal=xzFunc @@ Flatten[Join[xtm1Val,epsVal]]},
With[{xzRes=FoldList[(#2@@(Flatten[#1][[Range[numXVars]]]))[[Range[numXVars]]]&,
xtVal[[Range[numXVars]]],XZFuncs]},Join[xtm1Val,Join @@xzRes]]]]

(*eqnsfuncs func of xtm1,xt,xtp1,eps  returns discrep*)
(*xkfunc func of xtm1, eps zs returns xtm1,xt,xtp1,eps as matrices*)
Print["exactCalcsRBC.mth:should compile"];

(*returns function of xtm1 eps that gives xt and z*)

genFRFunc[{numX_Integer,numEps_Integer,numZ_Integer},
xkFunc_CompiledFunction,eqnsFunc_CompiledFunction]:=
With[{funcArgs=Table[Unique["theFRFuncArgs"],{numX+numEps}],
zArgs=Table[Unique["theFRZArgs"],{numZ}]},
With[{zArgsInit={#,0}&/@zArgs,funcName=Unique["fName"]},
funcName[funcArgs:{_?NumberQ..},zArgs:{_?NumberQ..}]:=
eqnsFunc@@(Flatten[xkFunc@@Join[funcArgs,zArgs]]);
ReplacePart[
Function[xxxx,With[{zVals=zArgs/.FindRoot[funcName[funcArgs,zArgs],zArgsInit]},
Join[(xkFunc@@Join[funcArgs,zVals])[[numX+Range[numX]]],
Transpose[{zVals}]]]],
1->funcArgs]]]

genFPFunc[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ},
XZFuncs:{_Function..},xtGuess_?MatrixQ,eqnsFunc_CompiledFunction]:=
With[{numX=Length[BB],numEps=Length[psiEps[[1]]],numZ=Length[psiZ[[1]]]},
With[{funcArgs=Table[Unique["theFPFuncArgs"],{numX+numEps}]},
ReplacePart[
Function[xxxx,
FixedPoint[With[{xzFuncNow=
genFRFunc[{numX,numEps,numZ},genLilXkZkFunc[linMod,XZFuncs,#[[Range[numX]]]],
eqnsFunc]},xzFuncNow @@funcArgs]&,xtGuess,3]],
1->funcArgs]]]



doIter[linMod:{BB_?MatrixQ,phi_?MatrixQ,FF_?MatrixQ,psiEps_?MatrixQ,psiC_?MatrixQ,psiZ_?MatrixQ},XZFuncsNow:{_Function..},
xtGuess_?MatrixQ,eqnsFunc_CompiledFunction]:=
With[{numX=Length[BB],numEps=Length[psiEps[[1]]],numZ=Length[psiZ[[1]]]},
With[{theFuncs=genFPFunc[linMod,XZFuncsNow,xtGuess,eqnsFunc]},
{theFuncs,Prepend[XZFuncsNow,genXZFuncPF[{numX,numEps,numZ},theFuncs]]}]]




genXZFuncPF[{numX_Integer,numEps_Integer,numZ_Integer},
aLilXkZkFunc_Function]:=
With[{funcArgs=Table[Unique["theFRFuncArgs"],{numX}],
theZeroes=Table[0,{numEps}]},
ReplacePart[
Function[xxxx,aLilXkZkFunc@@Join[funcArgs,theZeroes]],
1->funcArgs]]
*)


