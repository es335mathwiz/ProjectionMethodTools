Needs["simpleRBCModel`"]
Needs["AMASeriesRepresentation`"]
kVal = kk /. Private`kSSSub //. Private`tog;
cVal = cc /. Private`cSSSub /. theta -> 1 //. Private`tog // N;
kLow = .01*kVal;
kHigh = 4*kVal;
sigVal = sigma //. Private`tog // N;
sigLow = -3*sigVal;
sigHigh = 3*sigVal;
thLow = .9;
thHigh = 1.1;


linMod={Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N};

Print["exactCalcsRBC.mth:should compile"];
genFRFunc[kktm1_?NumberQ,thtm1_?NumberQ,epsVal_?NumberQ]:=
With[{theZVars=Reverse[Flatten[genZVars[0,4]]]/.zName_[t]->zName,
aPath=
Private`computeXtPath[linMod,1,0]/.{
xxxtm1Var$1->0,xxxtm1Var$2->kktm1,
xxxtm1Var$3->0,xxxtm1Var$4->thtm1,epsVar$1->epsVal}},
Function @@ {theZVars,aPath}]



(*

(*one time period*)
(*00*)

solnSubsExt00 = 
  Private`makeConstraintFindRootFunc[
   Private`hFuncExt, {Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N}, {}];

solnFuncsExt00 = Private`subsFuncToVecFunc[solnSubsExt00];

eqnErrs00 = eqnErrsOnPathPF[solnFuncsExt00, {.1, kVal*1.25, 10, .9, .05}, 
   20];

linMod={Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N};



anErr01[kkk_?NumberQ,ttt_?NumberQ,eee_?NumberQ]:=
((Private`rbcEqnsExt/.(Private`tog//N))/.eps[theta][t]->eee)/.
Thread[{ig,ig,ig,ig,cc[t-1],kk[t-1],ratioThetaToC[t-1],theta[t-1],cc[t],kk[t],ratioThetaToC[t],theta[t],cc[t+1],kk[t+1],ratioThetaToC[t+1],theta[t+1]}->Flatten[(Private`computeXtPath[linMod,1,1]/.{ProtectedSymbols`xxxtm1Var$4->ttt,ProtectedSymbols`xxxtm1Var$2->kkk,epsVar$1->eee})/.solnSubsExt00[it,kkk,ig,ttt,eee]]]


FindMaximum[{
And[.1<= kkk<=.7,.9<=ttt<=1.1,-0.03<=eee<=0.03]},
{kkk,ttt,eee}]

Plot3D[Norm[anErr01[kkk,ttt,0]],{kkk,.1,.8},{ttt,.9,1.1}]

(*two periods*)

genEqnSubs01[kNow_, aThVal_, anEpsVal_] :=With[
{ theZVars=Reverse[Flatten[genZVars[1,4,-1]]]/.zName_[t]->zName,
theXtm1Vars=Private`genXtm1Vars[4],
theEpsVars=Private`genEpsVars[1]},
 Function[{kkguess, thetaguess}, 
  Join[{kk[t - 1] -> kNow, theta[t - 1] -> aThVal, 
    eps[theta][t] -> anEpsVal}, 
   Thread[{cc[t], kk[t], ratioThetaToC[t], theta[t], cc[t + 1], 
      kk[t + 1], ratioThetaToC[t + 1], theta[t + 1], cc[t + 2], 
      kk[t + 2], ratioThetaToC[t + 2], theta[t + 2]} -> 
    Flatten[(Private`computeXtPath[{Private`bmatExt // N, 
Private`phimatExt // N,  Private`fmatExt // N, 
Private`psiepsExt, Private`psicExt, 
    Private`psizExt}, 2, 0][[4+Range[12]]] // N // Expand )/. 
{theXtm1Vars[[2]] -> kNow, 
        theXtm1Vars[[4]] -> aThVal, theEpsVars[[1]] -> anEpsVal}]], 
   Thread[theZVars :> {solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[
       9]], solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[10]], 
      solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[11]], 
      solnFuncsExt00[{ig, kkguess, ig, thetaguess, 0}][[12]]}]]]]


updateGuess01[kkguessVal_, thetaguessVal_, theSubs_] := With[{},
  With[{forFR = 
     Thread[(Private`rbcEqnsExt //. 
           Private`tog //. (theSubs[kkguessVal, thetaguessVal]) (*// 
         Simplify*)) == 0]},
   (*Print[{forFR,zzz$1$1/.(theSubs[kkguessVal,thetaguessVal])}];*)
   Flatten[{({cc[t], kk[t], theta[t],cc[t+1], kk[t+1], theta[t+1]} //. 
          theSubs[kkguessVal, thetaguessVal]) /. #, Last /@ #} &@
     FindRoot[
      forFR, {{zzz$0$1, 0}, {zzz$0$2, 0}, {zzz$0$3, 0}, {zzz$0$4, 
        0}}]]]]


quickFunc01[kValNow_, thetaValNow_, epsValNow_] := 
 FixedPoint[
  updateGuess01 @@ 
    Append[#[[{2, 3}]], 
     genEqnSubs01[kValNow, thetaValNow, epsValNow]] &, {.1, kVal, 1}, 
  15]



anErr02[kkk_?NumberQ,ttt_?NumberQ,eee_?NumberQ]:=With[
{qfRes=quickFunc01[kkk,ttt,eee]},
With[{sfRes=
solnFuncsExt00[{ig,qfRes[[2]],ig,qfRes[[3]],0}]},Print["from qfRes an sfRes",{qfRes,sfRes}];
With[{pathSubs=Flatten[(Private`computeXtPath[linMod,2,1]/.{ProtectedSymbols`xxxtm1Var$4->ttt,ProtectedSymbols`xxxtm1Var$2->kkk,epsVar$1->eee})/.
Thread[{zzz$0$1,zzz$0$2,zzz$0$3,zzz$0$4}->qfRes[[6+Range[4]]]]/.Thread[{zzz$1$1,zzz$1$2,zzz$1$3,zzz$1$4}->sfRes[[8+Range[4]]]]]},Print["pathSubs=",pathSubs];
((Private`rbcEqnsExt/.(Private`tog//N))/.eps[theta][t]->eee)/.
Thread[{ig,ig,ig,ig,ig,ig,ig,ig,cc[t-1],kk[t-1],ratioThetaToC[t-1],theta[t-1],cc[t],kk[t],ratioThetaToC[t],theta[t],cc[t+1],kk[t+1],ratioThetaToC[t+1],theta[t+1]}->pathSubs]]]]


Plot3D[Norm[anErr02[kkk,ttt,0]],{kkk,.1,.8},{ttt,.9,1.1}]



(*

<<JavaGraphics`

Timing[twoPerErr=Plot3D[quickFunc01[kkk, ttt, 0][[1]] - 
  condExpExt[.1, kkk, .1, ttt, 0][[4]], {kkk, .1, .4}, {ttt, .9, 1.1},
  PlotRange -> All]]
Export["cFuncTwoPerErr.pdf",twoPerErr]

Timing[Plot3D[quickFunc02[kkk, ttt, 0][[1]] - 
  condExpExt[.1, kkk, .1, ttt, 0][[4]], {kkk, .1, .4}, {ttt, .9, 1.1},
  PlotRange -> All]]

Export["cFuncThreePerErr.pdf",threePerErr]

*)




(*three periods*)

genEqnSubs02[kNow_, aThVal_, anEpsVal_] :=With[
{ theZVars=Flatten[Reverse/@genZVars[2,4,-1]]/.zName_[t]->zName,
theXtm1Vars=Private`genXtm1Vars[4],
theEpsVars=Private`genEpsVars[1]},
 Function[{kkguess, thetaguess},
With[{qfVal=quickFunc01[kkguess,thetaguess,0]},
  Join[{kk[t - 1] -> kNow, theta[t - 1] -> aThVal, 
    eps[theta][t] -> anEpsVal}, 
   Thread[{cc[t], kk[t], ratioThetaToC[t], theta[t], cc[t + 1], 
      kk[t + 1], ratioThetaToC[t + 1], theta[t + 1], cc[t + 2], 
      kk[t + 2], ratioThetaToC[t + 2], theta[t + 2]} -> 
    Flatten[(Private`computeXtPath[{Private`bmatExt // N, 
Private`phimatExt // N,  Private`fmatExt // N, 
Private`psiepsExt, Private`psicExt, 
    Private`psizExt}, 3, 0][[4+Range[12]]] // N // Expand )/. 
{theXtm1Vars[[2]] -> kNow, 
        theXtm1Vars[[4]] -> aThVal, theEpsVars[[1]] -> anEpsVal}]], 
   Thread[theZVars :> 
{
qfVal[[7]],
qfVal[[8]],
qfVal[[9]],
qfVal[[10]],
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[9]], 
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[10]], 
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[11]], 
solnFuncsExt00[{ig, qfVal[[2]], ig, qfVal[[3]],0}][[12]]
}
]]]]]


updateGuess02[kkguessVal_, thetaguessVal_, theSubs_] := 
With[{subVals=theSubs[kkguessVal, thetaguessVal]},
  With[{forFR = 
     Thread[(Private`rbcEqnsExt //. 
           N[Private`tog] //. (subVals)(* // 
         Simplify*)) == 0]},
   Flatten[{({cc[t], kk[t], theta[t],cc[t+1], kk[t+1], theta[t+1]} //. 
          (subVals)) /. #, Last /@ #} &@
     FindRoot[
      forFR, {{zzz$0$1, 0}, {zzz$0$2, 0}, {zzz$0$3, 0}, {zzz$0$4, 
        0}}]]]]


quickFunc02[kValNow_, thetaValNow_, epsValNow_] := 
 FixedPoint[
  updateGuess02 @@ 
    Append[#[[{2, 3}]], 
     genEqnSubs02[kValNow, thetaValNow, epsValNow]] &, {.1, N[kVal], 1}, 
  15]


anErr03[kkk_?NumberQ,ttt_?NumberQ,eee_?NumberQ]:=With[
{qfRes02=quickFunc02[kkk,ttt,eee]},
With[{qfRes01=quickFunc01[qfRes02[[2]],qfRes02[[3]],0]},
With[{sfRes=
solnFuncsExt00[{ig,qfRes01[[2]],ig,qfRes01[[3]],0}]},Print["from qfRes01, qfRes02 an sfRes",{qfRes01,qfRes02,sfRes}];
With[{pathSubs=Flatten[(Private`computeXtPath[linMod,3,1]/.{ProtectedSymbols`xxxtm1Var$4->ttt,ProtectedSymbols`xxxtm1Var$2->kkk,epsVar$1->eee})/.
Thread[{zzz$0$1,zzz$0$2,zzz$0$3,zzz$0$4}->qfRes02[[6+Range[4]]]]/.Thread[{zzz$1$1,zzz$1$2,zzz$1$3,zzz$1$4}->qfRes01[[6+Range[4]]]]/.Thread[{zzz$2$1,zzz$2$2,zzz$2$3,zzz$2$4}->sfRes[[8+Range[4]]]]]},Print["pathSubs=",pathSubs];
((Private`rbcEqnsExt/.(Private`tog//N))/.eps[theta][t]->eee)/.
Thread[{ig,ig,ig,ig,ig,ig,ig,ig,ig,ig,ig,ig,cc[t-1],kk[t-1],ratioThetaToC[t-1],theta[t-1],cc[t],kk[t],ratioThetaToC[t],theta[t],cc[t+1],kk[t+1],ratioThetaToC[t+1],theta[t+1]}->pathSubs]]]]]


Plot3D[Norm[anErr03[kkk,ttt,0]],{kkk,.1,.8},{ttt,.9,1.1}]









(*approx



eqnSubs00 = 
  Join[{kk[t - 1] -> kNow, theta[t - 1] -> aThVal, 
    eps[theta][t] -> anEpsVal}, 
   Thread[{cc[t], kk[t], ratioThetaToC[t], theta[t], cc[t + 1], 
      kk[t + 1], ratioThetaToC[t + 1], theta[t + 1]} -> 
     Flatten[{xtExt00, xtp1Ext00} /. {xxxtm1Var$2 -> kVal, 
         xxxtm1Var$4 -> aThVal, epsVar$1 -> anEpsVal} /. someSubs00]]];

Private`rbcEqnsExt //. Private`tog /. eqnSubs00



numNodes = 150; 
aGSpec = {1, {numNodes, kLow, kHigh}, {numNodes, thLow, 
    thHigh}, {numNodes, 3*sigLow, 3*sigHigh}};

solnFuncsExt00PF = 
  Private`makeInterpFuncPF[solnFuncsExt00, {1, 3}, aGSpec, 1];

solnSubsExt01 = 
  Private`makeConstraintFixedPointFunc[
   Private`hFuncExt, {Private`bmatExt // N, Private`phimatExt // N, 
    Private`fmatExt // N, Private`psiepsExt // N, 
    Private`psicExt // N, Private`psizExt // N}, 
   solnFuncsExt00PF[[8 + Range[4]]], {}, {{.2}, {.3}, {.2}, {.9}}, {1,
     3}];
someSubs01 = solnSubsExt01[.1, kNow, 10, aThVal, anEpsVal];
solnFuncsExt01 = Private`subsFuncToVecFunc[solnSubsExt01];
*)
*)
