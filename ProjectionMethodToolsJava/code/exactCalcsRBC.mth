Needs["simpleRBCModel`"]
Needs["AMASeriesRepresentation`"]
thVal=theta//.ssSolnSubsRE//.simpParamSubs;
kVal = kk /. Private`kSSSubRE//.simpParamSubs;
cVal = cc /. Private`cSSSubRE//.simpParamSubs ;
kLow = 1/10*kVal;
kHigh = 4*kVal;
sigVal = sigma //. simpParamSubs;
sigLow = -3*sigVal;
sigHigh = 3*sigVal;
thLow = 9/10;
thHigh = 11/10;
pdf=NormalDistribution[0, sigVal];

linMod={Private`bmatSymbRE // N, Private`phimatSymbRE // N, 
    Private`fmatSymbRE // N, Private`psiepsSymbRE // N, 
    Private`psicSymbRE // N, Private`psiz // N,{{0}}};

Get["genArbLin.mth"]

notLinMod={abmat // N, aphimat // N, 
    anfmat // N, apsieps // N, 
    apsic // N, apsiz // N,{{0}}};



X0Z0=genX0Z0Funcs[linMod];


anX={1,.18,1.1};
anXEps={1,.18,1.1,0.01};
anXEpsZs={1,.18,1.1,0.01,.1,.2,.3};
probDims={3,1,3};

aGSpec={1,{4,kLow,kHigh},{3,thLow,thHigh},{3,sigLow,3*sigHigh}};
theDist = {{{ee, NormalDistribution[0, 0.01]}}};

(*X0Z0 @@ anX -> xt,zt*)


(*
{x1z1PF,X1Z1PF}=doIterPF[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext];



{x1z1RE,X1Z1RE}=doIterRE[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext,{pdf}];



{x2z2PF,X2Z2PF}=doIterPF[linMod,X1Z1PF,X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext];



bunchOfPFs=nestIterPF[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[4]]],
Private`rbcEqnsFunctionalNext,4];

pathErrs[probDims,bunchOfPFs[[3]],Private`rbcEqnsFunctionalNext,Transpose[{anX}],{{0.01}}]




{x2z2RE,X2Z2RE}=doIterRE[linMod,X1Z1RE,X0Z0[1,.18,1,1][[Range[3]]],
Private`rbcEqnsFunctionalNext,{pdf}];



bunchOfPFs=nestIterPF[linMod,{X0Z0},X0Z0[1,.18,1,1][[Range[4]]],
Private`rbcEqnsFunctionalNext,4];
pathErrs[probDims,bunchOfPFs[[3]],Private`rbcEqnsFunctionalNext,Transpose[{anX}],{{0.01}}]



truncErrorMat[Private`fmat // N,Private`phimat // N,1]


*)
