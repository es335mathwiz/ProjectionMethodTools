theRes=resZ10$0$0[toOrder[{2,2,2}]]
modSymbNow=modSymb
zSubNow=doRecurIneqOcc[{}];
numZs=Length[zSubNow];
nodePtSubs=gtXFormedChebSubsNotStrings[
theRes[getTheWeightedStochasticBasis[]]];
If[theRes[isConvergedQ[]], 
{orig,forZSub}=
ProjectionInterface`Private`redoCreatePolynomials[modSymbNow,theRes]]x;
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0];
xVars=Through[#[Global`t]]&/@xVarsNoT;
xVarSubs=MapThread[#1->#2& ,{xVars[[-1]],({qq[t],ru[t]}-orig[[{1,2}]])}];
betterEqnZSub=Join[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->eps,qq->qq[t-1],rr->rr[t-1],ru->ru[t-1]}),{(discrep[t]->((discrep[t]-theEqns[[3]]))/.xVarSubs),eqvdIf->If}];
rrVal=((((rr[t]-theEqns[[4]]/.betterEqnZSub)/.
(discrep[t]->(discrep[t]-theEqns[[3]])))/.{eps[ru][t]->ru$Shock,qq[t-1]->qq,ru[t-1]->ru,eps->ru$Shock,eqvdIf->If})/.xVarSubs)/.
{eps[ru][t]->ru$Shock,qtm1->qq,rutm1->ru,eps->ru$Shock,eqvdIf->If};


betterPathZSub=Append[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->ru$Shock,qq->qtm1,rr->rtm1,ru->rutm1}),eqvdIf->If];
pathNow=(genPath[1,1]/.betterPathZSub)/.(discrep[t]->(discrep[t]-theEqns[[3]]))/.{qq[t-1]->qtm1,ru[t-1]->rutm1};
hProd=((hmat//numIt) . pathNow//Expand//Chop)/.
{eps[ru][t]->ru$Shock,qtm1->qq,rutm1->ru,eps->ru$Shock,eqvdIf->If};


Transpose[{rrVal/.nodePtSubs,(hProd[[2,1]])/.nodePtSubs}]

