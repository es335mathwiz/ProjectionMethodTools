Needs["ProjectionInterface`"]
Get["paperFocus.mth"]

zSubNow=doRecurIneqOcc[{}];
numZs=Length[zSubNow];
zVarNames=Flatten[redoGenZVars[numZs,1]]/.ProjectionInterface`Private`ridTSubs;
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])];
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0];
xVars=Through[#[Global`t]]&/@xVarsNoT;
thePath=genPath[numZs+1]/.
{Global`qtm1->(xVars[[-1,1]]/.Global`t->Global`t-1),Global`rtm1->Global`rr[Global`t-1],
Global`rutm1->(xVars[[-1,2]]/.Global`t->Global`t-1),Global`eps->Global`eps[Global`ru][Global`t]};
xTp1Vals=MapThread[{
#2[[1]][#3[[1]][Global`t],#3[[2]][Global`t],0],
#2[[2]][#3[[1]][Global`t],#3[[2]][Global`t],0]}&,
{Drop[xVars,-1],Drop[zSubNow,0],Drop[xVarsNoT,1]}]






zSubs=
MapThread[(#1[Global`t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xTp1Vals}];
zEqns=ProjectionInterface`Private`subOutPiecewise[zSubs/.HoldPattern[xx_->yy_]->xx  -(yy)];
zZap=(zVarNames[[-1]][Global`t]/.Flatten[Solve[thePath[[5,1]]==Global`rUnderBar//Global`numIt,zVarNames[[-1]][Global`t]]])//Expand;
theEqns=Join[
	({xVars[[-1,1]]-(thePath[[4,1]]),xVars[[-1,2]]-(thePath[[6,1]])})//Expand,
{Global`discrep[Global`t]-((thePath[[5,1]]/.zVarNames[[-1]][Global`t]->0)-Global`rUnderBar//Global`numIt),
Global`rr[Global`t]-(thePath[[5,1]])
},
zEqns,
{zVarNames[[-1]][Global`t]-(Global`eqvdIf[Global`discrep[Global`t]>=0,0,zZap//Expand]//Expand)}//Expand];
newWeightedStochasticBasis[modSymb,(theEqns)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modSymb];
polyRange = {{Global`qLow, Global`qHigh}, {Global`ruLow, Global`ruHigh}} //. Global`mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. Global`mySubs, initPower, theShock,
    Global`theMean //. Global`mySubs, {Global`sigma$u} //. Global`mySubs, 
   Global`integOrder //. Global`mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {Length[theEqns], 1}], modClass, simp];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 01"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{1,1,1}]];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 02"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{2,2,1}]];
If[to$551[isConvergedQ[]]===True,Print["converged 03"],Throw["projection polynomial computation did not converge"]];









theRes=resZ10$0$0[toOrder[{7,7,1}]]
modSymbNow=modSymb
zSubNow=doRecurIneqOcc[{}];
numZs=Length[zSubNow];
nodePtSubs=gtXFormedChebSubsNotStrings[
theRes[getTheWeightedStochasticBasis[]]];
If[theRes[isConvergedQ[]], 
{orig,forZSub}=
ProjectionInterface`Private`redoCreatePolynomials[modSymbNow,theRes]];
orig=CreatePolynomials[theRes]//Expand;
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0];
xVars=Through[#[Global`t]]&/@xVarsNoT;
xVarSubs=MapThread[#1->#2& ,
{xVars[[-1]],(orig[[{1,2}]]/.
Thread[xVarsNoT[[-1]]->{qq,ru}])//Expand}];
xLagSub=Thread[(xVars[[-1]]/.t->t-1)->{qq,ru}]
discrepSub=(discrep[t]->((discrep[t]-theEqns[[3]]))/.xLagSub)
betterForZSub=MapThread[#1->#2&,Expand[
(forZSub/.(xLagSub)/.xVarSubs)]]/.discrepSub
shockSub={eps[ru][t]->ru$Shock,eqvdIf->If,qtm1->qq,rutm1->ru,eps->ru$Shock}
rrVal=(((((rr[t]-theEqns[[4]])/.discrepSub)//.betterForZSub)/.xLagSub)/.shockSub)/.Thread[{qq,ru}->xVarsNoT[[-1]]]





hProd=Flatten[(hmat//numIt).(pathNow=(((genPath[1,1]/.betterForZSub)/.shockSub)/.Thread[{qq,ru}->xVarsNoT[[-1]]])/.shockSub)]

Transpose[{rrVal/.nodePtSubs,hProd/.nodePtSubs}//Chop]


