Needs["ccybModel`"]

(*impose one period*)


Print["variable names (symbols?) should come from model bmat comp. don't use tm1"];
Print["provide shock names should come from model bmat comp"];
chkOrd=2;
chkPts={
{20,0,5},
{20,0,5},
{20,-.1,.1}
}


mig00=Private`makeInitGuess[modSpec={compCon,stateSel,{{kktm1},{mu1tm1},{mu2tm1},{mu3tm1},{vvtm1}},noCnstrnGuess,{2,5,1,1,1},getCcybFixedPoint},xtm1Val={.4,.1},epsVal={.0},{}]

Timing[{ig,ig,zFuncsOnePF,finFuncOnePF}=genFinalPF[modSpec,chkOrd,chkPts,{},20]];
aPathFinal[modSpec,Transpose[{{0,0,0,0,-5}}],{{0}},finFuncOnePF]
Plot[aPathFinal[modSpec,Transpose[{{0,0,0,0,1.0}}],{{ev}},finFuncOnePF][[6]],{ev,-.1,.1}]


(*

chkOrd=2;
chkPts={
{10,0,5},
{10,0,5},
{10,-.1,.1}
}
Timing[{ig,ig,zFuncsOneRE0,finFuncOneRE0}=genFinalRE[modSpec,chkOrd,chkPts,{},0,2]]


{ig,ig,zFuncsOnePF,finFuncOnePF}=genFinalPF[modSpec,chkOrd,chkPts,{},0];
aPathFinal[modSpec,Transpose[{{0,0,0,0,-5}}],{{0}},finFuncOnePF]


Private`makeValSubs[modSpec,xtm1Val,epsVal]
Private`makeInitStateTryEqnsSubbed[modSpec,xtm1Val,epsVal,{},za={kkArg,vvArg}]

Private`makeSysFunction[modSpec,xtm1Val,epsVal,{},za]

fp00=fpForInitStateFunc[modSpec,{.4,0},{.1},{}]


trip=Function[{xx,yy},fpForInitStateFunc[modSpec,{xx,yy},{0},{}]]
interp00=makeInterpFuncPF[modSpec,
Function[{xx,yy},fpForInitStateFunc[modSpec,{xx,yy},{0},{}]],chkOrd,chkPts]





interp01=makeInterpFuncPF[modSpec,Function[{xx,yy},
fpForInitStateFunc[modSpec,{xx,yy},{0},interp00]],chkOrd,chkPts]


interp02=makeInterpFuncPF[modSpec,Function[{xx,yy},fpForInitStateFunc[modSpec,{xx,yy},{0},interp01]],chkOrd,chkPts]




iterpf00=iterPF[modSpec,chkOrd,chkPts,{}]
iterpf01=iterPF[modSpec,chkOrd,chkPts,iterpf00]



forpf00=forIOrdNPtsPF[modSpec,chkOrd,chkPts,{},ignore,3]



aPathFinal[modSpec,{1,1},{0},finFuncOnePF]

fdrOne=genFinalDR[finFuncOnePF];
(*now RE*)

mig00=Private`makeInitGuess[modSpec={compCon,stateSel,{{xqtm1},{xrtm1},{xrutm1}},noCnstrnGuess,{2,3,1,1,1},getLucaFixedPoint},xtm1Val={-.4,-.1},epsVal={-.3},{}]


Private`makeInitStateTryEqnsSubbed[modSpec,xtm1Val,epsVal,{},za={qqArg,ruArg}]

Private`makeSysFunction[modSpec,xtm1Val,epsVal,{},za]

fp00=fpForInitStateFunc[modSpec,{-.4,0},{-.1},{}]
fp0012=fpForInitStateFunc[modSpec,{-.4,0},{-.1},{},{1,2}]


tryFuncVal=(tryFunc=Function[{xx,yy},fpForInitStateFunc[{compCon,stateSel,{{xqtm1},{xrtm1},{xrutm1}},noCnstrnGuess,{2,3,1,1,1},getLucaFixedPoint},{xx,yy},{0},{}]])[.1,.1]


tryFuncEps=Private`makeREFunc[modSpec,{}];
doInt=Private`myExpect[modSpec,tryFuncEps[1][-.4,0],Private`tryEps,.01]

doInt=Private`myExpect[modSpec,tryFuncEps[#][-.4,0],Private`tryEps,.01]&/@{1,2,-1}




hap=Private`doScalarIntegInterp[modSpec,1,tryFuncEps,2,chkPts,.01]


interp00=makeInterpFuncRE[modSpec,chkOrd,chkPts,{},.01]

iterre00=iterRE[modSpec,chkOrd,chkPts,{},0.01]
iterre01=iterRE[modSpec,chkOrd,chkPts,iterre00,0.01]

iterre02=iterRE[modSpec,chkOrd,chkPts,iterre01,0.01]





forpf00=forIOrdNPtsRE[modSpec,chkOrd,chkPts,{},0.01,3]










{ig,ig,zFuncsOneRE,finFuncOneRE}=genFinalRE[modSpec,chkOrd,chkPts,{},.01,2];


*)
