(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    201118,       4264]
NotebookOptionsPosition[    194657,       4044]
NotebookOutlinePosition[    195276,       4067]
CellTagsIndexPosition[    195233,       4064]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["A Simple Example", "Title"],

Cell["Gary S. Anderson", "Author",
 CellChangeTimes->{{3.6172005766837215`*^9, 3.617200602415076*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}], ",", 
    RowBox[{
    "SetDirectory", "[", 
     "\"\<g:/git/ProjectionMethodTools/ProjectionMethodToolsJava/code\>\"", 
     "]"}]}], "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.61764493105157*^9, 3.6176449762320213`*^9}, {
   3.6176461252696047`*^9, 3.6176461327996798`*^9}, {3.6176461684300365`*^9, 
   3.6176461696100483`*^9}, 3.6176465507588663`*^9}],

Cell[CellGroupData[{

Cell["Luca\[CloseCurlyQuote]s Simplest Financial Market Model", "Section"],

Cell[CellGroupData[{

Cell["Model and Initial Polynomial Basis Definition", "Subsection"],

Cell[CellGroupData[{

Cell["\<\
Provide Model Equations and Generate an instance of the Model\
\[CloseCurlyQuote]s Class ( a Subclass of DoEqns )\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"lucaEqns", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"qq", "[", "t", "]"}], "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"betap", "*", 
           RowBox[{"(", 
            RowBox[{"1", "-", "rhop"}], ")"}], "*", 
           RowBox[{"qq", "[", 
            RowBox[{"t", "+", "1"}], "]"}]}], "+", 
          RowBox[{"rhop", "*", 
           RowBox[{"qq", "[", 
            RowBox[{"t", "-", "1"}], "]"}]}], "-", 
          RowBox[{"sigmap", "*", 
           RowBox[{"rr", "[", "t", "]"}]}], "+", 
          RowBox[{"ru", "[", "t", "]"}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"rr", "[", "t", "]"}], "-", 
        RowBox[{"phip", "*", 
         RowBox[{"qq", "[", "t", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"ru", "[", "t", "]"}], "-", 
        RowBox[{"rho$ru", "*", 
         RowBox[{"ru", "[", 
          RowBox[{"t", "-", "1"}], "]"}]}], "-", 
        RowBox[{"adj", "*", 
         RowBox[{
          RowBox[{"eps", "[", "uu", "]"}], "[", "t", "]"}]}]}]}], "}"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newWeightedStochasticBasis", "[", 
     RowBox[{"lucaMod", ",", "lucaEqns"}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"stateVar", ",", "nonStateVar", ",", "theShock"}], "}"}], ",",
        "modEqns"}], "}"}], "=", 
     RowBox[{"GenerateModelCode", "[", "lucaMod", "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6176184695131807`*^9, 3.6176184715132008`*^9}, {
   3.6176203137766237`*^9, 3.617620320586692*^9}, 3.617622301252499*^9, {
   3.6176238558830457`*^9, 3.617623855893046*^9}, {3.6176418815599227`*^9, 
   3.617641890090008*^9}, 3.6176420120022273`*^9, {3.6177033847505884`*^9, 
   3.6177033969401007`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"daSubs=\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "ProjectionInterface`Private`EquationValDrv", 
      "[", "\<\"qq$tm1.times(-1).times(rhop).plus(qq$t.plus(forInt61).plus(rr$\
t.times(sigmap)).plus(ru$t.times(-1)))\"\>", "]"}], ",", 
     RowBox[{
     "ProjectionInterface`Private`EquationValDrv", 
      "[", "\<\"qq$t.times(-1).times(phip).plus(rr$t)\"\>", "]"}], ",", 
     RowBox[{
     "ProjectionInterface`Private`EquationValDrv", 
      "[", "\<\"ru$t.plus(ru$tm1.times(-1).times(rho$ru)).plus(uu$Shock$tm1.\
times(-1).times(adj))\"\>", "]"}]}], "}"}]}],
  SequenceForm["daSubs=", {
    ProjectionInterface`Private`EquationValDrv[
    "qq$tm1.times(-1).times(rhop).plus(qq$t.plus(forInt61).plus(rr$t.times(\
sigmap)).plus(ru$t.times(-1)))"], 
    ProjectionInterface`Private`EquationValDrv[
    "qq$t.times(-1).times(phip).plus(rr$t)"], 
    ProjectionInterface`Private`EquationValDrv[
    "ru$t.plus(ru$tm1.times(-1).times(rho$ru)).plus(uu$Shock$tm1.times(-1).\
times(adj))"]}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6180477957619686`*^9}],

Cell[BoxData["\<\"\\\"c:\\\\Program \
Files\\\\Java\\\\jdk1.7.0_51\\\\bin\\\\javac\\\" -cp \
./;ProjectionMethodToolsJava-0.0.1-SNAPSHOT.jar;Jama-1.0.2-1.0-SNAPSHOT.jar  \
-target 1.7 ./lucaMod.java\"\>"], "Print",
 CellChangeTimes->{3.618047796101969*^9}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "A list of equations constitutes the model\[CloseCurlyQuote]s definition. \
The state and non-state variables are of the form symbolName[t-1|t|t+1]. The \
shocks are of the form eps[symbolName][t].  The shocks and the variables with \
time index t-1 constitute the state variables. The newWeigthedStochasticBasis \
function associates features of the model definition with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " upvalues of a variable."
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"lucaSubs", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"betap", "\[Rule]", 
      RowBox[{"99", "/", "100"}]}], ",", 
     RowBox[{"phip", "\[Rule]", "1"}], ",", 
     RowBox[{"rhop", "\[Rule]", 
      RowBox[{"1", "/", "2"}]}], ",", 
     RowBox[{"sigmap", "\[Rule]", "1"}], ",", 
     RowBox[{"rUnderBar", "\[Rule]", 
      RowBox[{"2", "/", "100"}]}], ",", 
     RowBox[{"qLow", "\[Rule]", 
      RowBox[{"-", ".5"}]}], ",", 
     RowBox[{"qHigh", "\[Rule]", ".5"}], ",", 
     RowBox[{"ruLow", "\[Rule]", " ", 
      RowBox[{
       RowBox[{"-", "4"}], "*", 
       RowBox[{"sigma$u", "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", "rho$ru"}], ")"}]}]}]}], ",", 
     RowBox[{"ruHigh", "\[Rule]", "  ", 
      RowBox[{"4", "*", 
       RowBox[{"sigma$u", "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", "rho$ru"}], ")"}]}]}]}], ",", 
     RowBox[{"integOrder", "\[Rule]", 
      RowBox[{"{", "10", "}"}]}], ",", 
     RowBox[{"sigma$u", "\[Rule]", "0.02"}], ",", 
     RowBox[{"theMean", "\[Rule]", 
      RowBox[{"{", "0", "}"}]}], ",", 
     RowBox[{"rho$ru", "\[Rule]", " ", "0.5"}], ",", 
     RowBox[{"adj", "\[Rule]", "1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modParams", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "adj", ",", "betap", ",", "phip", ",", "rhop", ",", " ", "rho$ru", ",", 
       "sigmap"}], "}"}], "//.", "lucaSubs"}], "//", "N"}]}], ";"}], "\n", 
 RowBox[{"modEqns", "[", 
  RowBox[{"updateParams", "[", "modParams", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6176184695131807`*^9, 3.6176184709431953`*^9}, {
   3.617703402499878*^9, 3.617703411279773*^9}, {3.6177064442624526`*^9, 
   3.617706470622716*^9}, 3.6177065552335625`*^9, {3.6177068140671525`*^9, 
   3.617706814627158*^9}, {3.617808431086068*^9, 3.617808432756085*^9}, {
   3.617900877016963*^9, 3.6179008776869698`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"polyRange", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"qLow", ",", "qHigh"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"ruLow", ",", "ruHigh"}], "}"}]}], "}"}], "/.", "lucaSubs"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"initPower", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], ";", 
  RowBox[{"shockPower", "=", 
   RowBox[{"{", "1", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"lucaBasis", "=", 
   RowBox[{"GenerateBasis", "[", 
    RowBox[{"stateVar", ",", 
     RowBox[{"polyRange", "//.", "lucaSubs"}], ",", "initPower", ",", 
     "theShock", ",", 
     RowBox[{"theMean", "//.", "lucaSubs"}], ",", 
     RowBox[{
      RowBox[{"{", "sigma$u", "}"}], "//.", "lucaSubs"}], ",", 
     RowBox[{"integOrder", "//.", "lucaSubs"}], ",", "shockPower", ",", 
     "nonStateVar"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6176197329698153`*^9, 3.6176197373298593`*^9}, {
  3.617897602744055*^9, 3.617897609984127*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbolic Computation for First Degree", "Subsection",
 CellChangeTimes->{{3.6176181767412395`*^9, 3.6176181877213497`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"hmat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "rhop"}], ",", "0", ",", "0", ",", "1", ",", "sigmap", 
       ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{"betap", "*", 
          RowBox[{"(", 
           RowBox[{"1", "-", "rhop"}], ")"}]}], ")"}]}], ",", "0", ",", "0"}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "phip"}], ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       RowBox[{"-", "rho$ru"}], ",", "0", ",", "0", ",", "1", ",", "0", ",", 
       "0", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"bmat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "rhop"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}], ",", "0", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "rho$ru"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", "*", "betap", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rho$ru"}], "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "phip", "*", "rhop"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}], ",", "0", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "phip", "*", "rho$ru"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", "*", "betap", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rho$ru"}], "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "rho$ru"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"phimat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "2"}], "*", "sigmap"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}], ",", 
       RowBox[{"2", "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", "*", "betap", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rho$ru"}], "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "phip"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "*", "betap", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
          RowBox[{"phip", "*", "sigmap", "*", 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"phip", "*", "sigmap"}], "-", 
             RowBox[{"Sqrt", "[", 
              RowBox[{
               RowBox[{"4", "*", "betap", "*", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], 
               "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "+", 
                  RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
              "]"}]}], ")"}]}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "betap", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], ")"}]}], 
       ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "phip"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"2", "*", "betap", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rho$ru"}], "+", 
          RowBox[{"phip", "*", "sigmap"}], "+", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"fmat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"phip", "*", "sigmap"}], "-", 
          RowBox[{"Sqrt", "[", 
           RowBox[{
            RowBox[{"4", "*", "betap", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
           "]"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "rhop"}], ")"}]}], ",", "0", ",", "0"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"phip", "*", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"phip", "*", "sigmap"}], "-", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"4", "*", "betap", "*", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "rhop"}], ")"}], "*", "rhop"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "+", 
                 RowBox[{"phip", "*", "sigmap"}]}], ")"}], "^", "2"}]}], 
             "]"}]}], ")"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "rhop"}], ")"}]}], ",", "0", ",", "0"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.617618191091383*^9, 3.6176182619961014`*^9}, {
   3.617618332971815*^9, 3.6176183804022894`*^9}, {3.61761842843277*^9, 
   3.6176185124736104`*^9}, 3.617618623214718*^9, {3.6176246250167437`*^9, 
   3.6176246317668114`*^9}, {3.6176246770072637`*^9, 3.6176247573890676`*^9}, 
   3.617895950299513*^9, 3.6179006239644322`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qkArray", "=", 
   RowBox[{"Array", "[", 
    RowBox[{"qk", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "8"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"theProd", "=", 
    RowBox[{"qkArray", ".", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"doExportOrderedOuter", "[", "lucaBasis", "]"}], "}"}], 
      "]"}]}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"targ", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bmat", ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "qq", "}"}], ",", 
         RowBox[{"{", "rr", "}"}], ",", 
         RowBox[{"{", "ru", "}"}]}], "}"}]}], "+", 
      RowBox[{"phimat", ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "adj", "}"}]}], "}"}], ".", 
       RowBox[{"{", 
        RowBox[{"{", "uu$Shock", "}"}], "}"}]}]}], ")"}], "+", 
    RowBox[{"zero", "*", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"qq", "*", "rr"}], "+", 
       RowBox[{"qq", "*", "uu$Shock"}], "+", 
       RowBox[{"rr", "*", "uu$Shock"}], "+", 
       RowBox[{"qq", "*", "rr", "*", "uu$Shock"}]}], ")"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"goodQkArray", "=", 
   RowBox[{"qkArray", "/.", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Thread", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"tcl", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"CoefficientList", "[", 
              RowBox[{"targ", ",", 
               RowBox[{"{", 
                RowBox[{"qq", ",", "ru", ",", "uu$Shock"}], "}"}]}], "]"}], 
             "]"}]}], ")"}], "\[Equal]", 
          RowBox[{"(", 
           RowBox[{"acl", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"CoefficientList", "[", 
              RowBox[{"theProd", ",", 
               RowBox[{"{", 
                RowBox[{
                "\"\<qq\>\"", ",", "\"\<ru\>\"", ",", "\"\<uu$Shock\>\""}], 
                "}"}]}], "]"}], "]"}]}], ")"}]}], "]"}], "/.", 
        RowBox[{"zero", "\[Rule]", "0"}]}], ",", 
       RowBox[{"Flatten", "[", "qkArray", "]"}]}], "]"}], "]"}]}]}], ";", 
  RowBox[{"goodQkArray", "=", 
   RowBox[{"qkArray", "/.", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Thread", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"tcl", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"CoefficientList", "[", 
              RowBox[{"targ", ",", 
               RowBox[{"{", 
                RowBox[{"qq", ",", "ru", ",", "uu$Shock"}], "}"}]}], "]"}], 
             "]"}]}], ")"}], "\[Equal]", 
          RowBox[{"(", 
           RowBox[{"acl", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"CoefficientList", "[", 
              RowBox[{"theProd", ",", 
               RowBox[{"{", 
                RowBox[{
                "\"\<qq\>\"", ",", "\"\<ru\>\"", ",", "\"\<uu$Shock\>\""}], 
                "}"}]}], "]"}], "]"}]}], ")"}]}], "]"}], "/.", 
        RowBox[{"zero", "\[Rule]", "0"}]}], ",", 
       RowBox[{"Flatten", "[", "qkArray", "]"}]}], "]"}], "]"}]}]}], ";", 
  RowBox[{"lucaMatSymb", "=", 
   RowBox[{"goodQkArray", "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2"}], "}"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.617618191091383*^9, 3.6176182619961014`*^9}, {
   3.617618332971815*^9, 3.6176183804022894`*^9}, {3.61761842843277*^9, 
   3.6176185124736104`*^9}, 3.617618623214718*^9, {3.6176246250167437`*^9, 
   3.6176246317668114`*^9}, {3.6176246770072637`*^9, 3.6176247573890676`*^9}, 
   3.617895950299513*^9, 3.6179006239644322`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lucaMat", "=", 
  RowBox[{
   RowBox[{"lucaMatSymb", "//.", "lucaSubs"}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.617627763020282*^9, 3.617627766890321*^9}, {
   3.617627799922654*^9, 3.6176278399040537`*^9}, {3.6176278824864836`*^9, 
   3.6176281084647675`*^9}, {3.6177381889885225`*^9, 
   3.6177381911185436`*^9}, {3.6177383746603785`*^9, 3.617738413470767*^9}, {
   3.6177385310319424`*^9, 3.6177386394130263`*^9}, {3.6177959800565042`*^9, 
   3.6177959979666834`*^9}, {3.617797284849552*^9, 3.6177972872395763`*^9}, {
   3.6178012830255404`*^9, 3.617801310705817*^9}, {3.6178068828165636`*^9, 
   3.6178069017467527`*^9}, 3.617807018587921*^9, {3.6178943096991043`*^9, 
   3.6178943124091315`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.`", ",", "0.13387113268194584`", ",", "0.04938370437445493`", ",", 
     "0.`", ",", "0.059994568933253896`", ",", "0.`", ",", "0.`", ",", 
     "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.`", ",", "0.`", ",", "0.08`", ",", "0.`", ",", "0.09718925656664626`", 
     ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.`", ",", "0.13387113268194584`", ",", "0.04938370437445493`", ",", 
     "0.`", ",", "0.059994568933253896`", ",", "0.`", ",", "0.`", ",", 
     "0.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478596419687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"bmat", ",", "phimat"}], "}"}], "//.", "lucaSubs"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.617802364651374*^9, 3.6178023718714466`*^9}, 
   3.6178943142791505`*^9, {3.6178945883238907`*^9, 3.617894594113949*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.2677422653638917`", ",", "0.`", ",", "0.30864815234034326`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{
      "0.2677422653638917`", ",", "0.`", ",", "0.30864815234034326`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.`", ",", "0.5`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5354845307277833`", ",", 
       RowBox[{"-", "0.5354845307277833`"}], ",", "0.6172963046806865`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.5354845307277833`", ",", "0.4645154692722171`", ",", 
       "0.6172963046806865`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.`", ",", "1.`"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.618047859751969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "the", " ", "matrix", " ", "should", " ", "have", " ", "a", " ", "row", 
    " ", "for", " ", "each", " ", "state", " ", "variable", " ", "and", " ", 
    "each", " ", "shock"}], "*)"}], 
  RowBox[{"(*", 
   RowBox[{
   "the", " ", "matrix", " ", "should", " ", "have", " ", "a", " ", "column", 
    " ", "for", " ", "each", " ", "basis", " ", "polynomial"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"lucaMat", "=", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "8"}], "}"}]}], "]"}]}], ";", 
    RowBox[{"lucaMat", "=", 
     RowBox[{
      RowBox[{"ReplacePart", "[", 
       RowBox[{"lucaMat", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", "0.292289"}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "rho$ru"}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", "0.299289"}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "5"}], "}"}], "\[Rule]", 
           RowBox[{"-", ".53"}]}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"3", ",", "5"}], "}"}], "\[Rule]", 
           RowBox[{"-", "53"}]}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2", ",", "5"}], "}"}], "\[Rule]", 
           RowBox[{"-", "1"}]}]}], "}"}]}], "]"}], "//.", "lucaSubs"}]}]}], 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{"lucaBasis", "[", 
    RowBox[{"setAllWeights", "[", 
     RowBox[{"lucaMat", "+", 
      RowBox[{"Array", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"200", 
          RowBox[{"Random", "[", "]"}]}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "8"}], "}"}]}], "]"}]}], "]"}], "]"}], "\n", 
   RowBox[{
    RowBox[{"simp", "=", 
     RowBox[{
     "JavaNew", "[", 
      "\"\<gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy\>\"\
", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"res1$1$1", "=", 
     RowBox[{"ComputeInitialCollocationWeights", "[", 
      RowBox[{"lucaBasis", ",", "lucaMat", ",", "modEqns", ",", "simp"}], 
      "]"}]}], ";", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"res1$1$1", "[", 
       RowBox[{"isConvergedQ", "[", "]"}], "]"}], ",", "\n", 
      RowBox[{"polys1$1$1", "=", 
       RowBox[{
        RowBox[{"genPolys", "[", 
         RowBox[{
          RowBox[{"res1$1$1", "[", 
           RowBox[{"getTheWeightedStochasticBasis", "[", "]"}], "]"}], ",", 
          RowBox[{"res1$1$1", "[", 
           RowBox[{"getResWeights", "[", "]"}], "]"}]}], "]"}], "//", 
        "Chop"}]}], 
      RowBox[{"(*", 
       RowBox[{
       "Chop", " ", "drops", " ", "very", " ", "small", " ", "terms"}], 
       "*)"}], ",", 
      "\"\<ComputeInitialCollocationWeights did not converge\>\""}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6176156469769397`*^9, 3.6176156523569937`*^9}, 
   3.617617055755028*^9, {3.617619353515021*^9, 3.6176194404058895`*^9}, {
   3.6176195132566185`*^9, 3.617619518896675*^9}, 3.6176195724572105`*^9, 
   3.61761967341922*^9, {3.6176199544320297`*^9, 3.617619974732233*^9}, {
   3.617628132645009*^9, 3.6176281388650713`*^9}, {3.6176283671223745`*^9, 
   3.617628398636697*^9}, {3.617707678452851*^9, 3.617707683832905*^9}, {
   3.617810028308057*^9, 3.61781003865816*^9}, {3.6178946311343193`*^9, 
   3.617894656424572*^9}, {3.6178947445854535`*^9, 3.617894751975528*^9}, {
   3.6178948219762278`*^9, 3.617894830366311*^9}, {3.617895719505203*^9, 
   3.617895722175229*^9}, {3.6179020634008284`*^9, 3.6179021033412275`*^9}, {
   3.617902153351728*^9, 3.617902177271967*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"0.2677422653638917`", " ", "\<\"qq\"\>"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "\<\"uu$Shock\"\>"}]}], ",", 
   RowBox[{
    RowBox[{"0.5`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"1.`", " ", "\<\"uu$Shock\"\>"}]}], ",", 
   RowBox[{
    RowBox[{"0.2677422653638917`", " ", "\<\"qq\"\>"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "\<\"uu$Shock\"\>"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.618047861231969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ushk", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<uu$Shock\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", 
     RowBox[{"-", "1"}]}], ",", " ", "lucaBasis", ",", "lucaMat"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, 3.617539650968808*^9, {
   3.617539771520014*^9, 3.617539771530014*^9}, {3.6175447381456804`*^9, 
   3.6175447847461467`*^9}, {3.6176152216606865`*^9, 3.617615223130701*^9}, {
   3.617729256863103*^9, 3.6177292659831944`*^9}, {3.6178125174749517`*^9, 
   3.6178125207149844`*^9}, 3.617897909905138*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.06872318237675475`", "}"}], ",", 
   RowBox[{"{", "0.06872318237675475`", "}"}], ",", 
   RowBox[{"{", "0.06872318237675475`", "}"}], ",", 
   RowBox[{"{", "0.06872318237675475`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.06872318237675475`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.06872318237675475`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.06872318237675475`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.06872318237675475`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478620519686`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<uu$Shock\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", 
     RowBox[{"-", "1"}]}], ",", " ", "lucaBasis", ",", " ", "lucaMat"}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.6175390631259155`*^9}, 3.6175396509788084`*^9, {3.617539771530014*^9, 
   3.617539771530014*^9}, 3.617726982672346*^9, {3.6178125554353313`*^9, 
   3.6178125576453533`*^9}, 3.617897982661892*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qtm1", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<qq\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", 
     RowBox[{"-", "1"}]}], ",", " ", "lucaBasis", ",", " ", "lucaMat"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539015086396*^9}, 3.617539651018809*^9, {3.6175397808301067`*^9, 
   3.6175397808301067`*^9}, {3.617703168939221*^9, 3.617703170609154*^9}, {
   3.6177251642891626`*^9, 3.617725171869238*^9}, 3.617897983211898*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.35355339059327373`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.35355339059327373`"}], "}"}], ",", 
   RowBox[{"{", "0.35355339059327373`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.35355339059327373`"}], "}"}], ",", 
   RowBox[{"{", "0.35355339059327373`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.35355339059327373`"}], "}"}], ",", 
   RowBox[{"{", "0.35355339059327373`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.35355339059327373`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478621419687`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<qq\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", 
     RowBox[{"-", "1"}]}], ",", " ", "lucaBasis", ",", " ", "lucaMat"}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.617539084265704*^9}, 3.6175396510288086`*^9, {3.6175397808301067`*^9, 
   3.6175397808301067`*^9}, {3.6177251761492805`*^9, 3.6177251785693054`*^9}, 
   3.617726984322363*^9, {3.6178134560223618`*^9, 3.6178134697124987`*^9}, 
   3.6178979837519026`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qt", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<qq\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "0"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539028196265*^9}, 3.617539651048809*^9, {3.617539780840107*^9, 
   3.617539780840107*^9}, {3.617725218189701*^9, 3.61772522000972*^9}, {
   3.6178134784125853`*^9, 3.6178134801226025`*^9}, 3.617897986241928*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.1720033044948844`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.017319066954171472`"}], "}"}], ",", 
   RowBox[{"{", "0.1021642000083067`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.08715817144074917`"}], "}"}], ",", 
   RowBox[{"{", "0.0871581714407492`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.10216420000830667`"}], "}"}], ",", 
   RowBox[{"{", "0.017319066954171493`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.17200330449488438`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047862211969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<qq\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "0"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.6175391040075073`*^9}, 3.6175396510588093`*^9, {3.617539780840107*^9, 
   3.617539780840107*^9}, {3.6177252370898905`*^9, 3.6177252404999247`*^9}, 
   3.61772699007242*^9, 3.6178979869219346`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"qtp1", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<qq\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "1"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539035536192*^9}, 3.6175396510688095`*^9, {3.617539780840107*^9, 
   3.617539780840107*^9}, {3.6177252488600082`*^9, 3.6177252514100337`*^9}, {
   3.6178134902427034`*^9, 3.6178134918127193`*^9}, 3.617897987691942*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.08472361378071384`", "}"}], ",", 
   RowBox[{"{", "0.03403401316487946`", "}"}], ",", 
   RowBox[{"{", "0.031105181491203136`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.019584419124631255`"}], "}"}], ",", 
   RowBox[{"{", "0.019584419124631273`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.03110518149120312`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.034034013164879424`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.08472361378071382`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478624319687`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<qq\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "1"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.617539114197405*^9}, 3.6175396510788097`*^9, {3.617539780840107*^9, 
   3.617539780850107*^9}, {3.617725260960129*^9, 3.617725262840148*^9}, 
   3.6177269918424377`*^9, 3.6178979883419485`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rutm1", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<ru\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", 
     RowBox[{"-", "1"}]}], ",", " ", "lucaBasis", ",", " ", "lucaMat"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539015086396*^9}, 3.6175392088874583`*^9, 3.6175394582869225`*^9, 
   3.6175396510988097`*^9, {3.617539859260891*^9, 3.617539859260891*^9}, {
   3.6177106269615965`*^9, 3.617710632491652*^9}, {3.6177252781303005`*^9, 
   3.617725279760317*^9}, 3.617897989161957*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.11313708498984762`", "}"}], ",", 
   RowBox[{"{", "0.11313708498984762`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.11313708498984759`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.11313708498984759`"}], "}"}], ",", 
   RowBox[{"{", "0.11313708498984762`", "}"}], ",", 
   RowBox[{"{", "0.11313708498984762`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.11313708498984759`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.11313708498984759`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047862501969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<ru\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", 
     RowBox[{"-", "1"}]}], ",", " ", "lucaBasis", ",", " ", "lucaMat"}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.617539084265704*^9}, 3.617539208947458*^9, 3.617539467326923*^9, 
   3.6175396511088095`*^9, {3.617539859260891*^9, 3.617539859260891*^9}, 
   3.617725307870598*^9, 3.6177269974024935`*^9, {3.617813504982851*^9, 
   3.617813510372905*^9}, 3.6178138325861273`*^9, 3.617897990611972*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rut", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<ru\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "0"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539028196265*^9}, 3.6175392097874494`*^9, 3.617539479096923*^9, 
   3.61753965114881*^9, {3.617539859260891*^9, 3.617539859260891*^9}, 
   3.6177253085806055`*^9, 3.617813838136183*^9, 3.617897991391979*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.12529172487167858`", "}"}], ",", 
   RowBox[{"{", "0.12529172487167858`", "}"}], ",", 
   RowBox[{"{", "0.012154639881830978`", "}"}], ",", 
   RowBox[{"{", "0.012154639881830978`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.01215463988183095`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.01215463988183095`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.12529172487167856`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.12529172487167856`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047862581969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<ru\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "0"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.6175391040075073`*^9}, 3.617539210287444*^9, 3.6175394824969225`*^9, 
   3.61753965114881*^9, {3.617539859270891*^9, 3.617539859270891*^9}, 
   3.617725310980629*^9, 3.617726995772477*^9, 3.6178979921219864`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rutp1", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<ru\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "1"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539035536192*^9}, 3.617539210797439*^9, 3.6175394837869225`*^9, 
   3.61753965115881*^9, {3.617539859270891*^9, 3.617539859270891*^9}, 
   3.6177253135206547`*^9, {3.6178135164529657`*^9, 3.617813518572987*^9}, 
   3.6178979926919923`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.06264586243583929`", "}"}], ",", 
   RowBox[{"{", "0.06264586243583929`", "}"}], ",", 
   RowBox[{"{", "0.00607731994091548`", "}"}], ",", 
   RowBox[{"{", "0.00607731994091548`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.006077319940915471`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.006077319940915471`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.06264586243583928`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.06264586243583928`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478626619687`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<ru\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "1"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.617539114197405*^9}, 3.617539211427433*^9, 3.6175394860369225`*^9, 
   3.61753965115881*^9, {3.617539859270891*^9, 3.617539859270891*^9}, 
   3.617725316300682*^9, 3.617727031702837*^9, 3.617897993301998*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rrt", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<rr\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "0"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539028196265*^9}, 3.6175392097874494`*^9, 3.6175396511888103`*^9, {
   3.617539859270891*^9, 3.6175398592808914`*^9}, 3.617725318670706*^9, {
   3.617813531043112*^9, 3.6178135320331216`*^9}, 3.6178979939920053`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.1720033044948844`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.017319066954171472`"}], "}"}], ",", 
   RowBox[{"{", "0.1021642000083067`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.08715817144074917`"}], "}"}], ",", 
   RowBox[{"{", "0.0871581714407492`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.10216420000830667`"}], "}"}], ",", 
   RowBox[{"{", "0.017319066954171493`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.17200330449488438`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047862961969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<rr\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "0"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.6175391040075073`*^9}, 3.617539210287444*^9, 3.6175396511888103`*^9, {
   3.6175398592808914`*^9, 3.6175398592808914`*^9}, 3.6177253196207156`*^9, 
   3.6177270480029993`*^9, 3.6178979946020117`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rrtp1", "=", 
  RowBox[{"doVal", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<rr\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "1"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.6175390136164107`*^9, 
   3.617539035536192*^9}, 3.617539210797439*^9, 3.6175396511988106`*^9, {
   3.6175398592808914`*^9, 3.6175398592808914`*^9}, 3.617725320590725*^9, {
   3.6178135365931673`*^9, 3.617813538953191*^9}, 3.617897995162017*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.08472361378071384`", "}"}], ",", 
   RowBox[{"{", "0.03403401316487946`", "}"}], ",", 
   RowBox[{"{", "0.031105181491203136`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.019584419124631255`"}], "}"}], ",", 
   RowBox[{"{", "0.019584419124631273`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.03110518149120312`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.034034013164879424`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.08472361378071382`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478630519686`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"doDrv", "[", 
   RowBox[{
    RowBox[{"varName", " ", "=", " ", "\"\<rr\>\""}], ",", " ", 
    RowBox[{"vTime", " ", "=", " ", "1"}], ",", " ", "lucaBasis", ",", " ", 
    "lucaMat"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6175386002183003`*^9, 3.617538610908407*^9}, {
   3.617538753175294*^9, 3.617538777744311*^9}, {3.617539062035927*^9, 
   3.617539114197405*^9}, 3.617539211427433*^9, 3.617539651208811*^9, {
   3.6175398592808914`*^9, 3.6175398592808914`*^9}, 3.617725322270742*^9, 
   3.617727051953039*^9, 3.6178979958220234`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"res2$2$1", "=", 
   RowBox[{"res1$1$1", "[", 
    RowBox[{"incOrder", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}], "]"}], "]"}]}], ";", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"res2$2$1", "[", 
     RowBox[{"isConvergedQ", "[", "]"}], "]"}], ",", "\n", 
    RowBox[{"polys1$1$1", "=", 
     RowBox[{
      RowBox[{"genPolys", "[", 
       RowBox[{
        RowBox[{"res2$2$1", "[", 
         RowBox[{"getTheWeightedStochasticBasis", "[", "]"}], "]"}], ",", 
        RowBox[{"res2$2$1", "[", 
         RowBox[{"getResWeights", "[", "]"}], "]"}]}], "]"}], "//", 
      "Chop"}]}], 
    RowBox[{"(*", 
     RowBox[{"Chop", " ", "drops", " ", "very", " ", "small", " ", "terms"}], 
     "*)"}], ",", 
    "\"\<ComputeInitialCollocationWeights did not converge\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6178983489355545`*^9, 3.617898453166597*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"0.2677422653638917`", " ", "\<\"qq\"\>"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "\<\"uu$Shock\"\>"}]}], ",", 
   RowBox[{
    RowBox[{"0.5`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"1.`", " ", "\<\"uu$Shock\"\>"}]}], ",", 
   RowBox[{
    RowBox[{"0.2677422653638917`", " ", "\<\"qq\"\>"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "\<\"uu$Shock\"\>"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6180478633719687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"res3$3$1", "=", 
   RowBox[{"res2$2$1", "[", 
    RowBox[{"toOrder", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3", ",", "1"}], "}"}], "]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"res3$3$1", "[", 
      RowBox[{"isConvergedQ", "[", "]"}], "]"}], ",", "\n", 
     RowBox[{"polys3$3$1", "=", 
      RowBox[{"genPolys", "[", 
       RowBox[{
        RowBox[{"res3$3$1", "[", 
         RowBox[{"getTheWeightedStochasticBasis", "[", "]"}], "]"}], ",", 
        RowBox[{"res3$3$1", "[", 
         RowBox[{"getResWeights", "[", "]"}], "]"}]}], "]"}]}]}], "]"}], "//",
    "Chop"}]}]], "Input",
 CellChangeTimes->{{3.6178984797068624`*^9, 3.6178985654777203`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"0.2677422653638917`", " ", "\<\"qq\"\>"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "\<\"uu$Shock\"\>"}]}], ",", 
   RowBox[{
    RowBox[{"0.5`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"1.`", " ", "\<\"uu$Shock\"\>"}]}], ",", 
   RowBox[{
    RowBox[{"0.2677422653638917`", " ", "\<\"qq\"\>"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "\<\"ru\"\>"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "\<\"uu$Shock\"\>"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6180478638919687`*^9}]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " command, GenerateModelCode, outputs lists of state variables, non-state \
variables and shocks along with an instance of the class associated with the \
model."
}], "Text",
 CellChangeTimes->{3.6175329697524137`*^9, 3.617900660424797*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oldBetap", "=", 
  RowBox[{"modEqns", "[", 
   RowBox[{"get$betap", "[", "]"}], "]"}]}]], "Input"],

Cell[BoxData["0.99`"], "Output",
 CellChangeTimes->{3.618047863941969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"modEqns", "[", 
  RowBox[{"set$betap", "[", ".5", "]"}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"modEqns", "[", 
  RowBox[{"get$betap", "[", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"modEqns", "[", 
  RowBox[{"set$betap", "[", "oldBetap", "]"}], "]"}]}], "Input"],

Cell[BoxData["0.5`"], "Output",
 CellChangeTimes->{3.618047863981969*^9}]
}, Open  ]],

Cell["\<\
One can also get and update (should be \[OpenCurlyDoubleQuote]set\
\[CloseCurlyDoubleQuote], but it isn\[CloseCurlyQuote]t yet) all the model \
parameters simultaneously \
\>", "Text",
 CellChangeTimes->{{3.617531730237169*^9, 3.617531790921002*^9}, {
  3.6175318473302345`*^9, 3.6175318776722345`*^9}, {3.6179006868050604`*^9, 
  3.6179006931551237`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"theOldParams", "=", 
  RowBox[{"modEqns", "[", 
   RowBox[{"getParams", "[", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"modEqns", "[", 
  RowBox[{"updateParams", "[", "theOldParams", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6175318845050344`*^9, 3.6175319564834347`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.99`", ",", "1.`", ",", "0.5`", ",", "0.5`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.618047864001969*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"theStatePoly", "=", 
   RowBox[{"lucaBasis", "[", 
    RowBox[{"getTheState", "[", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6175336874341993`*^9, 3.617533734673255*^9}}],

Cell["The polynomial ranges", "Item",
 CellChangeTimes->{{3.6175338258124323`*^9, 3.6175338467320137`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theStatePoly", "[", 
  RowBox[{"getRanges", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6175338503719406`*^9, 3.617533864641788*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16`"}], ",", "0.16`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.09718925656664625`"}], ",", "0.09718925656664625`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047864031969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theStatePoly", "[", 
  RowBox[{"getOrders", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6175338503719406`*^9, 3.617533864641788*^9}, {
  3.617533906331788*^9, 3.617533915991788*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.6180478640519686`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getPhiFunc", "[", 
    RowBox[{"#", ",", "lucaBasis"}], "]"}], "&"}], "/@", " ", 
  RowBox[{"theStatePoly", "[", 
   RowBox[{"getStateVariableNames", "[", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6175341379817877`*^9, 3.6175341887334027`*^9}, {
  3.6176184695331807`*^9, 3.617618470953195*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"2.`", " ", "\<\"qq\"\>"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"6.25`", " ", "\<\"ru\"\>"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"10.289203100491495`", " ", "\<\"uu$Shock\"\>"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.618047864251969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"Join", " ", "@@", 
   RowBox[{"{", 
    RowBox[{"(*", 
     RowBox[{"lucaMat", ","}], "*)"}], 
    RowBox[{"Transpose", "[", 
     RowBox[{"theStatePoly", "[", 
      RowBox[{
       RowBox[{"getTheGrid", "[", "]"}], "[", 
       RowBox[{"generatePolyOrdersForOuterProduct", "[", "]"}], "]"}], "]"}], 
     "]"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6176160776422462`*^9, 3.6176161235027046`*^9}, {
   3.617616246203932*^9, 3.6176163025654955`*^9}, {3.617619782800314*^9, 
   3.617619787320359*^9}, 3.61789905024457*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {"0", "1", "0", "1", "0", "1", "0", "1"},
    {"0", "0", "1", "1", "0", "0", "1", "1"},
    {"0", "0", "0", "0", "1", "1", "1", "1"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.618047864311969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theStatePoly", "[", 
  RowBox[{"getTheGrid", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{3.617626649969055*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\[LeftGuillemet]", 
   RowBox[{"JavaObject", "[", 
    RowBox[{
    "gov", ".", "frb", ".", "ma", ".", "msu", ".", 
     "ProjectionMethodToolsJava", ".", "GridPointsSpec"}], "]"}], 
   "\[RightGuillemet]"}],
  JLink`Objects`vm3`JavaObject25250692486660097]], "Output",
 CellChangeTimes->{3.6180478643819685`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theStatePoly", "[", 
  RowBox[{"getStateVariableNames", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6175357853313556`*^9, 3.617535796611356*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"qq\"\>", ",", "\<\"ru\"\>", ",", "\<\"uu$Shock\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6180478645919685`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"doExportOrderedOuter", "[", "lucaBasis", "]"}]], "Input",
 CellChangeTimes->{{3.617534500160631*^9, 3.6175345117608633`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"2.`", " ", "\<\"qq\"\>"}], ",", 
   RowBox[{"6.25`", " ", "\<\"ru\"\>"}], ",", 
   RowBox[{"12.5`", " ", "\<\"qq\"\>", " ", "\<\"ru\"\>"}], ",", 
   RowBox[{"10.289203100491495`", " ", "\<\"uu$Shock\"\>"}], ",", 
   RowBox[{"20.57840620098299`", " ", "\<\"qq\"\>", " ", "\<\"uu$Shock\"\>"}],
    ",", 
   RowBox[{"64.30751937807185`", " ", "\<\"ru\"\>", " ", "\<\"uu$Shock\"\>"}],
    ",", 
   RowBox[{
   "128.6150387561437`", " ", "\<\"qq\"\>", " ", "\<\"ru\"\>", 
    " ", "\<\"uu$Shock\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047864981969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theStatePoly", "[", 
  RowBox[{"getXformedChebNodePts", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6175345957204895`*^9, 3.6175345996202946`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.35355339059327373`", ",", "0.11313708498984762`", ",", 
     "0.06872318237675475`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.35355339059327373`"}], ",", "0.11313708498984762`", ",", 
     "0.06872318237675475`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.35355339059327373`", ",", 
     RowBox[{"-", "0.11313708498984759`"}], ",", "0.06872318237675475`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.35355339059327373`"}], ",", 
     RowBox[{"-", "0.11313708498984759`"}], ",", "0.06872318237675475`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.35355339059327373`", ",", "0.11313708498984762`", ",", 
     RowBox[{"-", "0.06872318237675475`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.35355339059327373`"}], ",", "0.11313708498984762`", ",", 
     RowBox[{"-", "0.06872318237675475`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.35355339059327373`", ",", 
     RowBox[{"-", "0.11313708498984759`"}], ",", 
     RowBox[{"-", "0.06872318237675475`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.35355339059327373`"}], ",", 
     RowBox[{"-", "0.11313708498984759`"}], ",", 
     RowBox[{"-", "0.06872318237675475`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047865001969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"bmat", " ", ".", 
    RowBox[{"Transpose", "[", 
     RowBox[{"theStatePoly", "[", 
      RowBox[{"getXformedChebNodePts", "[", "]"}], "]"}], "]"}]}], "//.", 
   "lucaSubs"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.6177966373630776`*^9, 3.6177966786634903`*^9}, 
   3.617796709883803*^9, {3.6177967757344613`*^9, 3.617796776974474*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.11587246898806172`", ",", 
     RowBox[{"-", "0.07344990246099414`"}], ",", "0.11587246898806172`", ",", 
     RowBox[{"-", "0.07344990246099414`"}], ",", "0.07344990246099414`", ",", 
     RowBox[{"-", "0.11587246898806172`"}], ",", "0.07344990246099414`", ",", 
     RowBox[{"-", "0.11587246898806172`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.11587246898806172`", ",", 
     RowBox[{"-", "0.07344990246099414`"}], ",", "0.11587246898806172`", ",", 
     RowBox[{"-", "0.07344990246099414`"}], ",", "0.07344990246099414`", ",", 
     RowBox[{"-", "0.11587246898806172`"}], ",", "0.07344990246099414`", ",", 
     RowBox[{"-", "0.11587246898806172`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.03436159118837737`", ",", "0.03436159118837737`", ",", 
     "0.03436159118837737`", ",", "0.03436159118837737`", ",", 
     RowBox[{"-", "0.03436159118837737`"}], ",", 
     RowBox[{"-", "0.03436159118837737`"}], ",", 
     RowBox[{"-", "0.03436159118837737`"}], ",", 
     RowBox[{"-", "0.03436159118837737`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047865071969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"doExportOuterEval", "[", "lucaBasis", "]"}]], "Input",
 CellChangeTimes->{{3.6175346707167397`*^9, 3.617534680446253*^9}, {
  3.617534729073821*^9, 3.617534736143468*^9}, {3.617535094504675*^9, 
  3.6175350948646708`*^9}, {3.6175364743190355`*^9, 3.6175364745190372`*^9}, {
  3.6175365680499725`*^9, 3.6175365685399776`*^9}, {3.6175366308609433`*^9, 
  3.6175366319509106`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.`", ",", "0.7071067811865475`", ",", "0.7071067811865476`", ",", 
     "0.5`", ",", "0.7071067811865474`", ",", "0.49999999999999983`", ",", 
     "0.49999999999999994`", ",", "0.35355339059327373`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", "0.7071067811865476`", ",", 
     RowBox[{"-", "0.5`"}], ",", "0.7071067811865474`", ",", 
     RowBox[{"-", "0.49999999999999983`"}], ",", "0.49999999999999994`", ",", 
     RowBox[{"-", "0.35355339059327373`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.7071067811865475`", ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", 
     RowBox[{"-", "0.4999999999999999`"}], ",", "0.7071067811865474`", ",", 
     "0.49999999999999983`", ",", 
     RowBox[{"-", "0.49999999999999983`"}], ",", 
     RowBox[{"-", "0.3535533905932736`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", "0.4999999999999999`", ",", 
     "0.7071067811865474`", ",", 
     RowBox[{"-", "0.49999999999999983`"}], ",", 
     RowBox[{"-", "0.49999999999999983`"}], ",", "0.3535533905932736`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.`", ",", "0.7071067811865475`", ",", "0.7071067811865476`", ",", 
     "0.5`", ",", 
     RowBox[{"-", "0.7071067811865474`"}], ",", 
     RowBox[{"-", "0.49999999999999983`"}], ",", 
     RowBox[{"-", "0.49999999999999994`"}], ",", 
     RowBox[{"-", "0.35355339059327373`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", "0.7071067811865476`", ",", 
     RowBox[{"-", "0.5`"}], ",", 
     RowBox[{"-", "0.7071067811865474`"}], ",", "0.49999999999999983`", ",", 
     RowBox[{"-", "0.49999999999999994`"}], ",", "0.35355339059327373`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.7071067811865475`", ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", 
     RowBox[{"-", "0.4999999999999999`"}], ",", 
     RowBox[{"-", "0.7071067811865474`"}], ",", 
     RowBox[{"-", "0.49999999999999983`"}], ",", "0.49999999999999983`", ",", 
     "0.3535533905932736`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", 
     RowBox[{"-", "0.7071067811865475`"}], ",", "0.4999999999999999`", ",", 
     RowBox[{"-", "0.7071067811865474`"}], ",", "0.49999999999999983`", ",", 
     "0.49999999999999983`", ",", 
     RowBox[{"-", "0.3535533905932736`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478656419687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"bmat", " ", ".", "lucaMat", ".", 
    RowBox[{"Transpose", "[", 
     RowBox[{"doExportOuterEval", "[", "lucaBasis", "]"}], "]"}]}], "//.", 
   "lucaSubs"}], " ", "//", "N"}]], "Input",
 CellChangeTimes->{{3.617796291899623*^9, 3.6177962958796625`*^9}, {
   3.6177963821205254`*^9, 3.617796409490799*^9}, 3.617898737399439*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.09914105652431512`", ",", 
     RowBox[{"-", "0.009982544235962516`"}], ",", "0.05888646591720689`", ",", 
     RowBox[{"-", "0.05023713484307075`"}], ",", "0.05023713484307075`", ",", 
     RowBox[{"-", "0.05888646591720689`"}], ",", "0.009982544235962516`", ",", 
     RowBox[{"-", "0.09914105652431512`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.09914105652431512`", ",", 
     RowBox[{"-", "0.009982544235962516`"}], ",", "0.05888646591720689`", ",", 
     RowBox[{"-", "0.05023713484307075`"}], ",", "0.05023713484307075`", ",", 
     RowBox[{"-", "0.05888646591720689`"}], ",", "0.009982544235962516`", ",", 
     RowBox[{"-", "0.09914105652431512`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.08600165224744219`", ",", 
     RowBox[{"-", "0.008659533477085743`"}], ",", "0.051082100004153336`", 
     ",", 
     RowBox[{"-", "0.0435790857203746`"}], ",", "0.0435790857203746`", ",", 
     RowBox[{"-", "0.051082100004153336`"}], ",", "0.008659533477085743`", 
     ",", 
     RowBox[{"-", "0.08600165224744219`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478662619686`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"theStatePoly", "[", 
    RowBox[{"getStateVariablePolynomialWeights", "[", "]"}], "]"}], "[", 
   RowBox[{"getArray", "[", "]"}], "]"}], "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.6175382216625147`*^9, 3.6175382283435817`*^9}, {
  3.6178987697897635`*^9, 3.6178987712997785`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0.13387113268194584`", ",", "0.04938370437445493`", ",", "0", 
     ",", "0.059994568933253896`", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0.08`", ",", "0", ",", "0.09718925656664626`", ",", 
     "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.618047866291969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"lucaBasis", "[", 
     RowBox[{"getTheNonState", "[", "]"}], "]"}], "[", 
    RowBox[{"getRelevantWeightsNSP", "[", "]"}], "]"}], "[", 
   RowBox[{"getArray", "[", "]"}], "]"}], "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.6175383075943737`*^9, 3.617538338314681*^9}, {
  3.6178987739598045`*^9, 3.6178987756698217`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
   "0", ",", "0.13387113268194584`", ",", "0", ",", "0", ",", 
    "0.04938370437445493`", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
    ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
    "0.059994568933253896`", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
     ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
    ",", "0", ",", "0", ",", "0"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.618047866321969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"sysVal", "=", 
   RowBox[{"modEqns", "[", 
    RowBox[{"updateValDrv", "[", "lucaBasis", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"sysVal", "[", 
     RowBox[{"getTheVal", "[", "]"}], "]"}], "[", 
    RowBox[{"getArray", "[", "]"}], "]"}], "//", "Chop"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"sysVal", "[", 
     RowBox[{"getTheJac", "[", "]"}], "]"}], "[", 
    RowBox[{"getArray", "[", "]"}], "]"}], "//", "Chop"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6175400669839687`*^9, 3.6175402734860334`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Java", "::", "excptn"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"A Java exception occurred: \
\[NoBreak]\\!\\(\\\"java.lang.ArrayIndexOutOfBoundsException: Submatrix \
indices\\\\n\\\\tat Jama.Matrix.getMatrix(Matrix.java:297)\\\\n\\\\tat \
gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateCurrentVarTime.doValSwitch(\
NonStateCurrentVarTime.java:62)\\\\n\\\\tat \
gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime.evalVarNonState(\
NonStateVarTime.java:40)\\\\n\\\\tat \
gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime.evalVar(\
NonStateVarTime.java:26)\\\\n\\\\tat \
lucaMod.updateValDrv(lucaMod.java:60)\\\"\\)\[NoBreak].\"\>"}]], "Message", \
"MSG",
 CellChangeTimes->{3.6180478671219687`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"$Failed", "[", 
    RowBox[{"getTheVal", "[", "]"}], "]"}], "[", 
   RowBox[{"getArray", "[", "]"}], "]"}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6180478672219687`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"$Failed", "[", 
    RowBox[{"getTheJac", "[", "]"}], "]"}], "[", 
   RowBox[{"getArray", "[", "]"}], "]"}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6180478672219687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"biggerMat", "=", 
   RowBox[{"nxtWts", "[", 
    RowBox[{"lucaMat", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5", ",", "5"}], "}"}]}], "]"}]}], ";", 
  RowBox[{"Dimensions", "/@", 
   RowBox[{"{", 
    RowBox[{"lucaMat", ",", "biggerMat"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.617541767748976*^9, 3.6175418089993887`*^9}, 
   3.617541841180711*^9, {3.6175418807711067`*^9, 3.617541912431423*^9}, {
   3.6178990734148016`*^9, 3.6178990740148077`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "216"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478673919687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"thePolys", "=", 
   RowBox[{
    RowBox[{"CreatePolynomials", "[", "res2$2$1", "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<uu\>\"", "\[Rule]", "uu"}], ",", 
      RowBox[{"\"\<ru\>\"", "\[Rule]", "ru"}], ",", 
      RowBox[{"\"\<qq\>\"", "\[Rule]", "qq"}], ",", 
      RowBox[{"\"\<uu$Shock\>\"", "\[Rule]", "uu$Shock"}]}], "}"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.617541981702116*^9, 3.617542042812727*^9}, {
   3.6175424260875597`*^9, 3.6175424287675867`*^9}, 3.6175425928502274`*^9, {
   3.6175434803318834`*^9, 3.6175434896918836`*^9}, {3.6175435415218835`*^9, 
   3.6175435485918837`*^9}, {3.617899263634715*^9, 3.6178992952650313`*^9}, 
   3.617899529273444*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"before genPolys in createpolynomials 1\"\>"], "Print",
 CellChangeTimes->{3.6180478674119687`*^9}],

Cell[BoxData["\<\"before genPolys in createpolynomials\"\>"], "Print",
 CellChangeTimes->{3.618047867571969*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["thePolys"], "Input",
 CellChangeTimes->{{3.6178998659148397`*^9, 3.617899868424865*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.2677422653638917`", " ", "qq"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "ru"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "uu$Shock"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.5`", " ", "ru"}], "+", 
    RowBox[{"1.`", " ", "uu$Shock"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.2677422653638917`", " ", "qq"}], "+", 
    RowBox[{"0.3086481523403433`", " ", "ru"}], "+", 
    RowBox[{"0.6172963046806867`", " ", "uu$Shock"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.6180478676419687`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sysPolys", "=", 
    RowBox[{
     RowBox[{"ReplaceVariables", "[", 
      RowBox[{"lucaMod", ",", "thePolys", ",", 
       RowBox[{"{", 
        RowBox[{"stateVar", ",", "nonStateVar"}], "}"}]}], "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<uu\>\"", "\[Rule]", "uu"}], ",", 
       RowBox[{"\"\<ru\>\"", "\[Rule]", "ru"}], ",", 
       RowBox[{"\"\<qq\>\"", "\[Rule]", "qq"}], ",", 
       RowBox[{"\"\<uu$Shock\>\"", "\[Rule]", "uu$Shock"}]}], "}"}]}]}], 
   ";"}], ";"}]], "Input",
 CellChangeTimes->{{3.61754193613166*^9, 3.617541951251811*^9}, {
   3.617542440467704*^9, 3.617542442007719*^9}, {3.617542473358032*^9, 
   3.6175425266395655`*^9}, {3.617542563299932*^9, 3.6175425887401867`*^9}, 
   3.6178994558446503`*^9, {3.617899508525177*^9, 3.6178995206352987`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"forPlot", "=", 
   RowBox[{
    RowBox[{"sysPolys", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"eps", "[", "uu", "]"}], "[", "t", "]"}], "\[Rule]", "0"}], 
       ",", 
       RowBox[{"uu$Shock", "\[Rule]", ".00"}]}], "}"}]}], "//.", 
    "lucaSubs"}]}], ";", 
  RowBox[{"pltqq", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"qq", ",", "qLow", ",", "qHigh"}], "}"}], "//.", "lucaSubs"}]}], 
  ";", 
  RowBox[{"pltru", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ru", ",", "ruLow", ",", "ruHigh"}], "}"}], "//.", 
    "lucaSubs"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6175426017603164`*^9, 3.617542695701256*^9}, {
   3.617542772471463*^9, 3.617542823149943*^9}, {3.61754287391842*^9, 
   3.6175429243879056`*^9}, 3.6175430119152794`*^9, {3.617543223362234*^9, 
   3.617543228722181*^9}, {3.617543575931884*^9, 3.6175435781718836`*^9}, {
   3.6178999614757957`*^9, 3.617899961835799*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", " ", "@@", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"forPlot", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", "pltqq", ",", "pltru"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.6175429586968765`*^9, 3.617542990005937*^9}, {
  3.6175430349045897`*^9, 3.617543043804323*^9}, {3.6175430763137045`*^9, 
  3.6175431229432383`*^9}, {3.6175431860526075`*^9, 3.6175431867526007`*^9}, {
  3.6175433763308835`*^9, 3.6175433821908836`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyFnHuQVdWVxu/wEAQ0RA1m1AhmKMDRGtqICHr08Gyadzc00DxtmgbRkkqm
ZpIxitKilTB/pEYZKxGJ8TnG+GC07bSgRy62j8wkTkYbeeNrdGImsRCfExVl
zF7rW9v17Xtr+KfLz1X7rP07+66z93fO3me0fHvOyh6lUumC3qVSzy/+nvHy
zEePHn21vPnCWwa9ftUz5VL411ys+vuHN3WuOUB6U3F//xPb1hzYncQfuuu7
q4ZO7U70laGd35C+WuO7qujtiV7Sf5Wv255X1rsSXfOpEt+d6Npf0lvBJ4lX
njnnD87Nz5503X//6CnV642z11uNM8eDM+vgXDm+q4reTnqzcWYdnL3eZJxZ
B+fK8d055wPOfF1wZh2cq+jlaT/75p6d459MOLMOzl5vNc5et34lOjhX1tsT
HZy9HjlXaT/RwblyO91JPDhzPDhzPDhzPDi/9MipDx689LGkbng9jmevx/HM
7YAz6+BcWW9P2gdnr9t9ySvrXYkOzpXjuxMdnKvwSeLBmePBeVkY548k49nr
sT5zPDizDs6V47uq6O2JDs5V4nOv1xln1sG5Sv6kjzPOXo+cuR1w5nhwfjHw
/3kZ/QFnr9t1k3hw9nrk7HXjQHqjcfZ6jXHmfMC5st6V83XBuXI+3TnnD86s
g7PX43jmeHB+Pug/gZ6Bs9fHZeDs9ciZ2jHOXq8xzl6vM850XeNcuZ32vEr7
OecJztw+OHM8OHO/wJnbAWeOB2f57xsytA/OXo/PQY4HZ6+PM86V47tIN26k
DzHOpI8F5yrtJzo4V8mf9Fg3mAM4czw4c/vg/Jrw1/8fx7PX43jmeHD2uvUr
aQecOR6cvV5j+Xp9TAbOlfWunK8LzpWv251zv8CZ48GZ48GZ48H5gNSThLPX
I2eOB2eOB2fWwbmy3p7oyLdKfF6l/ZzzBOcq+ZMe6wbr4EzXtfFM7VvdWCHP
x4Qz6+Ds9WbjzPHgzDo4V9bbEx39qxKfV2k/0cHZ603GmXVw9vo48EnaB+cq
enmvzPeMGzh73a6b6ODs9cjZ643GmePBmXVwrhKfV9a7SI91g3VwrtLfRAdn
5gbOnA84z5L1S8LZ65Ezx4Mzx4Mz6+BcWW9PdHCuEp9XaT/RwblyfHeigzPr
4Oz1OJ6r6OUWWY8nnL0eOXM8OLMOzpXju6ro7cl1wblKfO711ca5Sj6JDs7c
Djh73eoq6a3GmePJr7P2ya+zfMivs/bJr0s4s05+XcKZdXCuEp9z/uTXmU5+
HcV351X6m+jk19l4IL/O4p8ZsW7Ygc6Xy9e27Z6+otfTOm+NPp7XSyWNz70e
fSpuh9rnOkb66ozaT3Sff73l733I+oLiLU+KT+qqv26p9N76312x5sAr5QHL
zj/nrnLkoHru9dUFxVv+FJ/M93w79WgnyR/tV8vft1+fUby1T/HJfa+WP/O/
5ow3i6NHo6/7F3+W21qKfSuveu7o0T103WWmez9zfnHe/QNfOHp0Z+KrQ2cf
9Zshz/+0+KPh3wrTOX5/uO6vEr8dOscPDe2Uk3joiP8sXHduMTzo/2rxgUPp
Ul33bSi83mzxlX3pDQXrp0p8Mh6gO/6lhcXpkmcSD5396j3CIYmHzvGDhXMS
D93n01iMkvvo49uWm474zwPPecVeGSe557bCdOazVsZhkg90jse4ZZ8c49Pr
y20cQu+h4xnjjf1kjCvWMX5Yx3iALuO5ycaD1y+x+w6d7zu3j/vo21li98u3
s8Tui49fZPyZAzhD/1zzB2fn97atMM7eB451ALq0s9A4s28MzqyDM/Se2i9w
hi79qjfOXl9gnNnHBmfWwZl1cGYdnP11I2fozNnziZzh98p9XGCcvQ88xziz
bwzOrIMz6+DMOjhX9s83FKyDs89/qnFm/xycoQu3GcYZek+NB2fon+t9B2fo
vXScgDP0T0N8g3GG3yvtZ8bZ+8BDjDP0I6GdicYZuvR3hnGGLs+XmcbZXzdy
9vHnGGfo0t/cOLN/Ds7Qhedk48z+OTj7+OnGmf1wcPb5NBhn6D103IIz/F6J
H5+Bs/eBh2TgDJ05Q5f7O8k4Q/8kxF9onKFLPrXGGbrwv9g4+/ga48z+OThD
7xv0gcYZuoy3c40z9GO0HXCG/nGIP984+/7OMM6+/fHGWfK7Ieup8eAMHfmD
M/Qjmic4Q0ee4Az9wxB/snH21z3bOEMXnqcZZ5/PqWPBGfpJ4e/hMeDs40sl
cGYdnH2eI40z9M/1dwHO0Jkz9H7hb2ac4ffyePY+8Awbz9BlnIzJwBm65pmB
M3ThPyoDZ+hvhfivZOAMXX6/8M83FF4/PwNn9s/B2cdflIEzdOEwIgNnn3+e
gTN0/Z1m4Az9Te0vOPv2Z9h6BH4vc/Y+cOQMXX/vxpl9bHBmHZxZB+fK/vmG
gnVwZh2cfb+mG2f2z8EZ+jHaDjizfw7O0IXzYBvP0LlusN8Lzl5fYpyhC+f5
xpnbAWfWwZl1cK7sn28oWAdn1sGZdXCGLuO80Tizfw7Ovr9zbDxD1+eUjWe+
LjjD75XrNhln9o3BGbrMK+YaZ99Og3F28W1zjDP7zOBc2T/fULAOzqyDM3Th
M8k4s38OztDleT3bODMHcIau6wjjDL13iF9mnOH3MmfvAy8zztCF82LjzD4z
OLMOzqyDc2X/fEPBOjizDs6sgzPr4Mw6OLMOztDxuwZn9s/BGX4vc/Y+cOTM
/jM4sw7OrIMzdF1PGWfOB5y9folx9voq4wxdxkOLceZ8wNm3s8I4+zxbjDN0
qcPzjDP08NxsazHO7BOSL6f6ioz8N9HblmfksyWcWSffzHTyx0wHZ9bJ70o4
s09O/pXp5FPpfWnNyI+y65LvZOMEPIePevb9G/74VFnyabV58jvue5C4vu78
6rB9T9/bpeuC+TZPhk8u897oF01+5wfbe7RAb7F58nHq00o7q6KP8fxbd4//
Ruo3ev8t+oQjNH/2i5C/6ItsPfKY5q/1zdYjnD94In/lafNk5A8fz55rV19f
nPBZ6r+tXvjmnQ1bt6veajz/d/TkH974d2Xl32g8J/ab23npyTtUn2s8+32/
55l9vgt9jvHsfuvRzfd277B1KHhumt96fG1N6sdOp+9CwXO/5s88ff7RF/L5
R/8N+SMePJE/+6LIn32hWyl/q7f/tPamU/9qa+LPv3fFy99b9MpW4w/O1027
eMmmTdvMpwXngSNuH7+38XHNf7Fxvr13afjJA59QfZFx/ps3mgfM/80TNv7B
udjx1Ls3/6Cw/oLzLvLHwLn1y/l/ibPPP3J2+X/Jf0P+7HP+jPIHZ59/5Pyk
5s/+29v6nlCfI8Z5bfi9PJr4nP3D7+JR4w/Ot4b605HUhzP/8uNPB4/+peqR
89aPFr6+7N1fJj5n7UuPP3fbg52J/3ZJFf8N7zll/TXdOCN/aX+WcUb+Os80
zj7/euM8QvNnzsif/bcpmj9zPhTu+33whYzzgHB/79d+jTHOfx3u4wMJ57rw
u34o8d9Whd/vFslzXYNxnhB+pw+XZd44zTi/EH6PDxsfcN7pfK1xxvmw5i/6
BON8nMs/+pxnufyj/4b80S9wXqn5s1+B/Hk8v6j5ox1w7h3yuRU+p80fJoTr
3pb4nONC+3ck/pv4qHcm/tvVYVzdbf0C51vC+LlH84z1uTOMk38xPw2cXyCf
DZz7af7SzreM8yTNv6/mD87IX8bDRPKT79T4Mcb5Kpd/9Dk3af7sCz2m+bPP
eWXI/1L19+psPD8c9H9IfM45IZ/ryuy//TrE/1DbGWecx4X+/sj4gPPi0M5N
mudE4/zjkP/NOs4z8t+u1HlbX/Pf7tD8xX8rGeetmj/7nI2af0n/gTPyL2n+
4HyR5s8+5xKXf+R8i+bP/tvPRc95PF8u7dh6E5wXyXXNJwHn/5I8VR+2DZyv
kH5ZPDi/LRzyATrewLlXe+CWn6x8wPmg+loyz4/+212av/j8o2w+vFrzP6Lx
4NxE+YMz8mf/7duav/AcZZz/oPkfr/cFnA/Jfc+Z83YZ54n/dof8LhL/bb38
jhL/rVV+d4nPWSu/08R/a5Dftfqcg23dMUjqgHI7x9Yd+5yflhvnQvOX59TF
xvl2zV/ipxnn6zR/0afaugP5gz84T9H82ees1/zZfztJ8z9R6oOtR3ZJ3U78
N+EDfZFxvkKeCxbv/YqHlM8U43yOPHdUn2ycJZ/7VZ9onD+S55rq42kd/Yjy
mW2cX9L8RZ9pnCdr/uxzIn+5L43kVzyk+lwbz9/S/KVuDDfOJ2r+7Cd/qPl/
Q8e/fScg8xBdPy4wzk/IvEV5zjfOZ8k8J/E5fyrzIs0z+m/Hyzwq8TnXybwr
8d/edfsGov+2p4r/Vqf5QwfnxzV/9t98/rXGGflLO9EX8vlHXwj5f6T3EZwP
U/7gvEPm1con+kI1Mg9PfKE7Zd5u1wXnE2Seb+MBnK+XdYHo6+YZ5w9kHaHj
rcE4r5J1h7YTOc90PuEC47zd5T/fOCN/0ecZZ+SP64Iz8mef8wbNnzkjf/bf
Vmr+7HNulnViwnmnrCsTzgNkHZr4b5Nk3artLDbOH8s6V/VFxvlyWRcnPudB
WUdbPr5upP6brnOF27roCyF/iV9qnPtr/qIvMc7IX/gvN86faP7ye59nnJH/
Ee2vvR/R/Hk8qz+T+G/Hue/rWoyz+icJZ/5+EpzVn0n8t8Nu/1D0384U/yfh
fKvz2SLnnZq/6JEzfx8Izshf4lsz8ossH3BG/sJ5pXFG/vhdEE99f73Uno+7
VNf2TYdfBx3tgAO/F1B/TJ9frRm1nx/WcUXfm+nvaz77ruZ74Ltl+G9y3Rb7
3hK6zHOm2D416DJPmGP7W1nH98zQ+wQd+yu7qujtpkuey22f2gjihu+ZffxC
2w/IOr5nrhzfnXP++J7Z+ZNtcX8r5wOel6nPdoxyBs/LnP8W9/1Bl/sbz3OA
Dp8NPFkHz8p6u+nS30XG0+cTeV5GPiF4sg6e/rpLjSfnA558XfDkPPE9cJX4
8nr10/4U2l9mnKHL73GhcYbe19930yXPJcaZdXCurLebLvnPNc5eX2yc15Mf
CM6sg3PldrqTeHD2euTM8eBcJV7rBnyzuF8b+jH+uqZjnPv9DjHe73eIut/v
wHp70j44+zytnuTQfb3qSnS/34Hb6c59PnFfts+nmc4nie34/Q5JvL5f2KLt
zzHO0GWdPsk4sw7O0MEHnKFLPjON82ryFcEZuvxephhnn+c04+zbn2ycfT5x
/3vlfLpNl3nmZOPsr7vIOEOX+mncqsWrj32P+kI1xhn6ntDOSNu/Ax39B2ev
R87Qe7v70mV6TzcO203H93W4jm8nM86V9S7T5X5NMM7+urXGGXo/vS/gzP0C
Z3/dOJ6rxJc3qd81JOijMr//vTk7FPo72/gjvn/4/zNsPw7i5e/osbgviAcv
v48+7oPC/UK85D/Lfi+Ihz+J++jzOZv23aP9Qdtwf337tXbfEd9fxxvuO+Ll
fl1E+/SbsxPC37hPH/HHaj4l9w/59LL9+5y/39ef5J8zT7/fP/LEuPLtZ4U/
BwDxw7ZhvCH+gXDfv2LjEPHq+9k49PnU07kBaD+OTx8/js4TQHzcf03jjc4Z
sPG2DeP2NvU5X5PfqY1P6JL/dKsbrGO8QT87tD/QxpWPv9D2/fn4ko0T6DL/
P9PuD3Txl0bZvj/of3J6V87XxX2E7sdDd+6vO9X2/fk8hxh/jgdnbh+cf+r8
2HHG2etx/zvr4Az9g3Dd821/JbcPzhwPztD1e2zjDF2eOxcZ58p6V+7bmW6c
/XWn2P5K6F8PV6sxzj7/eM4A9O+EdgbbeKb2rT5frr7lJ/6+mM6cffxC48zt
gDPr4FxZb0909K9KfF6l/ZzzB2focl8ajTN0GZ8zjTP0D/X3Ds7QX9PxAM7Q
79P5gx/PHbqun0vjuUN9mwU0njvUN1tC47mD+5X4t348d9Dvoj3R/XhO4vPK
epfpMn+uo/EMvZ7Gc/Rp/Xju0Lo0O/PjOfLx4znmA87Xkw8Jzl6P+7Khy31Z
ZJy9Psc4s08LzhwPzqyDc5X4vLLeZfrHVDdYB2fmAM6sgzN0uV+LjLOPj5zZ
L/V1Y3vCmXVfN7ab3+XrRtR93WC9PcnH140k3vxSqRtLqW4k+SS6rxuxHV83
tpvv7esG4udR3diecPa+Xzy3YcSXfcJ1kSd0cCb/jfh3VdHbk+uCZ5X43Ovx
PAHfTjy3gXXy3/Q9+KUZ+W/KrSEj/03jVxhP6IO0LnVtrb27c82esv/OsKHo
U/+Lf1xzIPUtf/zbk1+r2/h8og/+7OCDnWueNl3m7Y1F/YJJ79dt7Eh8yyfr
jh+ycehTid943ilT5w6d+uvku8fdH46feKDzxcSH3Ljs1SVDp+5O/MZZv1r7
vTUH9if+5LE1p9zYuebVJP70kP/OxCd8Npw/8B+JPjv065lE3xLuS2ei997x
+oCNQ/898QO3Bw4vJv7hVY88MPZA5y7T9f1FMTrw2Z/4ge/qfn/2Az8I+m8T
X+6a0P6ziT4g5Lkt8evu3bz/SN3GFxKfraXXlYM2Dt1l+mfazulrvlZzoHNf
Er9/V/vUoVNfyfm6DwZuz5l/1Vs5XB7G8xOJPi3wf8n8os+UT5+Q/76c47vc
+RIdet3Fxb8F/cnEz3nnhC3/U7dxL/kwS4v7r57ec+PQl3P2kf45/C4O2nof
7xFW07r+D/Ic1/7yenzY2MO07sa6b3XF9fXobe/SOlr+1hQf0Hr5tPB3SPH7
KuvcP1Zczw7a1lJx3VoqvU3rU/k7rriP1qEfaX9bab0JP2FwxXXlsG1Pa13C
Oki4TclQl3h99BOtSz7+/GyI1iWOn6N1yccPzwqtS9BlXXBhdq7WJW5nl9Yl
Xs/epHWJ17MztS5B/732q6/WJY4frHUJ6xThNil7TusSr8tQl3gd97DWJY7v
pXUJ+qea/5Nal3g99X2tS9DlO6ia7DytS9S+1SXou3U8oy5hXSDXnZpdq3WJ
9eO1LvG6BnUJuvyuGzPUJegyDs/NUJe8PjHbp3UJ+qt631GXeF59mdYl1qdr
XeL5POoSdMl/boa6xO08p3WJ572HtS5BlzozL3tA6xLPV2/WusTzKH0O2nNZ
fJ6m4lr/XtWeIzR/sP0O/X079jum96Ta3+VZf//81d/dgmydvof184GVxdC7
/1xn1ifzB5mHHEzeG+7X9/Veby16hHY2lvn5uCzcxweS5+mp+t6cn8tbhHPy
fu09uS9l/56ovhiN7+VUl3nI8mJtuO7mMr9vuiOMt3uT52Yh4yF5P7Vb3+Oz
/qw7N6nDvjM/Vsah6X1UnyXjNnl/NNTtJ4rvm46E+n9XEv+G6Mn7I+H8RKLf
K7+v5H3Q6W4fUHyvdFB+p/a8xnfdZ8jv2vSBQZ9VrJQ6kLz3+YXUjeS9z0H9
TgO6rCMaiq1yX8r8fme63Mec9ZLUq+T9zpVS3xL9kNTDZF5xrn53we99PtBz
ovx7mcHZGKnDZf/+YkyxVuq26XtD/Mhih9R50/to/v3kuUDvcer0O9iy6XIf
G4rvyO+I4muKPWE8bEzey9wjz6Oc85wqzy+aR9UWO+R5l/s8JxSnyfMxec+C
71L8dWdYvYK//TXpV1Yvz2XT9fvY7GZ5jpfZn98rz31+L1OMlXkCvX+pKbpk
XmF6yL9tcnE29jG59xf4fvsW/Wvzrm3bA8/1yfuLWpnPJPopMv9J3l/cJPOl
5L1AL5lfmf6QjKtih8zHcn5PhO9q+H0H6jn75yO0nkN/X5/LJ+r3S+zDo85j
/oDvbw9onWffuK/WefalF2idZ//5FK3z0MUvmpahzrNfijrv5w/zM9R5jked
5/nMZq3zPJ9BnWcddZ7nOajz7KOizrM+U+s8dN2vlH2s9ZznIW9pPWe9Wes5
+5z3aT337ddlqNt+3rI0G6J12/mHRxdlrVq32ZdD3fbxc7J2rc88X1qg9Zn1
nlqfWUd9Zv/wsNZn1lGfOU/UZ+93LbP6zL4Z6jP7gajPHH+s1mfW/1brMOsv
ax1mXw51mOOnaR2GflR11GFuB3WY/T3UVT8PXGh1leeNqKusX6B1lfWnta6y
PkrrKnTxT5qybVo/2WebrPWT/TrUT46/UesnXxf1k/26stZPn099drWf92rd
W2jfnWLei3ML8d0p+2D47pR1fHfKvhy+O/Xx8Vw7nm/jO1L26/AdKft1+I7U
rxfmxX2Frp0me16zX4f+eh9sgfWXfTb0l3X0l3X0Fzr2TaNf0GX8x/2/Xl9o
/fLfK8Z++fVF3Mfn1xeLrV/sj6FfrKNfbn3xBX/0y68jGi1/Xl8gf+hahy1/
Hx/z9/k00bmd0X/z5wxE3Z8zENcRfr8/1gsL6ZzJjmT/qff34n3H/Bn7ZHFd
7/vVWfs+Prbvvgf70j50zDPluufE/d1uHjuPzu9qzuT3Pp3O72rOtgd9JJ3f
1Vzl/K7m7KvhL5/f1aznWX2dzu9qzk4Jf/n8ruZsRPh7WuHP6cL884Rt/pyu
6BP6c7qiT+jP6WrOemue/pwucOBzupqrnNPVbOd0gZv/jmKyfZ8P/Q3had/n
Q3816MPt+3w/Xx1p3+dDv1Ju/IXg5v3Ds+x7e+gyP7zAvreHjv1u4OOvG/f3
Qf+dXNa+t4e+WtsBH/99S+SA+S3v12M/EBzYPwQHjgcHnm+jv+wr+n1J92i/
Rlp/2VdEf6HzPjvo8l3BcPtd8Hwb/WLd73OJ8230i+ORP8/DkT904TOe9qFs
yQ8pH+TPfqPnr/PttnriH+fhnn/UPc/oQ3qeHfbe0PNE/Hy7Ls+TcV3W0b6f
58f9TexPes6YZzYRn+12LpbktaHw8424TwTPU1lHz7X64J/7K2zfLvuBqHt+
PhDPr2A/ENdlPxDXhX6M5nMe+YEhfN1yy8c/xxdbPvx8Rz7s++F355/XMU/v
p11C537j+cvne3ck80z2A5E/dMw3/LlAsR1/LlDU/blA0Q/05wJFPxD98v5b
A51Ls0V9iTrrF/ts6Bf7gfg9sh+I/rIPif76+UMtnTMTfT/0F3oPbQf99d9v
z7Tnpu9vrXHAfGNk0EcYB++PxfMfoPP5D9BxvgE4+PnMNJtXQMf3A+Djv6/O
jA/7geDj/b1xxof9QH9uCb7rnmR8/j8/UNqfYdzgX8l70jG2/vL+WDzPAbr0
d4Jxc/5eaaJx877ZGOMGPXBumxTPNXLtxPMcoB8X/vts0+Uv5l2vjQFn9gPB
2X9fHc95cPl8MU8DZ+j4Dh+cofM5D9B5/ubzj+cPYN6yW5+D6Bf7gegX62gH
8wE+x8DPZ2ZY+9Bl/F9k7bNPCG5+njPNrovnOHwhO6fCzSsW2Pjx31vOtnyg
H9H5BvLh+Qny8fOQuO+e5yeeT/QDPR98V9lE88YOe457bnG+4blF3XOLPqGf
H0KPPL2/F/c7s0+IPL0+z+a3/rvEOH/geQvyZx35Q8f+buTPfiB+Lxw/qopP
6MdPnP/48QM/cBmNH/h1SzI/740+np/3Rt2Pt6j78Rb9PT/eYrwfb9En9PPk
2I6fJ0ef8BrywXR/Ivtg+nuJHNh/Ix/MdPLBTCcfTPsVz5mEjvsCbl6P+6+9
Hvdf+/bjOZPsK5JvpnziOZO+/XjOpI9vZJ76fG8taN+0zXv/DzFkBFA=
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
ZbeDYwrl82QTX43O88lWvgZvll0Njkd25nojy9dUG7i59p3sW3CcskV2Mjiu
kS0dBd9En62yY8ExzkiuPzBfk98U/J6Kp3bALYJj1aLJ+ke5rCLJvoryS9/R
p3EI/wUZ2+AmwbGe/I7/wYM0FrlOU7y2PbcpitG+hU8KjvuU+1EuboXmItfJ
igH/zfV22VyXnAd3pM/f8JnBea3RlMq5ntmT2ynlTn/LbahsccVkH0n+wN6C
YwflWn/Nx025vr9yW6b82AH0Pz84X7c/t4nyE/4p2B8rndu03nAP+SrJ76Z8
2rjMtlb2ToGb8hLyPVJyHkN5tiw5v6E823L6lgnO58ivUU5jfLRfoJjrHrhU
cs5BubgSyfpfub5Kye8gX6UkfGFwzrBMci5IOboKyT6DYk/loeWTvMA9Kyfn
aeVTHZYct8qfUf5Y/t5y2Z3k3JT8w5qKS4P9xlrwlcF+5jGKIYP9TPlHys/c
zbXlkvNCyhnKJ5ONeB151eS8lvzMJtpLwb7TpNxnUwyovPhy5Mui4yP5dU/D
jZPXlXwn+UrKI02Kzosrv/1cdN5aObpno329SfA4+HiuHRTsTyqPqFzNIuSt
kveF/EnlbpXrfiraFxgJ3yi7mdnHkm+wILMPIf9Wfu7d9BkbnadX3vL56FhW
z7oKbpl8H/mcyrXLz1yMfFnBMZ1iO+l52TbpesXaigdnIq+X7Icor3hEsr+k
/M9xyT6M8q41kv0x5XwOTvb9lM8pn+z7KfdYLdm/Uo6obLIfpdxO7WQfUvml
usk+jHI7iktOhuvzDj/SXqM5pT422Z9RbrO4dHRwHuko6frgXFadZN9MuazS
yb6Tckr7uOcFwecLByb7nMopSfc01BrgWbsL9lEV1/RIjg2Vb1QeRXrsKPmE
yfkN5Ta7UOYG5zY/4doGwbHYBcljqLE8JNk3Vp6qSrL/qdzaucm5COWFlE+t
Lp0m+5bsfypvdl5y3Kd8aefk2Fw5q47JOQSdO5yZnMfQmYXyJ0/DC7nPn3CP
4DyY4rZmcMPo+K8p3CAfW/kOsvU9k220zjUugh8NPqPpBy8KPvd5JXN+RzkB
5QaU335G/nayH6jzmv7wU8FnRssy51mUI9Iz9Cz5PDprkn7rxLVPZ/Zl5a/K
D5Rtb5r7sHqHKfL5k9e54hf5RfJxnpAuTN5fOssYmPztOucakGz3dbb1ZsG5
AsXjbxWcB1CcrnUvO1iCuh3t8cGxz4n5OukcfR51Otw6OhbX/NaN9lWkM5cg
65Ps/+hcoG+yX6Tzl8vhecFnNCG3TSfIF0r2kXTmpbyd7Nfx1Jck+xuaw4uT
fSed6azN16fyA8oXymYdJ/8qX2PST8p5y+YeSX1Gcp5NZ17KW9SRjtVcFxyb
KPYfmezjyef9itI6OOfwE9wxOMa/KVlnSnduojQPznVszNeSciDvw/WCcz6j
8n2qvPd7BefSlds5NL9/U97hOtpvBp87KLemOazLXP+Qj7NyEV9rfQXnPa5K
1r36RuX75Z9Ujz5zkC9XibpXPu8at8r5tc2Qr8q/XfmcNQXHm8o76UxMtqMX
fa5Ozunp3EHnHvKBqyk+ov1M8NnEpcn5PZ1H9E7Ojeg8YnXBuSnltT7P95Ry
RG0pU4LPYRsk5yt09tcwObegM8pmyfGXzvXqJ8eYOtdbWXDOSrmdRsnxo84Q
dV6qPTgv+uxR+2s+3Dw5ptN5onL88qmO1hqhPTb4nLRpchync9IWyTGjzihX
FJxPU47rtOQYVmed7SnjgvMMOjOUzb0kOsegPTISHpSct9RZ0qnJManOTzfk
elv5rjbJ8bjOW1snx+M6P/0/3mLPsA==
          "]], Polygon3DBox[CompressedData["
1:eJwtmmW4HMUWRaerbnANFjwEd3cL7g4Ph+AQ3CG4u7sHd3d3dx7u7u724K31
7fpR6V63J/fOdFeds/eumWLTHVffofR6ve34p4/jCPyzGMf5u17vbc6fr73e
8fBh8OXwWozH4Pvgmfv1er9yfRp4cvgZrj0OHwLvA1/ga+GD4WHw+fBv8LTw
QPhZ+Hd4OngK+Dn4afgI+AD4YvhOeCd4K/gE+C54F3gofBL8AzwAHg1+HP4e
ngAeBX4MHouxCrwM/CnnEzD+A68Cf8P5s7z+WPgQ+FKv+Rng++FZ+HzPcP0Y
+GD4Eq6N7z2AV4a/5vxuru8KbwufDK/NeAJ+AJ6V//8c14+DD4Uv49oAXwOv
Cn/L+RiMleCl4I85/4bXjwX/yXgYHoWxNOeLcv19zr/l+tjw34xHfGCMeTnM
xvVXOR+VsQw8GP6A89EYy8KLwR9y3sdYFJ4XfpPzv/h9s8HTwS/Cf8Ozw9PD
L8H/wvPAs8KvwP0Zq8HLwZ9zPh5jTXgl+CvOx2WsAa8If8l5YSwMzw2/znnH
mA+eHX6N88pYBJ4HfoPzsRmrwsvCn3F+M39/G3gT+Ci4H2MwPB/8FucjM5aC
F4Hf4/wpXn84vD98ETw5Ywi8DvwL55MxNobXhn/m/Elefxi8H3wh/AJ8Mnw0
fCU8IWMdeDX4O58t1w+F94WHwy/Cp8DHwFfBYzJWhpeGP+F8UsZG8H/gnzif
mLEBvCb8g/eG/3+A11l/V8D/hU+Dj+P6NfDojBXhJeGPOH+Z66fDx8PXwiMx
loQXht/lfBLGhvBa8I+cv8TrT4WPha+GJ2KsD68Bf8/5P1yfG54Ffhm+sWR+
vQHPz/z9g+uzwNPAz/u32v3dqOTvf1zy90fj+F/4g5L6MVLJ/Pm0ZP6OUTJ/
3il53v1Kft8S7f5vWPJ53y95viOWzMf3SubrCBxfgD8ped6jl7zfOzmODH/I
+9vK9QiPCn8MbwPf0ura2/BmnNwK87F678Cbt89r/XsT3sT5BvCWem/Bm8K3
wSPA78JbWH/gUeCP4K3he+DR4E/gofC98Ojwp/C28Gcl63HMkvX5fcn8nqBk
/v5Qsp4GlNTbV0qex//4/0/DP5Wsp4k5vuN85M3tbH2Gf4d/ZazLa9dj/Mb5
dFwf5nr3Q/FBXy1Zv/+0+vxXyfybsmQ+/VyyficpmT+vl6xPb4r1+LWS+vJv
q9cvltSH3+Gn4K9L6te4Jev7u5J6O35Jffm2ZD2MV7K+H+TYH/6C/78d/HlJ
fRqrpB48UdIPvm/1/PGSfvFdq+cvlNSr3+An4efgWeFf4Sfg/5XM/6lK6unD
HMeFv+L6Dq4HeErrK7wnPCf3a3frV8n6nwvew/peUj/mgHeznpWs9/nhfeDV
S/rBbK0fLV/S3+aG97S/lPSvBeB9XW8l/WX21i9WKOmPI8HrWg9L6pv3Y354
bI4HwV9yXBAeh+Mh8O8cl7Nfcjwc/oPj8vAgjke0+bQ4PCHHQ9t6nAMemeP+
8Icc57Q/cjwA/oLjAnB/jgfDb3GcybbCcT/4TY4zwpXjvvBirb+vX1LvFm/1
cIOS+jK49fv1SurnUxwnhn/ifu/anu+E8A/wzvBD8Djwl/D28CPwePDX8I7w
0/Ak8M/wbtZreCL4R3gX6yU8FfwXvBf8DDwp/Au8u/WJ9/MS/BT8oPcXfgS+
B56xX+b79HDHcRjXZ+b6jtZv+Fx4IXh/62mJ/lkQ3s/6XdLPXQ+D4D/4fXvA
M3F9B3gpfn4OPCO8vfUbPhueAd4OXgI+C36D4wwuN477tPW7Lbw4fCb8Z838
nrZL/fP5248GlvTzX0r0yKQl/W95axZ8Ha+fgs+3DHwDfCU8GbysNQ++Cp4c
XskaCt8ITwXPB58BnwCPCS9nzYSvhQfCa8APwHfCM8Brwo/C98IzwatYE+Fb
4WngFeE74BvgKeG9+Tx3wyfzfh/w8zK27qW//+v970v92gXu4/VTw1vYb+C/
OZ+GsSW8Mfw/zqdlbAUPgf/hfAXG7fD18CD+/4x9qZfqxQLPBO8N7wxXeFVr
NnwbPC28GnwffDs8Hbw6fD98Bzw9PBW8uf0K/ovzKRmbOf/hPzkfxNjU9QH/
YX3l807hemz18kd4cut/q1eLMi6Dz4fH5/cPhDfppaZb23/i9QPtD63eDWZc
Dl8AT8DrF4OvgIfDA+DF4SvhC+EJ4SXha+HL4InhpeDr4MvhSeCl4evhK+BJ
4enhofCmXfrHQvD5nJ4BjwPPD58JnwiPBS8MXwCfCY8LLwIPh8+Cx4MXgM+C
T4LH7pd65/OerURPzck4uhd9PQrX54ZPgI+ER4NLzf2cgdd/wbXHSvzGt1x/
1HvN9Uvgffn53d47+GJ4H/gueAh8ETwMvhOuNc9rxhJ9uhN8E3w0fB+8DXy1
7we+x7kD3wwfA98P99U8/5lK9G5X87ymK9HDv5b4i8lK9PpvJXp/8hI9/k+J
Hpy6RB/+W6JHpynxJ4qPIa73Ev3br2b+z1ziN0asme+zlviHEWrWwywlfmaF
5jc2h2+Al2v+ZVP4OutD8zubwdfDB8IPwWeX1MeX9AFqYfufvZafHdSLfxuR
5zE7fCR8IDwSPKu/A94bHgG+o9XPLeHjuTYv46Re9PQYXJ8DPgo+CB4Zvr9k
fn/Wxe+oD1wvn3fxN3eU+Ln34Yfgdfn951gf+Plt8GpNf28L3wyv2vT7UPgm
eB7GifBR/P/R+Xvrcf1ceFeu3861NZre3h6+FV696WX98C2uJeus/cka5j30
OXP+hTWG81maP12G8/Nca+017/Oz47l2W6v/m/P3j+1Lz12gS4/+sPVkvbaa
+YPWA+boogHeaD13zi49+s3Wk+fqogneappgiS4aQK1wHH/vPdc35/P2i4bQ
+6mxPm89fvEuGuKLphH0cmpQtcMx/P93OL+U87n7RWPofew5v7ceqXdTI9o7
1cBjdOnpamM18z+9aDy1tJpar6qnUGurycfq0sPV6mryXhcNoFa/tfXHzfjZ
MX3R6KWLhlO7q8H7umgEtfkHXby+c+SOpoFW76Kp1EZf1Tw/n6N+Ro1lr7EG
WYucLxdyvk3J/Nywpj7uUVLvFq2ZP+uUzG/1jfN53ZL1sFFN/dyzpP5tXNNv
9yqpf/vDz1s/S/rHfvBz8Okl/WVf+Fn4tJL+cwD8gvW0pL8uUlMP14b72V9r
6uvWJfN53pr1tGpJP1u6pj5vXLI+j4bfhi+B57Lf19TzLeFR4ZVr6vdWJfV2
g5p+sTvcH16rpt8YEqkH1q7pNzuW1P9la+r7kJL1bL05G96kpJ6vU9OPdiqp
/+pn6/1qJf19H/gZ+NQSveCace1cAc8HP82z+hr+lHFOe0+nd/kMvtep4Vu6
aI5h8ALw1U0D3qdWhC/t8pm2rVmje3bx3K5dPffhXTIuvfiN8GnwefCKPnv1
SZc1PgF8ZF96szXf2u+ccm6VNr/1bJN16VF6uTm4/rBezp5W08NW6OLp7G3e
A7WOnsJ74zNUm6iBfLbOOWurNdi5eJg1HF4d/pHf33F9my4aZ9aaZ3pElznj
s9YT6g3toQNqPKM/81wv6Zzaq0sNd66pia8pud9qZT1t/y4aXq+rx5+5i0fV
+98BXwJfA69vb2G8y/llXJunXzT7VF08hFpezT6oi+ZWy+vBZujiUfRmavgZ
u3gUtb2a2ixKz6nWHo/zr/zbjKtKPPa4XTyC3lvNP3UXD6MX0PNN3MXz6QX1
0At1ySz01nqOibpoeL2IHmXKLpr8qaZRH1K79aJd1RwjtXqjFrkXvrmLph1a
06NGsDe2evRhq7/LtfqpBhjc6rHaQI8zSRcPo/fRE5mF6oGfaBrC7M8MQW2h
Z1ZL2iPtlXvW5I0nlOhr14Bz7ZSStTF7v7x/56Bz0Z5sb9ajjGOWBO/YxfNO
WeN5zc7MZPTCx8FbdOlhY9sr4R26eOYpamq0tVrPMqq9E96+i2eevCazNbtV
E4xX0wPthdb4MWs8t9nbob14cTPdoW0+Oz/13GZtek69uJ7abNgMSq+th9q1
rR+9lZ5tjy6eTS+nB9u9i2fTm+nBduviyfVmeqxd2nrTe52hJuzi4aeu8exm
w2oovbyeX616dFuvev5hbX2aBejpzb4P7sXrm7mYjZthmMWcAm/XJQOYtMZD
mg2ryfSWemqzRDWMXlsPrXay59h71CjnddG8ahc13cldaq61V013SheNpNZT
E53TRQOrldREZ3fpefY+NeKpXTSR2lHNc24XDa0W0tObHaqx9Ppm3GbdZh4T
12SAZpFqKLPBg0q8pJ5ya3jnEi9iD7AX7F3iRe2R9ko9tXsLala9tpruIviq
XrSeGu3iLppc7aaG17vqYdX2avSb4Lt60e56gGu6aHa9gR7g6i4aX29gxmi2
qsYzezTTGtjWm1nXc239WZ/UN0+19Tao1Z9da/zusSV+2J5i7zm09Zrda/ZH
jivx39vV+MvDSvyXfuNB+KgS/71jjZ8+ssSfH90X76UHG13tWONHDy/xazvU
+NEjSvza5jV+f78S/2gGYBZu5mo2sFWN/z6gxB/6THw2B5b4Q3vSm71ofevD
IfAr8Lklfv4o+C34YnhOewv8Bjwcnk19CL8OX1Cy33EY/Bp8fsn+yR41+ynH
l/jxveAn4RNL8oZD4Vfh80r2k7as8e/7l/hb9d3IXTJes149gnsj6km9wyNN
X/Zv9dCM0b0EM2OzRzNI9zoG95JNmrm6d7BYL1msGfN0rb+YPZtJm3WbuZhV
mzmqL91jMos0kxyt6V3rs558QKvHZpN6er39wF6yybebvl+8F31tRupeiBm4
2amZq9m9mbZZ7Eut39kP9QN6zru7eDS9qB71ri5zyLl0Eq95sMs99d7q4cy6
XuzF26lRh7V6ZP04y/fcRWOqNV9rel6/oT8wYzJrMmM1ezezd+/HDNgs38zd
vQIzZbN4M233nvQDZt1mLENbfbAebtXu14D2/JwDZjPOSefGllwfER4fvr1p
QLMj14zaUI1sFuOcVztfUnNvvEdqAzWz2Y1rZN92P25q/dh+fRljrl40hdri
Zfsi/De8d1/eo7V7ufbeL63RHmoStclFNVpCDaOWObFmrjnn9DYb9+Veek/V
q2fVaE81idpEDTpGL1pFbXox12fuRaOoVdT4d7bn6fPQP/r8zCy/rPmdT7bn
qTZevy96+dEuev6kGu+k59J7XVBTu6xhagkzKLOozfjZRFxbpy9zxTnj+r2l
pndbc6w9p9XMbZ+Zz849M/fONuFn41v/a7yYnk3v9k6N9rNGW6vfrqnV1nBr
+YU12k9NpbY6o0ZL6gH1gqfXeEE9pF7y3BqtpiZTm51TU3utwWqf4TXaTA2p
llTzHggv27TweTVaSs2n9ju/5nmrsdRaj5bMtW/gneBra7SZGk2vvF5f9NMj
Xerdhn3xa4930bMb9cXPPdHFX+v5zL6G9+IFz6zRompmtbM11dpqnqIW0xOe
1fqv/c8aZ5anp7L26TnN2vRkelFr9IWtH1q7reHDWz+1ttszrmz90F7ie/a9
O0es3dbkB1p9sFZbY927tyZbe+1RZsXWXHuXPc2s155ir7OGuxeuxrS2O2ec
O+rhI1o/P7vpC/vxun25pub089qTzDb1kPYqe95VrR/v1PTCRa2/27/taVc0
fWCvO5DftyC8BPxRiSfRm3zG+ILzExjf9JLJuF7OrvEGn/gazjfoi79+rEue
4TN7otU/s5Kb+J0f9ZIRfFKzRl2r/o5PazT1DU3PqLWtGTN1qSnWEufQpF3m
2KOtx5u1miHY++3ZZq1mBPZy34PvxTll1mJmbHa8uXO01ee7Wr23frvGXet+
Br28GYJZ9AO9ZAvOSeemc1LvZU+9sekh+4E93GxeTWJvt8aOaG3vUnvdA3cv
fIg1Sz1W0wvsCWY9enj1rvpXfXlDjfc0MzI70vOb5amHzQLMHMwGzSTMIswU
zHLNUMwarql5lmZgZmFmGGZz6luzja79/ulLvLYZtLXJGqU+d8/avWv3MEep
8cD+volKvPGrNVpWDawWNmM2vzIPMu8xI/W7H2ayZqcf1PQKe4Za0kzV72aY
d5m1mnGYdZtxmH2YYZhlq7fVs2ZG6nP1unr6vhovpUfSK91b45X0RHqjR2q8
iZ5Eb3JPjVfSE+gNroIX6iXjM+u7sibrMwM0C7y9xrvpyfRmj9ZkGXoevc8V
NVmhGaJZ4v01XkaPp9czw3Fvx4zIbOeVGq+gh9BLPADv1YsH0gs9WOOt9Eh6
pYdqvJOeS+9lJu13Ycy8zaofrvFaeiy91tU12kcNZNbpdx787oN7tGO4/hjr
9ZLZmd0Nbf3kkOat3fNx78eMeyDXrqvJOs0wzTLfqPEqehy9zus1tciapNe5
sebZOwfMMv0Oht/FMHPvz7W3GJf24qn0Vu7puLezBT+brGaPyb0mM/dBNXtM
7jWZH05Vk3mYFe3WspBTa/qLGaVZpRmS2dIWJdmSfsh77T3X35xSk2WacZp1
+p0Nv7vhHsFYXHu3plZaM/U+7pGZX/qdmGm4dj1jhV4yYLPgN2u8oR5OL2fN
tFaNWlJL36vxRnoivdFHPrNeNKZa88Oa2mMNUmv6HQG/e+Iev98deJ/rt/Ti
sfRa7rH73SX3+N17d0/E7wK5J+leiXssfhfI7xi49+Ieh9/F8jsQ7n281u6f
HlQv6h6KtcUaYC1wj8Tv0vidAvdO3BPxu0Hm1e6VmFe5l6snG8K1/wPYLr2e

          "]], Polygon3DBox[CompressedData["
1:eJwt13n8VWMaAPDbvfdXiHZKJCRLobRr166VVlpptbSgxdZmKhVFoyJUmEIz
tjEhY0mjDW1IJQpjHXtKpVLN9/m8/fF8nvf5nufc3/2d8573vPes/iM6D89m
MpmPRYH4Wy6T+b1QJlNGVFCvd7BrPpOZL69nH7G/6LmSPcjWsA1sLHtWnMCq
slrsK+MF7Ed1VpzMVrF/slPl+qw52238DDtersJqsi+NX2Cl5VqsIfvRuLO/
+5C8lm1k4/R0YfPYO2wTG8+eEyVZDVaffW/8PCsl12QN2A/GC9lP6rw4ha1m
F/i8y+Sb2e3sAj1PiD3qUuJ0ts7xS/WNkB9jT7NuepqzyewltlS8qW4hprCX
1W/ou1FfAzaaPckWi1fVTcQ49pz6ZX2D9DVit7Kn2fOsD2vMbmNL2AusLztN
lBeVHGvg2APyqepy4mzj+uyv8sWih/FU594tlqgbijHsKfVzPq+3c5qxiXGv
4ruxIewyNiHuC1vGBrOmbHxcW/YKG8jqsOvYPPYY68hqsyHsIbaQdWC12GD2
IJsrXlTXFdezh9WP6+ukrya7Nr4/e5i1YdXZ1Ww6m8WasBrsGjaLzWOtWH12
E3s8/lfWg1UQp4tz4n93bLZcT8SDsFDfU/q6O34J68fuZw+x1qwau4pNY/ez
xmyR2BvzR5zBNjhekZ0hKutvpJ4jn6wuIyrG/xmfKz+lPhRzSlR27kdxr1kh
+WxWhW03bqN3uvxvtoKN0PN3kWPnsAvZp8at9E2Vl7HlbJieJSLLKrGq7BPj
xeyAuryoxD5k/2B5uTK7iO2Iuc1+UxeLXvZuXEu2W11CnMbei3nMDkYtzmGb
2UnsxJiXvlMN9T1yVXG58e36JuqrFtco7oU437GmMUfkkuoSca+Ma7OZcnF1
sbh3xrXYDLlorDkx/41rsnvl0vGcx/U3rsPuk89SnynONW7M5sqV4tkQ58Wz
F/NQvkhcaXyX7zfd96vreHe2kG1kW9lkdha7lF3Pros5qK4i2rDb1LeKBeoL
xRVsonqac+s5tyW7m70S6wMbyrqxBWwD28ImsXdEezaMjWY11Z30zWGr2Dp2
B/tF/E9dTpzJ3nL8Z/aduqyoyFawN3Jpvh/Kp7kZc3R5Ll2Pw/l0LeKa/Ci2
O++g80qIb+KdIP5g54vq7H3nvJVL1+1IPt2/uI97xH4954lq+jY6/mYuPQN/
5tM9iHvxYmTWTF9bfQdifcyle/hbPt3nuN97xeGYjzHHYz12bB87YnyxqO3c
LXEtc2lO7M6neRPzZ7fYp+fc6NW3yfF/xT2Xm7N27KDx67m0Zh7Mp3Uh1odX
c2nu/J5Pz2w8u8fFcdbeuV2cu8f4eFZB7sC6st+NT4jrK3dk3dhe42JxjeJd
ynqzQ8bFWWW5G+vDDmfTvKon75P3iz/Ea7m0fh/IpzU+1vqixhVZJ+d2d+6+
eN5iTstdWC/2p/FPer9QHyeKiMF6luXSM7Unn56TeF72i6Nxz0Qd5251/A+W
kauzuobbYv3JpbVrr3NPMS4bz3jcV3aFvh769huXZhfIbeM6i+/Vu/T+GvMx
7om+NXGv2a6YtzFn2Fq2Lua5fBO7jdVRfyh6s3FsCmuu/ljcEM88m82uVG+K
Z4mNYRNYI/VG0ZWNZuNZQ/V7oiMbEc8qq63eILqwUWwca5BLe53Y8zzKnxXX
+D9Ws1bGQ/Td5NjF6rdFczaQDWNV1WtEW3YjG8kuUb8verI72SR2mXqlaMEG
seHsQvWqWCfYYDaCXaR+V3Rgw9kYViuuZzz/8d4RFeL7+H7rWWd9I9Vj9dVX
fyKGxjoa71rWRb0il9bbo845N9ZBsVRcwjrr66nv+FyaQ5+rC0Rh8Xa8e8UT
+j5Qb9c3Vc9LubTO78qnNbnosfkR8+TMY/M61snt6htj/XbuHOd2Vv9HNGMD
2FBWRb1NDGRT2H2svfpTMSzWdPYg6xr3R/RlE9hU1lK9WfRh42Ofw1qoPxC9
2Fg2mTVTbxH92SQ2g7VVbxUD2GQ2k7VTl4hrxLqzvuyIcdnYT8l92aDYP+sr
x6qxfvGsscKsH1vCPmafs5kxl9mTbAvbwe6J7xv7AbaV7WT3xv/Fnmbb2Gds
BpsjPlPn4plmy2JvFNdGfVjtlMxLrLXBNPlV/hYbrmdWzAX1IXU83ksdf8Bg
Bzt67DfAy+xr9kisjXwlu0u9VrRjQ9koViOX9ruTsmkPG3vZ8j7gcNz7bFqv
Y93eHHtRUT2eH/UQ5xbRM1vsVBeKecVeiTVT3wPZtHeOPXRln/eovu+Nj+gp
Ld52/GH2LSsdexO2PNZl594f7yW2lo2J54/NjHcQW81Gsh7sMbaJbWNT2OVs
Rrwj2So2Kpe+y2y2Mua8WKFuJ+5jy9Vr9I3WN1/8oM6IMtLKeB/omyWvYO+w
W+O5Z4vYZvYJm8bmii/VRcUJ7LXYh7Cv1CeFs9djT8S+VhcXJ7I32Dz2jbpk
9LI3WS9/Y7H8EfuUTddzFXucvV8o/c67Oz5f3BtrWlxndku8J8RYtiDuJRsQ
80zcwR5li9i1cc/ESDaHLWC91IdEEVaXNWGfx/s+3plyPdaUfRHvWFZYrsMa
s53GBb5f2ZivrBP71XiHvlvk2Ww+66k+IApYbdaIfWZc2Lnl5DbsCrbLuBQ7
X76KXZNJE70kO4/1YP3QUeNTYr8n92ED47nRd3Ls2VhvNiBOZWVi3xrXlvWP
V2Iuvd+qsJ7sajFNXUSclk3vu3jvTcmnZ+FE1lDdQExkR9hJrJG6hc/7OtZg
VkxuzFrGniub9j5/HlvXY31fl0+/37pn0/4y9pkFBekd8POx93u851fr+ZLd
o+8Z9VKfd3Os4eJONp8tZv3V/413HFvEnmU35NJv01HZ9JssfpuVKkj/W/ls
+h/if9mZT7/fBmXT78j4PVlUXy5+57CW6g4+7yfjfOwV5FasI/sl9gpsrrya
rWd35tLCVZw1Ya2U3xo/kku/qeK31TPqb9WFYo9n3JS1duw742zs0+QWrD37
OZv2462zaX8e+/RCvt//Ae+H9SU=
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvRFEYgOFrX8cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
MvY1ImJr7Gt4TqJ45zmZezLnO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xhtd817aeda9lA+1w
hXGucpdr3AszcZ8bPOAmt3QYfodH3OEx4zzhLk+5xzPu85zT7nHDD13oJdxR
Y2bb4hAX2cc5dnCSzRxnHUdYxQGWsVRd1hls5aczGnjHGh6zItyLRby274pv
ytVT2KtCM+awgDHmMzvsYRZjzGQWM8J5TGcqU5RmncTU8B+H7/irZP2EZ/qS
MaIZH7f/78MfvadK6Q==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 997, 1003, 1337, 689, 1121, 912, 691, 1122, 913, 692, 
       1123, 914, 693, 1124, 915, 694, 1125, 916, 695, 1126, 1004, 1218, 696, 
       481, 697, 1127, 917, 698, 1128, 918, 699, 1129, 919, 700, 1130, 920, 
       701, 1131, 921, 702, 1338, 998, 922, 999}], 
      Line3DBox[{704, 1005, 1219, 703, 1006, 1220, 705, 1132, 923, 706, 1133, 
       924, 707, 1134, 925, 708, 1135, 926, 709, 1136, 1007, 1221, 710, 1008, 
       1222, 711, 1009, 1223, 712, 1137, 927, 713, 1138, 928, 714, 1139, 929, 
       715, 1140, 930, 716, 1141, 931, 717}], 
      Line3DBox[{719, 1010, 1224, 718, 1011, 1225, 720, 1012, 1226, 721, 1142,
        932, 722, 1143, 933, 723, 1144, 934, 724, 1145, 1013, 1227, 725, 1014,
        1228, 726, 1015, 1229, 727, 1016, 1230, 728, 1146, 935, 729, 1147, 
       936, 730, 1148, 937, 731, 1149, 938, 732}], 
      Line3DBox[{734, 1017, 1231, 733, 1018, 1232, 735, 1019, 1233, 736, 1020,
        1234, 737, 1150, 939, 738, 1151, 940, 739, 1152, 1021, 1235, 740, 
       1022, 1236, 741, 1023, 1237, 742, 1024, 1238, 743, 1025, 1239, 744, 
       1153, 941, 745, 1154, 942, 746, 1155, 943, 747}], 
      Line3DBox[{749, 1026, 1240, 748, 1027, 1241, 750, 1028, 1242, 751, 1029,
        1243, 752, 1030, 1244, 753, 1156, 944, 754, 1157, 1031, 1245, 755, 
       1032, 1246, 756, 1033, 1247, 757, 1034, 1248, 758, 1035, 1249, 759, 
       1036, 1250, 760, 1158, 945, 761, 1159, 946, 762}], 
      Line3DBox[{764, 1037, 1251, 763, 1038, 1252, 765, 1039, 1253, 766, 1040,
        1254, 767, 1041, 1255, 768, 1042, 1256, 769, 1160, 1043, 1257, 770, 
       1044, 1258, 771, 1045, 1259, 772, 1046, 1260, 773, 1047, 1261, 774, 
       1048, 1262, 775, 1049, 1263, 776, 1161, 947, 777}], 
      Line3DBox[{781, 1162, 948, 779, 1163, 949, 783, 1164, 950, 785, 1165, 
       951, 787, 1166, 952, 789, 1167, 953, 791, 1168, 1057, 1272, 793, 1169, 
       954, 795, 1170, 955, 797, 1171, 956, 799, 1172, 957, 801, 1173, 958, 
       803, 1174, 959, 805, 1175, 960, 807}], 
      Line3DBox[{806, 1279, 1064, 804, 1278, 1063, 802, 1277, 1062, 800, 1276,
        1061, 798, 1275, 1060, 796, 1274, 1059, 794, 1273, 1058, 792, 1271, 
       1270, 1056, 790, 1269, 1055, 788, 1268, 1054, 786, 1267, 1053, 784, 
       1266, 1052, 782, 1265, 1051, 778, 1264, 1050, 780}], 
      Line3DBox[{809, 1065, 1280, 808, 1176, 961, 810, 1177, 962, 811, 1178, 
       963, 812, 1179, 964, 813, 1180, 965, 814, 1181, 1066, 1281, 815, 1067, 
       1282, 816, 1182, 966, 817, 1183, 967, 818, 1184, 968, 819, 1185, 969, 
       820, 1186, 970, 821, 1187, 971, 822}], 
      Line3DBox[{824, 1068, 1283, 823, 1069, 1284, 825, 1188, 972, 826, 1189, 
       973, 827, 1190, 974, 828, 1191, 975, 829, 1192, 1070, 1285, 830, 1071, 
       1286, 831, 1072, 1287, 832, 1193, 976, 833, 1194, 977, 834, 1195, 978, 
       835, 1196, 979, 836, 1197, 980, 837}], 
      Line3DBox[{839, 1073, 1288, 838, 1074, 1289, 840, 1075, 1290, 841, 1198,
        981, 842, 1199, 982, 843, 1200, 983, 844, 1201, 1076, 1291, 845, 1077,
        1292, 846, 1078, 1293, 847, 1079, 1294, 848, 1202, 984, 849, 1203, 
       985, 850, 1204, 986, 851, 1205, 987, 852}], 
      Line3DBox[{854, 1080, 1295, 853, 1081, 1296, 855, 1082, 1297, 856, 625, 
       857, 1206, 988, 858, 1207, 989, 859, 1208, 1083, 1298, 860, 1084, 1299,
        861, 1085, 1300, 862, 1086, 1301, 863, 633, 864, 1209, 990, 865, 1210,
        991, 866, 1211, 992, 867}], 
      Line3DBox[{869, 1087, 1302, 868, 1088, 1303, 870, 1089, 1304, 871, 1090,
        1305, 872, 641, 873, 1212, 993, 874, 1213, 1091, 1306, 875, 1092, 
       1307, 876, 1093, 1308, 877, 1094, 1309, 878, 1095, 1310, 879, 1096, 
       1311, 880, 1214, 994, 881, 1215, 995, 882}], 
      Line3DBox[{884, 1097, 1312, 883, 1098, 1313, 885, 1099, 1314, 886, 1100,
        1315, 887, 1101, 1316, 888, 657, 889, 1216, 1102, 1317, 890, 1103, 
       1318, 891, 1104, 1319, 892, 1105, 1320, 893, 1106, 1321, 894, 1107, 
       1322, 895, 665, 896, 1217, 996, 897}], 
      Line3DBox[{911, 1002, 685, 910, 1336, 1119, 909, 1335, 1118, 908, 1334, 
       1117, 907, 1333, 1116, 906, 1332, 1115, 905, 1331, 1114, 904, 1330, 
       1329, 1113, 903, 1328, 1112, 902, 1327, 1111, 901, 1326, 1110, 900, 
       1325, 1109, 899, 1324, 1108, 898, 1120, 1323, 1000, 1001}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1121, 252, 1220, 488, 280, 1225, 503, 295, 1232, 
       518, 310, 1241, 533, 325, 1252, 548, 340, 1265, 563, 1163, 355, 578, 
       1176, 370, 1284, 593, 385, 1289, 608, 400, 1296, 623, 415, 1303, 638, 
       430, 1313, 653, 445, 1324, 668, 460}], 
      Line3DBox[{253, 475, 1122, 254, 489, 1132, 281, 1226, 504, 296, 1233, 
       519, 311, 1242, 534, 326, 1253, 549, 341, 1266, 564, 1164, 356, 579, 
       1177, 371, 594, 1188, 386, 1290, 609, 401, 1297, 624, 416, 1304, 639, 
       431, 1314, 654, 446, 1325, 669, 461}], 
      Line3DBox[{255, 476, 1123, 256, 490, 1133, 282, 505, 1142, 297, 1234, 
       520, 312, 1243, 535, 327, 1254, 550, 342, 1267, 565, 1165, 357, 580, 
       1178, 372, 595, 1189, 387, 610, 1198, 402, 625, 417, 1305, 640, 432, 
       1315, 655, 447, 1326, 670, 462}], 
      Line3DBox[{257, 477, 1124, 258, 491, 1134, 283, 506, 1143, 298, 521, 
       1150, 313, 1244, 536, 328, 1255, 551, 343, 1268, 566, 1166, 358, 581, 
       1179, 373, 596, 1190, 388, 611, 1199, 403, 626, 1206, 418, 641, 433, 
       1316, 656, 448, 1327, 671, 463}], 
      Line3DBox[{259, 478, 1125, 260, 492, 1135, 284, 507, 1144, 299, 522, 
       1151, 314, 537, 1156, 329, 1256, 552, 344, 1269, 567, 1167, 359, 582, 
       1180, 374, 597, 1191, 389, 612, 1200, 404, 627, 1207, 419, 642, 1212, 
       434, 657, 449, 1328, 672, 464}], 
      Line3DBox[{261, 479, 1126, 263, 493, 1136, 285, 508, 1145, 300, 523, 
       1152, 315, 538, 1157, 330, 553, 1160, 345, 1270, 568, 1168, 360, 583, 
       1181, 375, 598, 1192, 390, 613, 1201, 405, 628, 1208, 420, 643, 1213, 
       435, 658, 1216, 450, 1329, 673, 465}], 
      Line3DBox[{265, 481, 266, 1222, 495, 287, 1228, 510, 302, 1236, 525, 
       317, 1246, 540, 332, 1258, 555, 347, 1273, 570, 1169, 362, 1282, 585, 
       377, 1286, 600, 392, 1292, 615, 407, 1299, 630, 422, 1307, 645, 437, 
       1318, 660, 452, 1331, 675, 467}], 
      Line3DBox[{267, 482, 1127, 268, 1223, 496, 288, 1229, 511, 303, 1237, 
       526, 318, 1247, 541, 333, 1259, 556, 348, 1274, 571, 1170, 363, 586, 
       1182, 378, 1287, 601, 393, 1293, 616, 408, 1300, 631, 423, 1308, 646, 
       438, 1319, 661, 453, 1332, 676, 468}], 
      Line3DBox[{269, 483, 1128, 270, 497, 1137, 289, 1230, 512, 304, 1238, 
       527, 319, 1248, 542, 334, 1260, 557, 349, 1275, 572, 1171, 364, 587, 
       1183, 379, 602, 1193, 394, 1294, 617, 409, 1301, 632, 424, 1309, 647, 
       439, 1320, 662, 454, 1333, 677, 469}], 
      Line3DBox[{271, 484, 1129, 272, 498, 1138, 290, 513, 1146, 305, 1239, 
       528, 320, 1249, 543, 335, 1261, 558, 350, 1276, 573, 1172, 365, 588, 
       1184, 380, 603, 1194, 395, 618, 1202, 410, 633, 425, 1310, 648, 440, 
       1321, 663, 455, 1334, 678, 470}], 
      Line3DBox[{273, 485, 1130, 274, 499, 1139, 291, 514, 1147, 306, 529, 
       1153, 321, 1250, 544, 336, 1262, 559, 351, 1277, 574, 1173, 366, 589, 
       1185, 381, 604, 1195, 396, 619, 1203, 411, 634, 1209, 426, 1311, 649, 
       441, 1322, 664, 456, 1335, 679, 471}], 
      Line3DBox[{275, 486, 1131, 276, 500, 1140, 292, 515, 1148, 307, 530, 
       1154, 322, 545, 1158, 337, 1263, 560, 352, 1278, 575, 1174, 367, 590, 
       1186, 382, 605, 1196, 397, 620, 1204, 412, 635, 1210, 427, 650, 1214, 
       442, 665, 457, 1336, 680, 472}], 
      Line3DBox[{277, 682, 1338, 683, 278, 501, 1141, 293, 516, 1149, 308, 
       531, 1155, 323, 546, 1159, 338, 561, 1161, 353, 1279, 576, 1175, 368, 
       591, 1187, 383, 606, 1197, 398, 621, 1205, 413, 636, 1211, 428, 651, 
       1215, 443, 666, 1217, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1323, 444, 652, 1312, 429, 637, 1302, 414, 
       622, 1295, 399, 607, 1288, 384, 592, 1283, 369, 577, 1280, 354, 1162, 
       562, 1264, 339, 547, 1251, 324, 532, 1240, 309, 517, 1231, 294, 502, 
       1224, 279, 487, 1219, 250, 473, 1337, 681, 688}], 
      Line3DBox[{466, 674, 1330, 451, 659, 1317, 436, 644, 1306, 421, 629, 
       1298, 406, 614, 1291, 391, 599, 1285, 376, 584, 1281, 361, 569, 1272, 
       1271, 346, 554, 1257, 331, 539, 1245, 316, 524, 1235, 301, 509, 1227, 
       286, 494, 1221, 264, 480, 1218, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJytXV1sXcdxPrYohZZdR42s1E7tgC7SxhWCoAgKtGBxJOWl6GNQOFDeIhTx
Qx/a+KEFghaFhKCF+1AgBloUeYktoAUqQC1IwIYtyD42C8kSXTEWbYrk1Y/F
q5iWaJKSqB/qh/ph7zkz3w73m7O65wq5D9p7hnNnZ2dnZ2e/3T16/i9+/Ocv
PZpl2eD6LFuX4bNUULk9fu7fVk9fyomuz9meev6e6e9F9PX/lJCPZ6a3lb9N
7RpPyEnx49nRE/xBLtsT9SbsmWoX2zm0d1tv/K6/avtxcf/lh9SH6bAz02G3
W0xP+FWwf4/tcn6V6C/w98X+Fn7P9QY5CX0a8gd/TvlVyv4sH3YebygnRU+N
39T4Svq5Pt9KjIuk3VL8DeV0s3PTdqXiQ4rezT5N7d9VTkP/TNonMY5SdNi9
oZ5Jf+7WLvbbXv056N+j/7Df9tqPKXq3eN50fkn0Y9KfR2A3jg9FXDaOMz3a
J2XPpvH5Ye2cqjflz87f6vUJdh4hOeBL0VPx+dflP73mUWyfZD7TzW8btitl
55GE/JHBzj+rq6uvvFtf70iif3v158bj8dc0P/Zqz655ZkP+hJ2TcSPE21Se
yfyJelN5USp/65ZH9RxXG8rplk+m2sv2gZ0pDjz8OoXkz3WxZ9O4l8rHel2X
pfw51NfQnmH8No2ftfZv7Zzpkrc07t+Enbvm+T3aP7luajjPdovbqXVuar5z
8bNL3Gi8zoUcylfnuvht4/Xmtnr6w8bnXvOcpnlsb+sa8+em8S2Vt88l6Cl9
Uuti8Lu4AbkN/aGb3zb2/y56NpQf/NnVu62+3lR7r/eYJ3TDJZL4TMrOibjX
dL7rFid7nZdJn67zYGr8Mv16yj4Pa//3mvH3vxf/rpueD7tOaZznd/ETp/+2
+O8P7Z8J/SG/VzwzJb+f++Uh5TTVPzWue60XeptfbajKuWJutfwcT+VjiTxn
LtDb+vv+6rnF/pbdr/5+m+hTg1n0Mf51tfWG9jp+fXb8F6p6Z4Ld5Pm4iwMd
O+z5h+WFQuxxN/CPlIr3IT6cOLhGfof/svIvRvUaLn14EPSny2L99+HPQf8X
Kv73izuVXgtBzt3qeTrXkseja++jVTmVb6zK0cAvcg+58XhP5S/H9gj0qli9
FvifrEqsH2z+Av2Rqlwm/tT6q130kd1uVPV9lm+pnluBX9pzRu1zbm1/ZaX/
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
wXZO4W/I6+5RvyOvE3+4HOgrFf52x8Vn4BcrJF/G70mXbwxrf7A/PzivW0r5
c8E4Z7wvaHrGdvb5hsYNZ0+er4G78XoQ+NvvkZ7AORV/C/QY5zzs8KIbalfQ
CeeM4/Duq3mL9EzhnFqm6EUKfxO72jlMPe/lzn3hGX8HHf3C+7axPoYfSn+3
iwFpN/OrfD43vniQ9QT/C6QP6hO/vRPoun8HuUzXOOD5hb7QlQ59FmW8RP6/
sH8h4bfIw1n+sPrJF5wn5PX1tpV+zfk/y9H94iLeN8Y8O6Pzna1/la7rHZvf
Fa9UObfd+JJ5f5H58zhf4/Mts04fpg+U1hn6qGA99TnXcyld5cOe31N7sz1l
HmmRPsed/Ova37of6Opl/mGNJ5IPXAn6Cx7X0v76zNG/Lvo7O2vcZf6c6Vn0
aX7/XeSNknzEfXxwXvRQHv/d7Cz0A13lpOgy/5539Kz2s7T9cWmP5oF+f3NF
41+9HLPDfBQ3pw42ox8vHtd2kz4506uiY2f8rlm7RpSf+3fc0eej+cPkQH+u
9/FIjtcnbjePd8ZpQfe4dz0/1gtGx/ngb2u7Y/528UWlj8/flO7srPIDv/D9
Vy6lnT/RZ+QVa/Ol1fL8hMg5HOjQm/WB/lwv9BR5nzv6t6nerPaztH066iej
p/i1LOLfGf9TtfW2Cxl/lt/K74cUf2s5O8vfXw90xQF1/2WM6KOFTOyWp2l9
yfHO+7/d7CD8c45f6UGf/doulKBjHyHeTzB77q8dj0vKb/l2LNf0jOUaXcbj
os6/vO6eOnhGfkf6v65xxtaDcb57hM4jpe7de7r0y0dOz3gfyOjf7Py760c/
zb+cZXvX4sZV8XJ5f3/f/Zr7+5nkgQdcPPkiMa+JfU45/jPk5zLvfuz8aiWy
o9Gz2k+3+Lzo/EfKqYPsP8rn6l1O6CN28edRxS6XE/q3i29VpY0veR4pUMb0
YfXb0+Q/p3W+sLxL7PZpzvyoV/9OdvB+8kwmfrKjep+D4eQi95ju73zo+lf0
NZxW8rRD0J/G74LTk9oV6KL3Rcev9nJ2flrbdZ3kyPMF1158ezqSZ3Ybj8Zr
kJ8zP9arL0d+ZHaW+t+O6esTOG0nD0YZ6z+dc7vm1D9Zz5d1fF6qSstjYR9t
X+Af1/Eg8ixOpuwm/TGheR3nmf4+mvJrP9q6TH+fkAN84BDxH1B/Pkl+8qHS
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
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BaseStyle->{FontFamily -> "Arial"},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-0.5, 0.5}, {-0.16, 0.16}, {-1.0408340855860843`*^-17, 
   1.0408340855860843`*^-17}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.618047870751969*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy0nXegHNV1//e3b1+vkgAX7MQ2XRQBD0wzVb333lHvIARCFAlJFCGJIoRA
iCZ67yCK6N0GG9vYcYsdlzhuSdyTOI49v/M559w7s/vmCWGSP/aV3ZnZmXtP
P99zzuDpy+bOWjR92bwZ0z/Td+n0M+bOm3HWZ/osWSpvVf2/QuH/zZVXw2cK
/J0UCuFHknznO9+Zxw/++XB//4FfVcns2bOr9A39k7/S/+bakb/XX9XZz/Ul
/xdKu/hszgefXpfz1bP+z79VTy/t5hNW59zi3MolrIlXnPMhd6M25/JTM5/r
veqdTcu8+/863Txu2c//K7+K6UGlyufTz/zgP8cr5j2wHlmoCt+g7022E/8U
r1Sf8y3ydzHnehPt3P+IX9rkB0HV4TF2ceIf4pe22F+wQ/nt5Z09wc7+bfza
Nr9lvnbwgfZb3i7lnDvezv11/OZumXN771uV9Nyn6gPO/df4vXs4wV3Wt1bP
51w/P5fgxtkFfhEvUPGwdr0avdbAA0pJ3/1KSS+7Hu/lXXKsXfJn8XnyDuqi
P2uTW0fV6bXHH16djDmsOhl5SHW49q4u/s/xfvfWN+qSTYPsQnOPrUlmfb4m
Of3oGj1xyEG6kKV4N/7EP45vfFrfqE/W+ZKd37MuWX5qXbLs5NrkzBNr9SrD
Dy6llNCREv2u/ine1d/7Nc87xZZu/cD65NIB9cnafvXJRX3q9PxR8qhcsybn
MUfbBb8fb/Kz+kZDcuYJNcmCY/XEZOuoxmTLiIbkmmENyRVDGvQCYw/Tz/KY
f5Rd87vxJvfRNxqT09urk8lH2DXvmdyU3DmxKbltfGNy9VC75gTZG+iws5v1
C3873ux++kZTMqFHtTylEfKzc5qTHbOakydmNCcPT29KNg+3i08+sjrpYxfP
u+mRdu1vRjG4v18bYnR1lbx9RmvyxuKW5NWFLcljpzcn1420a09rrxGC1Wvn
6YMRdu2vxwXJ47DP2qc8e2PypSUtyftntybfOrct+cY5bcl7y1qTJ2c2JzfI
Tqzsbdvaz75wV9/41bhSB6VCpjV5eXZj8sUFTcnXlzYn3z23NfnJyi7Jv6zu
kvxkVZfk62e3JU/Pbk5uGtOYrHYCYgnCvuR923D7ti/H5zswfZYuyUvybW/J
t331jObkO2e3JD86vzX55eq25PeXdU3+eHm35Dfy+5vL25LnZONuHdeYXCyk
GxjKN6xQn/Otw+xb34nP+Mn0W6uS9vb2sG2ynvzcQ997dW5T8ub8puQrS5qT
b8nd/PC81uQXq9qS317clvz3+q5JsqlbklyzR/L7dV2Tb69oS16Y15LcLjR6
2QC7q+HdS2Gra+Pz+nK/Hd/4ZFzuElJRNpfvhkSnChnOF9Fx9km1yUW9apMN
A+uS64bXJ7eNaUjum9iQPDa1MXluZmPygiiUl+c06XnfXNaS/GBFa/Izuc9f
X9wl+a/LuyTJlXKvm+Vet+2ZJDfsmfzH+m7J985rS15e0JLcNbFRBYExf0kp
Ra4jXN1xFYfarb8ZV/FTGT3GybL5/hCf05uBGBCgpx9VnSw6viY5R6TXyp61
yWX96pKrBtcn18vD3CoPc++EhuTByY3Jo/JAnPeiPMxXl7YkP76wLfnjZfIA
18jNb90jSW6WB7hjryS5cc/kTxu7JT+4oC15TfjrXhEQVwyuj8Km//5xU/Oe
ozmufZ4xmKdK2+3JX4snftpVGk8+TUTVuMNKSoSihsq2kRUYKSszScTVTJH+
C4+37bxQVuGSvnXJlaIhrhtWn9wyuiHZLitxx7gGPe+J6Y3JGwubk28vFwZY
0yX5yxWsgDz97Xvp7/+R/38krPimSJgHpjSViUXODwyf9/hNfu959l+euPOH
fyVue4U63juVF7bNs46u1gceYfTvC2I8FXR///1LyQhRYNzwDCGPBcfVJGeJ
YrvgtNrkYpElG4XWr5Yt3Ty0PtkiC8S5905qTHYK5395aWvywwvbisnv1nUV
hv3xSkRRa/KKkPNjIsW3i2C4eohRAyrE9iGIy47P5xL2p++8885Xdu7cyatQ
1J9Vv/36178e1yaPWPLMAV+vF3dJZZ9wEwECQnauOFUU+xdqknnHVCdT5aZH
GztV69J9umzpePWT5RsmyztetNl0ob95IiaWnliTnCeXWSOXWyuvS4XLOG+D
sPctQluPytrALQjQ1xe1qJK4c0Kjar21QotLZfnhVG4TEVBMBgk/p1aqKfuO
j1L1f7N+z3ewM7gR2PwSeTDEyDkn1SSLxO44vZwBjdyqsmtWsJ9dkz5iKg6V
w5AS8O3cY2qSM75gPIl0Wi4vzlstinOzmDB3i9lxz6Qm1d6X9q9PzjmlFkvO
ZKQZcwNE2EBevAYZmeVRWcMuuK5yFXjvaFuFjbukoqq4POlfRWf8baPEChPu
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
J3SnimxV4UD9VzdGDrl1hDywWts1yerTTNIuFgaZ5QzC/1A/4icYDBMxGGTj
OGaBLnp1ci5S+QvVylxz3HjAmNCNk/eWysZwzEr5DsQPGnmTLPp1Q4Q4htUl
t8hm3K63W2dyrUtyi+zNliGWXdki5vAzosu+t7wl+c3atuSPl3ZJ/iCv3/O6
pEvyu0vakt9d3MZeJcl1wii37NmpFj3NNmZzudgPLspbC20jXveNEGNEzRAe
KGusPw6X+GbACVB7WHvRmkU2QNzE21yB3ioPwwMh/XmPZ71TtuausbY9d44J
+yFEOUwIVtZmnSjcC0+xPZkvzDL9SDe0Di4V2RQx+EcfbILqdPlo7tG2/PDW
Clnqi2SpL+ttv+G5C/xSyEHZBiEdkfWF+uRS2Y6NwpvXiKGE28FtQj08EWQG
/5upXad2wR1uorOmGF/fPacl+ZcLW5NfXtRWTH6xqlUu+fNVrcnPV7YmP5MX
f/8HuYyru1ou47bODZxTbWuuzjELxYdia/Ag8S3YmlfmmB+VtRB5QDVmppgQ
e9CFEVvDQ7HG7IHux3CEgqiIwv563o2y7rxuktfNw+2Y7H7F/RGlgkC7eoDQ
skj6804yep99lO0Pgkv2SIUYmgQhNkvMcfZwiVo41bohukGyx1f2NyV1hfAg
wmqTKyzZkCLma1F0R61oyxuG2f2g3O4fV74xT04xLwGPAeG8fZRt0D8sa07+
cXlLMfmnFfLjB+e2iKz6/rktvKcveTv5t9VtJuhEy3CNXQg136ArI+9kNqgq
eWNBc/IqfDOvSW5MRJnIt+DsBndHeUi0DW4/X/a4uzkPIdTcRGKjbtGFrktu
Gm6bwoLfMEQo1E0nhNb18toq790w1DduuJ4n3y2yvfAxPZfzOI7FXSMLvvzE
6mThMbZhcA6bBRehzqfKRrGJi+TzpWI3cSxcQ0gPZkSD8b3CoIUWzxbivD41
NbzsmdCaWNqs3NfPFE/orOZi8o2lzbJE7y9t1rfkJbf5tTOaxbyTj5OfnN+q
p+r6b+m2SwF2SiZUk3JJ0e3WL5+ht6be9vOzm4rossIBGpPa6W7m81l3Krib
KtP8/lXB1KFVlNshOtaWdWa9rx9i67BFJMa1A2uSzQNMsmyWv68dVGN7w17J
8duUqez8bX4+x1wu67nqFGGGE6qdiD+u+8E+jD/UFMyco0vJkmP1GGWyVarV
5dy+xii6F8ONHu6Te31Q7pl7f8RdZn5DW4/xmlxfQmjLWj4hovtJ27aCWfTG
t2zfqyLuZ4Nm+tJCWbovLmgSvfy2yJy35tvrzXmNyRvyeneR6WgknGZqr3Lp
tr1z6Xay7du6POkmxrXYfO+f1ZK8vahZr/z0jCbNhpIbfmSKxVsfl9cT0zSw
WGTXxKALbsijk9PnRkrfm7G+WCP2Drfj2kGmXK6RPdskr6v7y1r2s/3jN//z
Gcewv9m9ZO94j/MulX04/2Qxe48L+9dV9w/rDEU1T/ZOPkuWi7C7QI7DuLhU
tNFG+Q4EHNe8xfcOvsewMV4Su5+dsT3ZMdWcVnlV84+IOraJt3EYeD3jkuTF
Wb51L81qLLQlLxJXmdmgr+fFitrJSwQPpi6Hf3VJM/Iw+VeRfn+63HPtmHR3
6Q7WRxHnMu/S+EbnEc7eyX9d3jX5t7VdNINPDhtufG1+s0bN9VEnNSb3TGhI
7hzfkNw70eAM92M0ywvj+aGJ5sg8Yr6ObiWyXk07zLqRqrdU3LGEbBN66CrZ
titlaa8Q1tgorw197Dfn8R6fcQxbh64hKgIpQBKwLZ+vPU3suBNNNM6V7Zt+
hO3BjCPRXSX1Uvkctr24p7HwlXJNrgV53TIi3U5IER57dnqDLJf40h5akf/1
vRp+1rB3/gGryX9FflYlzwhxN+n2BqkI531TpOdPLmhVc0/BHdfvYf797Xul
uKIOgDCXl2sj3zVEvvtEyoG91aj/ixiQvxOj8ucXtam7+/4y4cjFLckLc5o1
68Od3Da2QbNk20am+AWgKbeLPUeY/86xqV2HaQgr3iNqjf0zW9BsDBOFtn+6
Z/JaL2t6ubDJul7Vybre1fK37cf6PtVxT1FlVzqr6n46G/P5Rafa8UuOLeke
Yhhie/AeKg0xulqOgX25FufD4tDT9pG1Lj7qVGwKo4nVYXv3rDPZLveuygIl
7J3LMNk/4cbkK4ub1Nr4lazqf8NrCsrZw/hNzPVfX9q1U6l5ou3e6sh+DVmT
o6dnQCzqqQgmu0RIaRY0pJjctKe49uoZXN0t+a/1FUx6pjCp2C7PiOv9sIja
AEYBf7FpSH1y7VCD7GyV1w3y2jaiPrlR7BM8yZvdsFdjUQ1GW0SM+BtcXrJB
bBibe1kvZCcy85Ke1bK8l/ZkM6rlfds42XT5TLZdniGz4fKeXEGM4HDcOSJX
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
UIo3ShAl4lWtSD1xNCRXpGFO92V0IuR0yofRe2ipp3jptHajTMtHDgBJ4eWq
4FzvnBq+3fyO7M2zOrNvr+3O/vGS/tmfrhuQZVv3zrJtqnzZ9vD3LXtl/3vL
Xtnvrhrgx44uvbBIXdEd4cvCZ7DR1oMhL6VUT4LMOhilfhK8JlGe9xW7o2PM
HR1VnMXxGm8/cAa8mciFYDAK8Bztctps4BGxEOMO5JnZCtGGMvHbRz0ZbmCH
6MHJtLeCatmgEzt2907MV63yXYXe+7gjTaWmHp5sT0bMn9HCteYDmnYr24ZM
ElZEF+SeKl7OdPXNqu2FUxSmVgdXJWq7LVbyfu+NytS/wC2pJn1IzgRV71VW
8WYUgP7N+VZvROpxPz1WrgS3WNBTQ8AH0PanIpNmDvaPFaTf89AM1SQY9qCI
qNYohGxuj/NpVRYue2wrItnIbq/ULZMYZ89Ks+04J9vjuDlF3kh9Lpf3zBO1
GHLDuNbsgZnt2fNBE764siv74QX9st8ET5TdtFeW3blPlj28rwVm/YMCDch+
c3n/7KfBY31zTZfkYWgQoSsnjIiXWQo+A4TuDUIh2ijaRIlpmWqRlkLaeinR
Gcc11vJKEUgMZgvStwgwe4h6IYZHyjJl3CwJMz0Bhq/BDJwjiwsK2jfTh9cb
ZPzbt2tYQn1sWnOItoJ/sqguzeD8KiSKYyAibXJVXHFm2VTPlMOS6ea4HyC7
ZQdh0NJKZtViTHRLezp2tAchXI7c/+6oIUqndZC8/dwkUMPcoRWUtK8KPoag
ir+l+RseI2/ZbDzE/A+F4jtru7LvBYH49nmd2TcTnFNwSymH81zgeOE7QjN4
Dk2Bag0hWcdUuoMpCrXSoqKznTuV4pA8VIgrNulw4JCk09lZU0n0eOcUFCNe
Wxa+23ndZDWa5kMo99C+WXZ3+L11r+zPpiA/u7Bb2NQ+G7wS0PkoCBjK1xs3
10Wf0D3ui4xXc+3J2ramdENVMfh5xZn/YK4kx9mtwNPwHDoKxNiXDNVoEOjH
HmtBIvgoAnNETEvQAKYZvMwmKGjp8ZgrDh5I52k1IcPN0Kp6fHqzQSoqwMfk
w/JJ5pG661uWufr6aoXRsp8B1rqjOcKmEnV+ZVKEDBzDRB8Op7HC4SRFJj+w
JCWK1cPdTS2ZuvQUPLR3VI53Wx3PF+SUJFsZgDnDCPWtVlsDx5UuF8pCOZj4
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
dfFJz+qTnlDLFO54Ue8o/c3/BY79LbY=\
\>"]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";", 
  RowBox[{"Needs", "[", "\"\<ProjectionInterface`\>\"", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6176483553441143`*^9, 3.617648419509763*^9}, 
   3.61764845348411*^9, 3.6178019897616196`*^9}],

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<prepPackages.mth\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.61764493105157*^9, 3.6176449762320213`*^9}, {
   3.6176461252696047`*^9, 3.6176461327996798`*^9}, {3.6176461684300365`*^9, 
   3.6176461696100483`*^9}, 3.6176465507588663`*^9}],

Cell[CellGroupData[{

Cell[BoxData["$ContextPath"], "Input",
 CellChangeTimes->{{3.617648519376775*^9, 3.6176485222268033`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ProjectionInterface`\"\>", ",", "\<\"JLink`\"\>", 
   ",", "\<\"TemplatingLoader`\"\>", ",", "\<\"PacletManager`\"\>", 
   ",", "\<\"System`\"\>", ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.6180478713919687`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1646, 744},
WindowMargins->{{Automatic, 3}, {-25, Automatic}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792},
"PostScriptOutputFile"->""},
ShowSelection->True,
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 1, 2014)",
StyleDefinitions->FrontEnd`FileName[{"Report"}, "StandardReport.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 33, 0, 99, "Title"],
Cell[616, 24, 102, 1, 41, "Author"],
Cell[721, 27, 503, 12, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1249, 43, 74, 0, 72, "Section"],
Cell[CellGroupData[{
Cell[1348, 47, 67, 0, 37, "Subsection"],
Cell[CellGroupData[{
Cell[1440, 51, 146, 3, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[1611, 58, 1879, 50, 101, "Input"],
Cell[CellGroupData[{
Cell[3515, 112, 1146, 26, 43, "Print"],
Cell[4664, 140, 256, 4, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[4947, 148, 481, 9, 49, "Text"],
Cell[5431, 159, 1926, 48, 101, "Input"],
Cell[7360, 209, 1026, 29, 81, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8435, 244, 129, 1, 37, "Subsection"],
Cell[8567, 247, 10282, 291, 261, "Input"],
Cell[18852, 540, 3855, 106, 201, "Input"],
Cell[CellGroupData[{
Cell[22732, 650, 734, 12, 40, "Input"],
Cell[23469, 664, 670, 17, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24176, 686, 286, 7, 40, "Input"],
Cell[24465, 695, 884, 28, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25386, 728, 3822, 97, 141, "Input"],
Cell[29211, 827, 623, 15, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29871, 847, 692, 13, 40, "Input"],
Cell[30566, 862, 601, 15, 40, "Output"]
}, Open  ]],
Cell[31182, 880, 611, 12, 40, "Input"],
Cell[CellGroupData[{
Cell[31818, 896, 637, 12, 40, "Input"],
Cell[32458, 910, 601, 15, 40, "Output"]
}, Open  ]],
Cell[33074, 928, 663, 13, 40, "Input"],
Cell[CellGroupData[{
Cell[33762, 945, 612, 11, 40, "Input"],
Cell[34377, 958, 598, 15, 40, "Output"]
}, Open  ]],
Cell[34990, 976, 586, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[35601, 991, 621, 11, 40, "Input"],
Cell[36225, 1004, 605, 15, 40, "Output"]
}, Open  ]],
Cell[36845, 1022, 583, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[37453, 1037, 690, 13, 40, "Input"],
Cell[38146, 1052, 599, 15, 40, "Output"]
}, Open  ]],
Cell[38760, 1070, 695, 13, 40, "Input"],
Cell[CellGroupData[{
Cell[39480, 1087, 609, 11, 40, "Input"],
Cell[40092, 1100, 601, 15, 40, "Output"]
}, Open  ]],
Cell[40708, 1118, 602, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[41335, 1133, 643, 12, 40, "Input"],
Cell[41981, 1147, 603, 15, 40, "Output"]
}, Open  ]],
Cell[42599, 1165, 598, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[43222, 1180, 618, 11, 40, "Input"],
Cell[43843, 1193, 598, 15, 40, "Output"]
}, Open  ]],
Cell[44456, 1211, 589, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[45070, 1226, 618, 11, 40, "Input"],
Cell[45691, 1239, 605, 15, 40, "Output"]
}, Open  ]],
Cell[46311, 1257, 581, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[46917, 1272, 923, 25, 61, "Input"],
Cell[47843, 1299, 625, 15, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48505, 1319, 736, 20, 61, "Input"],
Cell[49244, 1341, 625, 15, 40, "Output"]
}, Open  ]],
Cell[49884, 1359, 315, 8, 30, "Text"],
Cell[CellGroupData[{
Cell[50224, 1371, 122, 3, 40, "Input"],
Cell[50349, 1376, 74, 1, 40, "Output"]
}, Open  ]],
Cell[50438, 1380, 97, 2, 40, "Input"],
Cell[CellGroupData[{
Cell[50560, 1386, 197, 4, 61, "Input"],
Cell[50760, 1392, 73, 1, 40, "Output"]
}, Open  ]],
Cell[50848, 1396, 366, 7, 30, "Text"],
Cell[CellGroupData[{
Cell[51239, 1407, 309, 6, 61, "Input"],
Cell[51551, 1415, 177, 5, 40, "Output"]
}, Open  ]],
Cell[51743, 1423, 218, 5, 40, "Input"],
Cell[51964, 1430, 107, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[52096, 1435, 164, 3, 40, "Input"],
Cell[52263, 1440, 392, 13, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52692, 1458, 213, 4, 40, "Input"],
Cell[52908, 1464, 127, 3, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53072, 1472, 348, 8, 40, "Input"],
Cell[53423, 1482, 416, 13, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53876, 1500, 585, 14, 40, "Input"],
Cell[54464, 1516, 682, 18, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55183, 1539, 139, 3, 40, "Input"],
Cell[55325, 1544, 358, 9, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55720, 1558, 176, 3, 40, "Input"],
Cell[55899, 1563, 163, 4, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56099, 1572, 149, 2, 40, "Input"],
Cell[56251, 1576, 623, 14, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56911, 1595, 178, 3, 40, "Input"],
Cell[57092, 1600, 1382, 36, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58511, 1641, 389, 9, 40, "Input"],
Cell[58903, 1652, 1171, 23, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60111, 1680, 402, 6, 40, "Input"],
Cell[60516, 1688, 2683, 58, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63236, 1751, 374, 8, 40, "Input"],
Cell[63613, 1761, 1180, 23, 81, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64830, 1789, 332, 7, 40, "Input"],
Cell[65165, 1798, 436, 11, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65638, 1814, 384, 9, 40, "Input"],
Cell[66025, 1825, 526, 10, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66588, 1840, 674, 19, 81, "Input"],
Cell[67265, 1861, 768, 16, 107, "Message"],
Cell[68036, 1879, 260, 8, 54, "Output"],
Cell[68299, 1889, 260, 8, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68596, 1902, 573, 14, 40, "Input"],
Cell[69172, 1918, 217, 7, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69426, 1930, 736, 16, 40, "Input"],
Cell[CellGroupData[{
Cell[70187, 1950, 116, 1, 23, "Print"],
Cell[70306, 1953, 112, 1, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[70467, 1960, 102, 1, 40, "Input"],
Cell[70572, 1963, 654, 14, 40, "Output"]
}, Open  ]],
Cell[71241, 1980, 845, 19, 40, "Input"],
Cell[72089, 2001, 985, 27, 40, "Input"],
Cell[CellGroupData[{
Cell[73099, 2032, 471, 10, 40, "Input"],
Cell[73573, 2044, 120000, 1966, 290, 44104, 720, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[193588, 4013, 297, 6, 40, "Input",
 InitializationCell->True],
Cell[193888, 4021, 305, 5, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[194218, 4030, 106, 1, 40, "Input"],
Cell[194327, 4033, 278, 5, 40, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)
], ";"}]], "Input",
 CellChangeTimes->{{3.617541981702116*^9, 3.617542042812727*^9}, {
   3.6175424260875597`*^9, 3.6175424287675867`*^9}, 3.6175425928502274`*^9, {
   3.6175434803318834`*^9, 3.6175434896918836`*^9}, {3.6175435415218835`*^9, 
   3.6175435485918837`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\<\"before genPolys in createpolynomials 1\"\>"], "Print",
 CellChangeTimes->{3.617720577721262*^9, 3.617797796114665*^9}],

Cell[BoxData["\<\"before genPolys in createpolynomials\"\>"], "Print",
 CellChangeTimes->{3.617720577721262*^9, 3.6177977961346655`*^9}]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"sysPolys", "=", 
   RowBox[{"ReplaceVariables", "[", 
    RowBox[{"lucaMod", ",", "thePolys", ",", 
     RowBox[{"{", 
      RowBox[{"stateVar", ",", "nonStateVar"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.61754193613166*^9, 3.617541951251811*^9}, {
  3.617542440467704*^9, 3.617542442007719*^9}, {3.617542473358032*^9, 
  3.6175425266395655`*^9}, {3.617542563299932*^9, 3.6175425887401867`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"forPlot", "=", 
   RowBox[{
    RowBox[{"sysPolys", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"eps", "[", "uu", "]"}], "[", "t", "]"}], "\[Rule]", "0"}], 
       ",", 
       RowBox[{"uu$Shock", "\[Rule]", ".05"}]}], "}"}]}], "//.", 
    "lucaSubs"}]}], ";", 
  RowBox[{"pltqq", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"qq", ",", "qLow", ",", "qHigh"}], "}"}], "//.", "lucaSubs"}]}], 
  ";", 
  RowBox[{"pltru", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ru", ",", "ruLow", ",", "ruHigh"}], "}"}], "//.", 
    "lucaSubs"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6175426017603164`*^9, 3.617542695701256*^9}, {
   3.617542772471463*^9, 3.617542823149943*^9}, {3.61754287391842*^9, 
   3.6175429243879056`*^9}, 3.6175430119152794`*^9, {3.617543223362234*^9, 
   3.617543228722181*^9}, {3.617543575931884*^9, 3.6175435781718836`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forPlot", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"ru", "->", ".0"}], ",", 
    RowBox[{"qq", "\[Rule]", "0"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.61754333080116*^9, 3.617543350490963*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.3730516147770083`*^-7"}], ",", "0.`", ",", "0.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.617720577811262*^9, 3.61779779662467*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", " ", "@@", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"forPlot", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", "pltqq", ",", "pltru"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.6175429586968765`*^9, 3.617542990005937*^9}, {
  3.6175430349045897`*^9, 3.617543043804323*^9}, {3.6175430763137045`*^9, 
  3.6175431229432383`*^9}, {3.6175431860526075`*^9, 3.6175431867526007`*^9}, {
  3.6175433763308835`*^9, 3.6175433821908836`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyNnHu0VuO+x9fIJVKGJbKxSaRc4sj9PkWlKys2NtqdV4pCW+cc2S7lkqit
Q1QbXVDkVllK0xKt3tlFbqVUuq5Cci9Zqzv21ll7zt/nabzf533GOP3TGJ/x
jLl+8/M+73c+8/fO+TTpfvsVPeuUlJScu1dJyR61/zdZ23narl1fJGPOe6bR
unveS64o+3jfh4ftjG66Y8qoij5VjjdtuaJv5wbboon7NXygT9Vyx7eXfr3i
4KE10aYX+t3UtP0Sxx/7Zt2AytKNUc/0OPMdb/nKbx07N/jGxs9x/LXFJ5xe
WbrG+JuOr3utctyM0gVRif2DNxq5zy/v9RmYt/ERvE77fptmli5I7PiOn9uk
7vUzS9ckVo/jvy7s/UVtPTZ+ieNXNSgrnVm6MbHzdXz1sWOaNBpak5gfx/dp
8/i7tX4S8+n4mT0evLLWJzzJzTvowW8em+15hqtnuHqGq2e4eoarZ7h6hqtn
uHqGq2e4eoarZ7h6hqtnuHru8NzRK5a2mul5hqtnuHqGq2e4eoarZ7h6hqtn
uHqGq2e4eoarZ7h6hqtnuHr+bOrhk9fc/LbnGa6e4eoZrp7h6hmunuHqGa6e
4eoZrp7h6hmunuHqGa6e4eq5WzrPp3qe4eoZrp7h6hmunuHqGa6e4eoZrp7h
6hmunuHqGa6e4eoZrp4Xp/5f8TzD1TNcPcPVM1w9w9UzXD3D1TNcPcPVM1w9
w9UzXD3D1TNcPS9I+dOeZ7h6hqtnuHqGq2e4eoarZ7h6hqtnuHqGq2e4eoar
Z7h6hqvn7CwGna+e4eoZrp7h6hmunuHqGa6e4eoZrp7h6hmunuHqGa6e4eoZ
rp6/zPxH6hmunuHqGa6e4eoZrp7h6hmunuHqGa6e4eoZrp7h6hmunuHquSrL
E88zXD3D1TNcPcPVM1w9w9UzXD3D1TNcPcPVM1w9w9UzXD3D1fON2fXR8wxX
z3D1DFfPcPUMV89w9QxXz3D1DFfPcPUMV89w9QxXz3D1vDJb73me4eoZrp7h
6hmunuHqGa6e4eoZrp7h6hmunuHqGa6e4eoZrp4vy+5fPM9w9QxXz3D1DFfP
cPUMV89w9QxXz3D1DFfPcPUMV89w9QxXz92z+3HPM1w9w9UzXD3D1TNcPcPV
M1w9w9UzXD3D1TNcPcPVM1w9w9Wz9Zc8z/BAv87zDA/06zzP8EC/zvMMD/Tr
PM/wQL/O8wwP9Os8z/BAv855fu+4+5tVVaxN7ntgeccb95ybzJhVdkHvhdsj
/MPxb+Mj+POf1R1cO94dHx44fhQ4fhQ4fsTx4dQv3PVROb6MTwLjtR73d6l/
88Bvb+tT9XlSv9tZLV9I5iaPDHnsmB3lOyLjEfyWsa371HIdHwXGR4zHA8fB
A+OpX49P/Ryf+jm+1s9xAuO9+ymOE6jH1T+gydeVu3bt7uvu+49tN44csC1a
1fOe93ftWuH+7pxVR+VfvHWz44yHnzHxgE937Vrqxm8+/5lTbpq2yXHGw49O
61zkxufe3/T1oGHfO854+Or0737gxn96eZtRL976leOMhzdNj5O48fe9edaY
QcNWOs54ePOUv+HGT3/0o7qDhn1o+TCkEl5SMmvnv/OB8RxHx8MZf3g23s2H
RccPvOqRYR8mcMbDj8zqdOPr1TlozsPDVjrOePiKzIMb/9TfprWYcOtXjjMe
3jjz7MY329T1roeHfe844+GnZ5+jGz+9x97v1X6OjjsPxldm88SNf+mnFXUn
3LrZccbD+2fz0I3/6dXJr9fOQ8cZD2fe0u/VeQvX+QnXeQjX+QbXeQXX+QPX
+QDX+QDXzx2uny9cP0e4fl6uHvlc4Oofrp7p96pnuHqGq2e4eoarZ7h6hqtn
uHqGq2e4eoarZ7h6dvWIZ7h6hqtn+r3qGa6e4eoZrp7h6hmunuHqGa6e4eoZ
rp7h6hmunl094hmunuHqmX6veoarZ7h6hqtnuHqGq2e4eoarZ7h6hqtnuHqG
q2dXj3iGq2e4eqbfq57h6hmunuHqGa6e4eoZrp7h6hmunuHqGa6e4erZ1SOe
4eoZrp7p96pnuHqGq2e4eoarZ7h6hqtnuHqGq2e4eoarZ7h6dvWIZ7h6hqtn
+r3qGa6e4eoZrp7h6hmunuHqGa6e4eoZrp7h6hmunl094hmunuHqmX6veoar
Z7h6hqtnuHqGq2e4eoarZ7h6hqtnuHqGq2dXj3iGq2e4eqbfq57h6hmunuHq
Ga6e4eoZrp7h6hmunuHqGa6e4erZ1SOe4eoZrp7p96pnuHqGq2e4eoarZ7h6
hqtnuHqGq2e4eoarZ7h6dvWIZ7h6hqtn+r3qGa6e4eoZrp7h6hmunuHqGa6e
4eoZrp7h6hmunl094hmunuHqmX6veoarZ7h6hqtnuHqGq2e4eoarZ7h6hqtn
uHqGq2dXj3iGq2e4eqZfF+jLeZ7hgT6b5xke6Jt5nuGB/pjnGR7oa3me4YE+
lefZ1VO87+Q847P56fO2DNrg9zl/tt8N1GdFabNVc1+e492P0CdXn21+fiRf
p/tc736kgfVpvT7Ggu9ebHWE328M9Q+Ps/rVJ/Wrz7etfvVJ/eqT+tUn9avP
lfc+VHngv/z+W69rvx7fZXre87njzDaDn/ifxPN5Sb0rK24+ZJbns97dexxf
t98sz+eS76aNeXnJLM/nqKt77N/2FL8f2zHQf1tt9atP6lef1K8+qV99Ur/6
pH7NgdFWv5e3w/o/efgx0z3Pm29be+d1n0/3PD/Y4cKuo0a943k+4LjnW638
07ue5+f3Kml+yAEzPM8nr8/Vv3r+DM9z5azZNSMfqfQ8Lwv033pY/eqZ+tUz
9atn6lfPz1n96pn61fNMq189b7TfCdVz//T7Ms3zvF/6vZjmeR6d5k/seT7+
0F9+a3zmW57n6duvXdet5i3Pc9vP3n3/2ckVnuf/DPTf+J1TPVO/eqZ+9Uz9
6vk4q189U796vtTqV8+b0s/9Vc9z/fTzneh5PiH9HCd5ntul3+vXPc83pd/f
cs/zxen3dIrn+dP0+zjF87w00H+rtvrVcwOrXz2faPWrZ+pXzz2tfvVM/V7/
zepXz3ul9Yz2PF+c/t1nPc8XpccfF+gnj/c835vOqxc9z8+k82eC57kinScv
eZ4/DfTf6ln96rm11a+eqb94P3m85/keq189j7L61fPbVr96viut/2bP85SU
/83zfEVaz4Oe54/T8YM9zxel5/uY5/n69DhPep6fSusf6XnO/r/L67+Ns/rV
83SrXz3/yepXz9Svni+w+tVzV6tfPT9j9avnVzLurYdvyY7jrYevy/6utx7+
KqvTWw/flp2Xtx7emHnw1sN7vpl689bDawL9txesfm+9YfWr5z9b/eqZ+tXz
7Va/ev7R6lfPm7LP3bvvyGfz3PM8LvteeJ4HZt8jz3OP7HvneW6bfU89z12y
77XnuVGWA57nVYH+W6XVr56ft/q99YbVr56pXz1favWr5zKrXz0fZPWr52VZ
bnueMz9TPM+3ZdeFQL/idc9zy+y643nO6pnoed6eXdcC99F+/+0zq189t7H6
1TP1F+9XvO55PtXqV88NrX71vM3q954TyNYhnucZ2brF83xits7xPI/N1kWe
5/2zdZTn+f5s3eV5rrHny9TzikD/rZ3Vr57ftfq99YbVr56pXz1Tv3qmfvVc
bfWr51nZutrzfEq2Dvc8j8/W7Z7nA7N1vuf5oey+wPO8NbuP8DzflN13eJ47
B/pveatfPVO/eqZ+9Uz96nmQ1a+eqV8997T6vb5Qdp/oeV6a3Vd6nutn96Ge
59bZfavn+ZfsPtfzfEt2X+x5XpPdR/+/+292n+t5pn7vPsXqV8/Ur55/tfrV
M/V7v49Y/d5zL1l/xvNs/RDPs/VPPM88l6ierT/jea6250zV8/FZ/8fzPDrQ
f1tq9atnng9Uz9Qf6Bd5nqlfPVO/9ovod+ET/8uM63Nf9Ov0c8GDHsf6Y5Ee
x47vcfqEgb6rq5Pnlum/8dwyz1vCed6S55nh+jwzXJ9nhuvzzHB9nhmuzzPD
9XlmuD7PDNfnmeH6PDNcn2eG6/PMcJ5nxmdv67OpT7j6hKtPuPqEq0+4+oSr
T7j6hKtPuPqEq0+4+oSrT7g+Hw7neWA8D7R+mnqGq2e4eoarZ7h6hqtnuHqG
q2e4eoarZ7h6hqtnuHqGq2e4eh5jfTP1DFfP8OLvO8SB/UniwP4kcWB/kjiw
P0kc2J8kDuxPEgf2J4kD+5PEgf1J4sD+JHFgf5LY89zL+mPqGa6e4eoZrp7h
6hmunuHqGa6e4eoZrp7h6hmunuHqGa6e4ep5tPXB1DNcPcPVM1w9w9UzXD3D
1TNcPcPVM1w9w9UzXD3D1TNcPcPV8yjrd+G58P333Pnqn/H4L3yPPne+fi6M
53MpfI8+571Hz3g+r8L363Pe+/WM53MsfO8+5713z/jCz3eOG6+fO+P53Avf
08957+kznvlQUvAv572/z/jCecJ7/TnvvX7GM38K3/fPee/7M555VbgPQM7b
B4DxzLfC/QFy3v4AjGceFu4bkPP2DWC8rMfceJ23jJf3jNx4nc/PWp9T5y1c
5ydc5yFc5xtc5xVc5w9c5wlc5wNcP3e4fr5w/Rzh+nnB9XOBq3+4eh5r/Uz1
DFfPcPUMV89w9QxXz3D1DFfPcPUMV89w9QxXz3D1DFfPcPV8i/Ut1TNcPcPV
M1w9w9UzXD3D1TNcPcPVM1w9w9UzXD3D1TNcPcOLz+c4MJ/jwHyOA/M5Dszn
ODCf48B8jgPzOQ7M5zgwn+PAfI4D8zkOzOc4MJ/jwHyOPc/0UdUzXD3D1TNc
PcPVM1w9w9UzXD3D1TNcPcPVM1w9w9UzXD3Di+dGPpAb+UBu5AO5kQ/kRj6Q
G/lAbuQDuZEP5EY+kBv5QG7kA7mRD+RGPpAb+UBu5D3P9P10PwF4oP/m+YQH
+m+eT3ig/+b5hAf6b55PeKD/5vmEB/pvnk84PudMb/tiRZ8Vrq+4tl+d+V1/
q4nqlr329z5Vu/uW179+ZI8OmzdGTy085Mt2wxc4/vtfzz616qdvosb/WjO5
os9cx1vfMKFk5ZK1Udk1rbe0Gx47fvBHb5yzZcSiaGa7/Y8a3nS26xOOe/Kx
x8eXrU7OOKz9lU3bf+z4SXVP+iVp8XWyfFurS6oqFjs+pE3DE/+j5YZkeLcv
ujZtv7sPuWV2/5MXHVaTXPZB/zv7VK12/Oh1t3+w97Nbk31POeyJij7OQ1JW
cmPuwsY7kyPT+pe6fmDzftd3WLnkp2heuv/AJ45/fGa/P/Re+G10eXpe7zm+
pvqIT7aM+CIqTz+XCsePvqNL74OHLo72mrWu/vCmH7l+3Q1R9YGndlqf5FMP
ix2vHLC89fiyH5N7pk46p6pimeMNunU7b8jE6uTM1M9qx88f0OWzpMXWpMbe
94fzvv/WlC90/bd//D719+3l30UD0uPPc/ycWfMXDJ74ZVQ/rfMdx9/dY/4Z
LTstjV4es/qf7YZ/6vpgNW+N6taw7w9J9z3vajS86TLHm/8atWt1bnVyZJ+D
T6mqWOX41Yeetu6uyi3J6mVvtm/a/nPHB53d7J4pF+5IJqfe3nf9q72G7DPt
4KHrolvS+TzD8S4jWtfp3GBZ1CH1/5nrFw1sccnErSN+Tuqm9a9yvO9bB21q
2WlLMqdgf4k4ec72l/gw5TNdP+eHo/MLey1cHv18YPkP7YavdH2SR7ts//XH
qs3JxHs77jG86VrHp/f9YcTR3bYnI9LvxRp3v7+0/vxxVT9tS3rJff2xlleT
5X58h+VVtdx3D7O86iX316dZXtXIfXS55dVWuV/eYHn1vdzn7myX5dIGuZ89
w3Kpu9y37rRc2ij3p1daLr0q96GrLJd6yP1mXculxnJfeYbl0lzLJe6DNJfg
XS2XnrZcgu+yXDrKcgnexnLpCssl+KGWS5WWS/DnLJdOs1yCt7BcWma5BB9s
ufSk5RKcXOpsuQRvYrm0j+US/HLLpcaWS9ynHGe59L7lEny+5BJ8reXSFMsl
d/9oubSn5RI8Z7k003IJPsNy6W7LJTi5dIblEvw8ySV4b8kl7gvIpfssl9x9
iuXS/pZL8BmSS3DNJbjmEpxcWmW5BNdcYl1NLvW2XIKXWS51tFyCPyS5BNdc
gpNL71susc781nKp2nIJPtRyaZLlEvwdy6WRlkuso8gluw666/JtGyc1qp1v
0X2Fv6smm+x3Ulk/uL7QfoXHifrYceR3Urfu3a/w+ht1sXl+v/0Oy/Hr2e+w
TV/8d84MdPyiARVPTCsda+uQNe46W72z4TW152W/s69wfK79Xl8nPc5wx8tm
NG8xvXRy1C39HCe56+a4esMqL2swz/ZpSXb/7ma/m5dnnt31cXnXUzvUeo42
Z5+L469eEE2t/VyiM3lezvgWe06gf/p3xzi+9x9/vbRjg7eicel8e9ldH/tu
GHPMIUNnJ5XZfNjN/3v0tt4LlyfL7Xd8d3233/HnFeybFCeVtm/Svtk8dPzx
8X+ZUDsPo8uyeet4sueyRrXz1p5PWOT4DfY8wz/T/H/B8Z7XfXn3u6WV0fqM
u+vsA890OTgprUwyzzMcX/nVUcdf1mBZ8nL2/XL8ozfubNto6Dp7bmGR48fa
cwhrsu+pu16/0PT2U2q/p1GT7Hvt+B179X+69nsd9cxywPG23w75/aJzq6PX
stxw/KTHT5x/YN8fojX2nAZ8sT2nMT37XBzv3mn9soOGzo46Zp+jWw80ue7W
9Zc3eCspyfLK8VZXvtL11E5Lk7uyfHP8X9+dkxsy8ctkU5aHjl/b7KjhO8q/
S06z5y7gFfbcxVbbJ4r1xhDbJ+rsLIcdv6736Edrczjqn+W24yd2eKVm8MTq
aFaW847vvKrX1HFlP0b1suuC42MPGXh/y07r7bmUxPEH7HmVvtn3aPfvPrcu
/2unBvOiFel8GO7WRY+fVe/G2aWTkwnZ9cjxSXNPeqLR0MVJ++z65XiPi37d
snXEF8ms7Hq3+zjd1k+qvd4lf8yuj47/OPajtbXXR/dcCpznUsgr+tvkVVl2
XXY8+mT6gNrrcjQyu447Xlo+7+uFh9VEK7PrvuPvHfHS0ye33BCdk60THO/1
Rb5n7TohmpOtKxw/5OKpN48rWx214D0m45UFz/k8U8m6qKSkb/qcTz71OdD1
5yf2u/f3eaVjk7bZesbx5r16Dd42YlFyWLb+cfyTKQ80X7VkbfJktl5yfO5T
L8+rXS8le2brK8cbL/vfHbXrq2RWth5zPPn7Owf95bca91wNnOdqyHPWM+T5
cZbn8HaW5w3t+SX4R/b8EjnP+oGcr7Kch5Pz+1jOw/9sOX+N5Tx8tOX8YZbz
8L0l51kPaM67Pq3kPFxzHk7Oj7Gch98mOQ/XnHfrJcl51g+a83ByvrPlPDxv
Of+L5Tm8u+X5d5bn8Ecsz3OW564/aXn+quU5/GPLc3Kb9cl4y+2jLLfh5HYP
y214G8lteAvL7Tctn+HdLJ+vsXyGn2D5vIflM/wSyWf475bP1ZbP8Oskn+Fv
Sz6z7hos+Qy/VvIZrvkMJ5/3tXyGk8//ZTkMf9xyeK3lMPxpyWH4ZMvhDpbD
8Jskh+HDJIfhGyyHyVXWexdJrsI1V+Hk6rmWq3Byda7lKvwPlqunW67C51iu
vmP5CX/B8rON5Se8meQnfIHl5xOWn3DNT/iRlp+J5Sc8b/l5b+G6N9pHnjtl
3avPncL1uVO4PncK1+dO4frcKZznTnmO1K3P5TlSuD5HCvfeK+T48hwpnOs1
58s6XM8XrucL1/OF6/nCOV/OC67nBdfzcseR84Lrc8hwrpucF+t5PS+4nhdc
zwvOeVE/XOt346V+uNYPp/7CfQbiwP6ccWAfztjVWfi+fxzYZzIO7CcZu3r4
u6yf9e+6Pp79XY4P1+PDOT7HYZ3Jcdz73caL79+VC+zflQvs35UL7N+VC+zf
lQvs35UL7N+Vc/t3Fe7TlQvs05UL7NOVC+zTlQvs05UL7NOVC+zTlXP7dOGN
daN6g6s3uHqDqze4eoNrTrp1r/iBqx+4+nHHFz9w9QPHDx5Y3xZ/v2mC5wGu
HuDqAa75CS/+XtIE73zdceR84Xq+cM1P1sl6XvDi77mUe+cF1/yEa/1ufNH3
UMq9+uGan6yfi/uPA/7jSPPT8aI+44DPONL8ZH2rfxeu+QnX48M1P1k3an7C
GZ99/4dUsk7g/Rdyleup5iqcfOA4cH2PBq65B+d7zd/lOqh/F+69Pyv7dVAP
XOuBaz1wzRk437vC91ziwL7fcWB/7ziwj/fu/S6oH158X6A4sN91HNjXOg7s
X717nwrOi+ty8X1pyr3zgut5wTU34HwfOV+4ni+8+D4z5d75wvV84Zozbt1i
32s8sN5QD3D1AC++n8kEzwNccwlOPuAH7r0PaFz9wNUPvPi+JRM8P249Jrmn
/UC80b9Sb3D1BldvcPUGV29wb18j4/reHxyf8N19wkLPjFfPcPUMV89w9ezq
LLqfxkhv/ax9wgHSJ8Q/5wXX84JzXhyH9YB+jnDNf7geH67e4Jr/XMe9fSqM
6/yBa/7DtR641gPXzxGu+c/1vbif2KsTrnXCi3uLA95ir0641sk6QeuEa51w
/T7C9ToF1/rhWj9c64fr9wWu3xe3XpLcZp1TfP7kA/Mn750vvPi6Nx/p9Qte
fL7lA/MtH5hvec8DvPg6Oe95oA+mHlwfr3gfzPMAD/TBvHU1PNAH896/hgf2
6/O8wQN9M8+b60MW75t563m4XtdYJwfem3Y5/H+q0Tx6
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
ZbeDYwrl82QTX43O88lWvgZvll0Njkd25nojy9dUG7i59p3sW3CcskV2Mjiu
kS0dBd9En62yY8ExzkiuPzBfk98U/J6Kp3bALYJj1aLJ+ke5rCLJvoryS9/R
p3EI/wUZ2+AmwbGe/I7/wYM0FrlOU7y2PbcpitG+hU8KjvuU+1EuboXmItfJ
igH/zfV22VyXnAd3pM/f8JnBea3RlMq5ntmT2ynlTn/LbahsccVkH0n+wN6C
YwflWn/Nx025vr9yW6b82AH0Pz84X7c/t4nyE/4p2B8rndu03nAP+SrJ76Z8
2rjMtlb2ToGb8hLyPVJyHkN5tiw5v6E823L6lgnO58ivUU5jfLRfoJjrHrhU
cs5BubgSyfpfub5Kye8gX6UkfGFwzrBMci5IOboKyT6DYk/loeWTvMA9Kyfn
aeVTHZYct8qfUf5Y/t5y2Z3k3JT8w5qKS4P9xlrwlcF+5jGKIYP9TPlHys/c
zbXlkvNCyhnKJ5ONeB151eS8lvzMJtpLwb7TpNxnUwyovPhy5Mui4yP5dU/D
jZPXlXwn+UrKI02Kzosrv/1cdN5aObpno329SfA4+HiuHRTsTyqPqFzNIuSt
kveF/EnlbpXrfiraFxgJ3yi7mdnHkm+wILMPIf9Wfu7d9BkbnadX3vL56FhW
z7oKbpl8H/mcyrXLz1yMfFnBMZ1iO+l52TbpesXaigdnIq+X7Icor3hEsr+k
/M9xyT6M8q41kv0x5XwOTvb9lM8pn+z7KfdYLdm/Uo6obLIfpdxO7WQfUvml
usk+jHI7iktOhuvzDj/SXqM5pT422Z9RbrO4dHRwHuko6frgXFadZN9MuazS
yb6Tckr7uOcFwecLByb7nMopSfc01BrgWbsL9lEV1/RIjg2Vb1QeRXrsKPmE
yfkN5Ta7UOYG5zY/4doGwbHYBcljqLE8JNk3Vp6qSrL/qdzaucm5COWFlE+t
Lp0m+5bsfypvdl5y3Kd8aefk2Fw5q47JOQSdO5yZnMfQmYXyJ0/DC7nPn3CP
4DyY4rZmcMPo+K8p3CAfW/kOsvU9k220zjUugh8NPqPpBy8KPvd5JXN+RzkB
5QaU335G/nayH6jzmv7wU8FnRssy51mUI9Iz9Cz5PDprkn7rxLVPZ/Zl5a/K
D5Rtb5r7sHqHKfL5k9e54hf5RfJxnpAuTN5fOssYmPztOucakGz3dbb1ZsG5
AsXjbxWcB1CcrnUvO1iCuh3t8cGxz4n5OukcfR51Otw6OhbX/NaN9lWkM5cg
65Ps/+hcoG+yX6Tzl8vhecFnNCG3TSfIF0r2kXTmpbyd7Nfx1Jck+xuaw4uT
fSed6azN16fyA8oXymYdJ/8qX2PST8p5y+YeSX1Gcp5NZ17KW9SRjtVcFxyb
KPYfmezjyef9itI6OOfwE9wxOMa/KVlnSnduojQPznVszNeSciDvw/WCcz6j
8n2qvPd7BefSlds5NL9/U97hOtpvBp87KLemOazLXP+Qj7NyEV9rfQXnPa5K
1r36RuX75Z9Ujz5zkC9XibpXPu8at8r5tc2Qr8q/XfmcNQXHm8o76UxMtqMX
fa5Ozunp3EHnHvKBqyk+ov1M8NnEpcn5PZ1H9E7Ojeg8YnXBuSnltT7P95Ry
RG0pU4LPYRsk5yt09tcwObegM8pmyfGXzvXqJ8eYOtdbWXDOSrmdRsnxo84Q
dV6qPTgv+uxR+2s+3Dw5ptN5onL88qmO1hqhPTb4nLRpchync9IWyTGjzihX
FJxPU47rtOQYVmed7SnjgvMMOjOUzb0kOsegPTISHpSct9RZ0qnJManOTzfk
elv5rjbJ8bjOW1snx+M6P/0/3mLPsA==
          "]], Polygon3DBox[CompressedData["
1:eJwtmmW4HMUWRaerbnANFjwEd3cL7g4Ph+AQ3CG4u7sHd3d3dx7u7u724K31
7fpR6V63J/fOdFeds/eumWLTHVffofR6ve34p4/jCPyzGMf5u17vbc6fr73e
8fBh8OXwWozH4Pvgmfv1er9yfRp4cvgZrj0OHwLvA1/ga+GD4WHw+fBv8LTw
QPhZ+Hd4OngK+Dn4afgI+AD4YvhOeCd4K/gE+C54F3gofBL8AzwAHg1+HP4e
ngAeBX4MHouxCrwM/CnnEzD+A68Cf8P5s7z+WPgQ+FKv+Rng++FZ+HzPcP0Y
+GD4Eq6N7z2AV4a/5vxuru8KbwufDK/NeAJ+AJ6V//8c14+DD4Uv49oAXwOv
Cn/L+RiMleCl4I85/4bXjwX/yXgYHoWxNOeLcv19zr/l+tjw34xHfGCMeTnM
xvVXOR+VsQw8GP6A89EYy8KLwR9y3sdYFJ4XfpPzv/h9s8HTwS/Cf8Ozw9PD
L8H/wvPAs8KvwP0Zq8HLwZ9zPh5jTXgl+CvOx2WsAa8If8l5YSwMzw2/znnH
mA+eHX6N88pYBJ4HfoPzsRmrwsvCn3F+M39/G3gT+Ci4H2MwPB/8FucjM5aC
F4Hf4/wpXn84vD98ETw5Ywi8DvwL55MxNobXhn/m/Elefxi8H3wh/AJ8Mnw0
fCU8IWMdeDX4O58t1w+F94WHwy/Cp8DHwFfBYzJWhpeGP+F8UsZG8H/gnzif
mLEBvCb8g/eG/3+A11l/V8D/hU+Dj+P6NfDojBXhJeGPOH+Z66fDx8PXwiMx
loQXht/lfBLGhvBa8I+cv8TrT4WPha+GJ2KsD68Bf8/5P1yfG54Ffhm+sWR+
vQHPz/z9g+uzwNPAz/u32v3dqOTvf1zy90fj+F/4g5L6MVLJ/Pm0ZP6OUTJ/
3il53v1Kft8S7f5vWPJ53y95viOWzMf3SubrCBxfgD8ped6jl7zfOzmODH/I
+9vK9QiPCn8MbwPf0ura2/BmnNwK87F678Cbt89r/XsT3sT5BvCWem/Bm8K3
wSPA78JbWH/gUeCP4K3he+DR4E/gofC98Ojwp/C28Gcl63HMkvX5fcn8nqBk
/v5Qsp4GlNTbV0qex//4/0/DP5Wsp4k5vuN85M3tbH2Gf4d/ZazLa9dj/Mb5
dFwf5nr3Q/FBXy1Zv/+0+vxXyfybsmQ+/VyyficpmT+vl6xPb4r1+LWS+vJv
q9cvltSH3+Gn4K9L6te4Jev7u5J6O35Jffm2ZD2MV7K+H+TYH/6C/78d/HlJ
fRqrpB48UdIPvm/1/PGSfvFdq+cvlNSr3+An4efgWeFf4Sfg/5XM/6lK6unD
HMeFv+L6Dq4HeErrK7wnPCf3a3frV8n6nwvew/peUj/mgHeznpWs9/nhfeDV
S/rBbK0fLV/S3+aG97S/lPSvBeB9XW8l/WX21i9WKOmPI8HrWg9L6pv3Y354
bI4HwV9yXBAeh+Mh8O8cl7Nfcjwc/oPj8vAgjke0+bQ4PCHHQ9t6nAMemeP+
8Icc57Q/cjwA/oLjAnB/jgfDb3GcybbCcT/4TY4zwpXjvvBirb+vX1LvFm/1
cIOS+jK49fv1SurnUxwnhn/ifu/anu+E8A/wzvBD8Djwl/D28CPwePDX8I7w
0/Ak8M/wbtZreCL4R3gX6yU8FfwXvBf8DDwp/Au8u/WJ9/MS/BT8oPcXfgS+
B56xX+b79HDHcRjXZ+b6jtZv+Fx4IXh/62mJ/lkQ3s/6XdLPXQ+D4D/4fXvA
M3F9B3gpfn4OPCO8vfUbPhueAd4OXgI+C36D4wwuN477tPW7Lbw4fCb8Z838
nrZL/fP5248GlvTzX0r0yKQl/W95axZ8Ha+fgs+3DHwDfCU8GbysNQ++Cp4c
XskaCt8ITwXPB58BnwCPCS9nzYSvhQfCa8APwHfCM8Brwo/C98IzwatYE+Fb
4WngFeE74BvgKeG9+Tx3wyfzfh/w8zK27qW//+v970v92gXu4/VTw1vYb+C/
OZ+GsSW8Mfw/zqdlbAUPgf/hfAXG7fD18CD+/4x9qZfqxQLPBO8N7wxXeFVr
NnwbPC28GnwffDs8Hbw6fD98Bzw9PBW8uf0K/ovzKRmbOf/hPzkfxNjU9QH/
YX3l807hemz18kd4cut/q1eLMi6Dz4fH5/cPhDfppaZb23/i9QPtD63eDWZc
Dl8AT8DrF4OvgIfDA+DF4SvhC+EJ4SXha+HL4InhpeDr4MvhSeCl4evhK+BJ
4enhofCmXfrHQvD5nJ4BjwPPD58JnwiPBS8MXwCfCY8LLwIPh8+Cx4MXgM+C
T4LH7pd65/OerURPzck4uhd9PQrX54ZPgI+ER4NLzf2cgdd/wbXHSvzGt1x/
1HvN9Uvgffn53d47+GJ4H/gueAh8ETwMvhOuNc9rxhJ9uhN8E3w0fB+8DXy1
7we+x7kD3wwfA98P99U8/5lK9G5X87ymK9HDv5b4i8lK9PpvJXp/8hI9/k+J
Hpy6RB/+W6JHpynxJ4qPIa73Ev3br2b+z1ziN0asme+zlviHEWrWwywlfmaF
5jc2h2+Al2v+ZVP4OutD8zubwdfDB8IPwWeX1MeX9AFqYfufvZafHdSLfxuR
5zE7fCR8IDwSPKu/A94bHgG+o9XPLeHjuTYv46Re9PQYXJ8DPgo+CB4Zvr9k
fn/Wxe+oD1wvn3fxN3eU+Ln34Yfgdfn951gf+Plt8GpNf28L3wyv2vT7UPgm
eB7GifBR/P/R+Xvrcf1ceFeu3861NZre3h6+FV696WX98C2uJeus/cka5j30
OXP+hTWG81maP12G8/Nca+017/Oz47l2W6v/m/P3j+1Lz12gS4/+sPVkvbaa
+YPWA+boogHeaD13zi49+s3Wk+fqogneappgiS4aQK1wHH/vPdc35/P2i4bQ
+6mxPm89fvEuGuKLphH0cmpQtcMx/P93OL+U87n7RWPofew5v7ceqXdTI9o7
1cBjdOnpamM18z+9aDy1tJpar6qnUGurycfq0sPV6mryXhcNoFa/tfXHzfjZ
MX3R6KWLhlO7q8H7umgEtfkHXby+c+SOpoFW76Kp1EZf1Tw/n6N+Ro1lr7EG
WYucLxdyvk3J/Nywpj7uUVLvFq2ZP+uUzG/1jfN53ZL1sFFN/dyzpP5tXNNv
9yqpf/vDz1s/S/rHfvBz8Okl/WVf+Fn4tJL+cwD8gvW0pL8uUlMP14b72V9r
6uvWJfN53pr1tGpJP1u6pj5vXLI+j4bfhi+B57Lf19TzLeFR4ZVr6vdWJfV2
g5p+sTvcH16rpt8YEqkH1q7pNzuW1P9la+r7kJL1bL05G96kpJ6vU9OPdiqp
/+pn6/1qJf19H/gZ+NQSveCace1cAc8HP82z+hr+lHFOe0+nd/kMvtep4Vu6
aI5h8ALw1U0D3qdWhC/t8pm2rVmje3bx3K5dPffhXTIuvfiN8GnwefCKPnv1
SZc1PgF8ZF96szXf2u+ccm6VNr/1bJN16VF6uTm4/rBezp5W08NW6OLp7G3e
A7WOnsJ74zNUm6iBfLbOOWurNdi5eJg1HF4d/pHf33F9my4aZ9aaZ3pElznj
s9YT6g3toQNqPKM/81wv6Zzaq0sNd66pia8pud9qZT1t/y4aXq+rx5+5i0fV
+98BXwJfA69vb2G8y/llXJunXzT7VF08hFpezT6oi+ZWy+vBZujiUfRmavgZ
u3gUtb2a2ixKz6nWHo/zr/zbjKtKPPa4XTyC3lvNP3UXD6MX0PNN3MXz6QX1
0At1ySz01nqOibpoeL2IHmXKLpr8qaZRH1K79aJd1RwjtXqjFrkXvrmLph1a
06NGsDe2evRhq7/LtfqpBhjc6rHaQI8zSRcPo/fRE5mF6oGfaBrC7M8MQW2h
Z1ZL2iPtlXvW5I0nlOhr14Bz7ZSStTF7v7x/56Bz0Z5sb9ajjGOWBO/YxfNO
WeN5zc7MZPTCx8FbdOlhY9sr4R26eOYpamq0tVrPMqq9E96+i2eevCazNbtV
E4xX0wPthdb4MWs8t9nbob14cTPdoW0+Oz/13GZtek69uJ7abNgMSq+th9q1
rR+9lZ5tjy6eTS+nB9u9i2fTm+nBduviyfVmeqxd2nrTe52hJuzi4aeu8exm
w2oovbyeX616dFuvev5hbX2aBejpzb4P7sXrm7mYjZthmMWcAm/XJQOYtMZD
mg2ryfSWemqzRDWMXlsPrXay59h71CjnddG8ahc13cldaq61V013SheNpNZT
E53TRQOrldREZ3fpefY+NeKpXTSR2lHNc24XDa0W0tObHaqx9Ppm3GbdZh4T
12SAZpFqKLPBg0q8pJ5ya3jnEi9iD7AX7F3iRe2R9ko9tXsLala9tpruIviq
XrSeGu3iLppc7aaG17vqYdX2avSb4Lt60e56gGu6aHa9gR7g6i4aX29gxmi2
qsYzezTTGtjWm1nXc239WZ/UN0+19Tao1Z9da/zusSV+2J5i7zm09Zrda/ZH
jivx39vV+MvDSvyXfuNB+KgS/71jjZ8+ssSfH90X76UHG13tWONHDy/xazvU
+NEjSvza5jV+f78S/2gGYBZu5mo2sFWN/z6gxB/6THw2B5b4Q3vSm71ofevD
IfAr8Lklfv4o+C34YnhOewv8Bjwcnk19CL8OX1Cy33EY/Bp8fsn+yR41+ynH
l/jxveAn4RNL8oZD4Vfh80r2k7as8e/7l/hb9d3IXTJes149gnsj6km9wyNN
X/Zv9dCM0b0EM2OzRzNI9zoG95JNmrm6d7BYL1msGfN0rb+YPZtJm3WbuZhV
mzmqL91jMos0kxyt6V3rs558QKvHZpN6er39wF6yybebvl+8F31tRupeiBm4
2amZq9m9mbZZ7Eut39kP9QN6zru7eDS9qB71ri5zyLl0Eq95sMs99d7q4cy6
XuzF26lRh7V6ZP04y/fcRWOqNV9rel6/oT8wYzJrMmM1ezezd+/HDNgs38zd
vQIzZbN4M233nvQDZt1mLENbfbAebtXu14D2/JwDZjPOSefGllwfER4fvr1p
QLMj14zaUI1sFuOcVztfUnNvvEdqAzWz2Y1rZN92P25q/dh+fRljrl40hdri
Zfsi/De8d1/eo7V7ufbeL63RHmoStclFNVpCDaOWObFmrjnn9DYb9+Veek/V
q2fVaE81idpEDTpGL1pFbXox12fuRaOoVdT4d7bn6fPQP/r8zCy/rPmdT7bn
qTZevy96+dEuev6kGu+k59J7XVBTu6xhagkzKLOozfjZRFxbpy9zxTnj+r2l
pndbc6w9p9XMbZ+Zz849M/fONuFn41v/a7yYnk3v9k6N9rNGW6vfrqnV1nBr
+YU12k9NpbY6o0ZL6gH1gqfXeEE9pF7y3BqtpiZTm51TU3utwWqf4TXaTA2p
llTzHggv27TweTVaSs2n9ju/5nmrsdRaj5bMtW/gneBra7SZGk2vvF5f9NMj
Xerdhn3xa4930bMb9cXPPdHFX+v5zL6G9+IFz6zRompmtbM11dpqnqIW0xOe
1fqv/c8aZ5anp7L26TnN2vRkelFr9IWtH1q7reHDWz+1ttszrmz90F7ie/a9
O0es3dbkB1p9sFZbY927tyZbe+1RZsXWXHuXPc2s155ir7OGuxeuxrS2O2ec
O+rhI1o/P7vpC/vxun25pub089qTzDb1kPYqe95VrR/v1PTCRa2/27/taVc0
fWCvO5DftyC8BPxRiSfRm3zG+ILzExjf9JLJuF7OrvEGn/gazjfoi79+rEue
4TN7otU/s5Kb+J0f9ZIRfFKzRl2r/o5PazT1DU3PqLWtGTN1qSnWEufQpF3m
2KOtx5u1miHY++3ZZq1mBPZy34PvxTll1mJmbHa8uXO01ee7Wr23frvGXet+
Br28GYJZ9AO9ZAvOSeemc1LvZU+9sekh+4E93GxeTWJvt8aOaG3vUnvdA3cv
fIg1Sz1W0wvsCWY9enj1rvpXfXlDjfc0MzI70vOb5amHzQLMHMwGzSTMIswU
zHLNUMwarql5lmZgZmFmGGZz6luzja79/ulLvLYZtLXJGqU+d8/avWv3MEep
8cD+volKvPGrNVpWDawWNmM2vzIPMu8xI/W7H2ayZqcf1PQKe4Za0kzV72aY
d5m1mnGYdZtxmH2YYZhlq7fVs2ZG6nP1unr6vhovpUfSK91b45X0RHqjR2q8
iZ5Eb3JPjVfSE+gNroIX6iXjM+u7sibrMwM0C7y9xrvpyfRmj9ZkGXoevc8V
NVmhGaJZ4v01XkaPp9czw3Fvx4zIbOeVGq+gh9BLPADv1YsH0gs9WOOt9Eh6
pYdqvJOeS+9lJu13Ycy8zaofrvFaeiy91tU12kcNZNbpdx787oN7tGO4/hjr
9ZLZmd0Nbf3kkOat3fNx78eMeyDXrqvJOs0wzTLfqPEqehy9zus1tciapNe5
sebZOwfMMv0Oht/FMHPvz7W3GJf24qn0Vu7puLezBT+brGaPyb0mM/dBNXtM
7jWZH05Vk3mYFe3WspBTa/qLGaVZpRmS2dIWJdmSfsh77T3X35xSk2WacZp1
+p0Nv7vhHsFYXHu3plZaM/U+7pGZX/qdmGm4dj1jhV4yYLPgN2u8oR5OL2fN
tFaNWlJL36vxRnoivdFHPrNeNKZa88Oa2mMNUmv6HQG/e+Iev98deJ/rt/Ti
sfRa7rH73SX3+N17d0/E7wK5J+leiXssfhfI7xi49+Ieh9/F8jsQ7n281u6f
HlQv6h6KtcUaYC1wj8Tv0vidAvdO3BPxu0Hm1e6VmFe5l6snG8K1/wPYLr2e

          "]], Polygon3DBox[CompressedData["
1:eJwt13n8VWMaAPDbvfdXiHZKJCRLobRr166VVlpptbSgxdZmKhVFoyJUmEIz
tjEhY0mjDW1IJQpjHXtKpVLN9/m8/fF8nvf5nufc3/2d8573vPes/iM6D89m
MpmPRYH4Wy6T+b1QJlNGVFCvd7BrPpOZL69nH7G/6LmSPcjWsA1sLHtWnMCq
slrsK+MF7Ed1VpzMVrF/slPl+qw52238DDtersJqsi+NX2Cl5VqsIfvRuLO/
+5C8lm1k4/R0YfPYO2wTG8+eEyVZDVaffW/8PCsl12QN2A/GC9lP6rw4ha1m
F/i8y+Sb2e3sAj1PiD3qUuJ0ts7xS/WNkB9jT7NuepqzyewltlS8qW4hprCX
1W/ou1FfAzaaPckWi1fVTcQ49pz6ZX2D9DVit7Kn2fOsD2vMbmNL2AusLztN
lBeVHGvg2APyqepy4mzj+uyv8sWih/FU594tlqgbijHsKfVzPq+3c5qxiXGv
4ruxIewyNiHuC1vGBrOmbHxcW/YKG8jqsOvYPPYY68hqsyHsIbaQdWC12GD2
IJsrXlTXFdezh9WP6+ukrya7Nr4/e5i1YdXZ1Ww6m8WasBrsGjaLzWOtWH12
E3s8/lfWg1UQp4tz4n93bLZcT8SDsFDfU/q6O34J68fuZw+x1qwau4pNY/ez
xmyR2BvzR5zBNjhekZ0hKutvpJ4jn6wuIyrG/xmfKz+lPhRzSlR27kdxr1kh
+WxWhW03bqN3uvxvtoKN0PN3kWPnsAvZp8at9E2Vl7HlbJieJSLLKrGq7BPj
xeyAuryoxD5k/2B5uTK7iO2Iuc1+UxeLXvZuXEu2W11CnMbei3nMDkYtzmGb
2UnsxJiXvlMN9T1yVXG58e36JuqrFtco7oU437GmMUfkkuoSca+Ma7OZcnF1
sbh3xrXYDLlorDkx/41rsnvl0vGcx/U3rsPuk89SnynONW7M5sqV4tkQ58Wz
F/NQvkhcaXyX7zfd96vreHe2kG1kW9lkdha7lF3Pros5qK4i2rDb1LeKBeoL
xRVsonqac+s5tyW7m70S6wMbyrqxBWwD28ImsXdEezaMjWY11Z30zWGr2Dp2
B/tF/E9dTpzJ3nL8Z/aduqyoyFawN3Jpvh/Kp7kZc3R5Ll2Pw/l0LeKa/Ci2
O++g80qIb+KdIP5g54vq7H3nvJVL1+1IPt2/uI97xH4954lq+jY6/mYuPQN/
5tM9iHvxYmTWTF9bfQdifcyle/hbPt3nuN97xeGYjzHHYz12bB87YnyxqO3c
LXEtc2lO7M6neRPzZ7fYp+fc6NW3yfF/xT2Xm7N27KDx67m0Zh7Mp3Uh1odX
c2nu/J5Pz2w8u8fFcdbeuV2cu8f4eFZB7sC6st+NT4jrK3dk3dhe42JxjeJd
ynqzQ8bFWWW5G+vDDmfTvKon75P3iz/Ea7m0fh/IpzU+1vqixhVZJ+d2d+6+
eN5iTstdWC/2p/FPer9QHyeKiMF6luXSM7Unn56TeF72i6Nxz0Qd5251/A+W
kauzuobbYv3JpbVrr3NPMS4bz3jcV3aFvh769huXZhfIbeM6i+/Vu/T+GvMx
7om+NXGv2a6YtzFn2Fq2Lua5fBO7jdVRfyh6s3FsCmuu/ljcEM88m82uVG+K
Z4mNYRNYI/VG0ZWNZuNZQ/V7oiMbEc8qq63eILqwUWwca5BLe53Y8zzKnxXX
+D9Ws1bGQ/Td5NjF6rdFczaQDWNV1WtEW3YjG8kuUb8verI72SR2mXqlaMEG
seHsQvWqWCfYYDaCXaR+V3Rgw9kYViuuZzz/8d4RFeL7+H7rWWd9I9Vj9dVX
fyKGxjoa71rWRb0il9bbo845N9ZBsVRcwjrr66nv+FyaQ5+rC0Rh8Xa8e8UT
+j5Qb9c3Vc9LubTO78qnNbnosfkR8+TMY/M61snt6htj/XbuHOd2Vv9HNGMD
2FBWRb1NDGRT2H2svfpTMSzWdPYg6xr3R/RlE9hU1lK9WfRh42Ofw1qoPxC9
2Fg2mTVTbxH92SQ2g7VVbxUD2GQ2k7VTl4hrxLqzvuyIcdnYT8l92aDYP+sr
x6qxfvGsscKsH1vCPmafs5kxl9mTbAvbwe6J7xv7AbaV7WT3xv/Fnmbb2Gds
BpsjPlPn4plmy2JvFNdGfVjtlMxLrLXBNPlV/hYbrmdWzAX1IXU83ksdf8Bg
Bzt67DfAy+xr9kisjXwlu0u9VrRjQ9koViOX9ruTsmkPG3vZ8j7gcNz7bFqv
Y93eHHtRUT2eH/UQ5xbRM1vsVBeKecVeiTVT3wPZtHeOPXRln/eovu+Nj+gp
Ld52/GH2LSsdexO2PNZl594f7yW2lo2J54/NjHcQW81Gsh7sMbaJbWNT2OVs
Rrwj2So2Kpe+y2y2Mua8WKFuJ+5jy9Vr9I3WN1/8oM6IMtLKeB/omyWvYO+w
W+O5Z4vYZvYJm8bmii/VRcUJ7LXYh7Cv1CeFs9djT8S+VhcXJ7I32Dz2jbpk
9LI3WS9/Y7H8EfuUTddzFXucvV8o/c67Oz5f3BtrWlxndku8J8RYtiDuJRsQ
80zcwR5li9i1cc/ESDaHLWC91IdEEVaXNWGfx/s+3plyPdaUfRHvWFZYrsMa
s53GBb5f2ZivrBP71XiHvlvk2Ww+66k+IApYbdaIfWZc2Lnl5DbsCrbLuBQ7
X76KXZNJE70kO4/1YP3QUeNTYr8n92ED47nRd3Ls2VhvNiBOZWVi3xrXlvWP
V2Iuvd+qsJ7sajFNXUSclk3vu3jvTcmnZ+FE1lDdQExkR9hJrJG6hc/7OtZg
VkxuzFrGniub9j5/HlvXY31fl0+/37pn0/4y9pkFBekd8POx93u851fr+ZLd
o+8Z9VKfd3Os4eJONp8tZv3V/413HFvEnmU35NJv01HZ9JssfpuVKkj/W/ls
+h/if9mZT7/fBmXT78j4PVlUXy5+57CW6g4+7yfjfOwV5FasI/sl9gpsrrya
rWd35tLCVZw1Ya2U3xo/kku/qeK31TPqb9WFYo9n3JS1duw742zs0+QWrD37
OZv2462zaX8e+/RCvt//Ae+H9SU=
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvRFEYgOFrX8cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
MvY1ImJr7Gt4TqJ45zmZezLnO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xhtd817aeda9lA+1w
hXGucpdr3AszcZ8bPOAmt3QYfodH3OEx4zzhLk+5xzPu85zT7nHDD13oJdxR
Y2bb4hAX2cc5dnCSzRxnHUdYxQGWsVRd1hls5aczGnjHGh6zItyLRby274pv
ytVT2KtCM+awgDHmMzvsYRZjzGQWM8J5TGcqU5RmncTU8B+H7/irZP2EZ/qS
MaIZH7f/78MfvadK6Q==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 997, 1003, 1337, 689, 1121, 912, 691, 1122, 913, 692, 
       1123, 914, 693, 1124, 915, 694, 1125, 916, 695, 1126, 1004, 1218, 696, 
       481, 697, 1127, 917, 698, 1128, 918, 699, 1129, 919, 700, 1130, 920, 
       701, 1131, 921, 702, 1338, 998, 922, 999}], 
      Line3DBox[{704, 1005, 1219, 703, 1006, 1220, 705, 1132, 923, 706, 1133, 
       924, 707, 1134, 925, 708, 1135, 926, 709, 1136, 1007, 1221, 710, 1008, 
       1222, 711, 1009, 1223, 712, 1137, 927, 713, 1138, 928, 714, 1139, 929, 
       715, 1140, 930, 716, 1141, 931, 717}], 
      Line3DBox[{719, 1010, 1224, 718, 1011, 1225, 720, 1012, 1226, 721, 1142,
        932, 722, 1143, 933, 723, 1144, 934, 724, 1145, 1013, 1227, 725, 1014,
        1228, 726, 1015, 1229, 727, 1016, 1230, 728, 1146, 935, 729, 1147, 
       936, 730, 1148, 937, 731, 1149, 938, 732}], 
      Line3DBox[{734, 1017, 1231, 733, 1018, 1232, 735, 1019, 1233, 736, 1020,
        1234, 737, 1150, 939, 738, 1151, 940, 739, 1152, 1021, 1235, 740, 
       1022, 1236, 741, 1023, 1237, 742, 1024, 1238, 743, 1025, 1239, 744, 
       1153, 941, 745, 1154, 942, 746, 1155, 943, 747}], 
      Line3DBox[{749, 1026, 1240, 748, 1027, 1241, 750, 1028, 1242, 751, 1029,
        1243, 752, 1030, 1244, 753, 1156, 944, 754, 1157, 1031, 1245, 755, 
       1032, 1246, 756, 1033, 1247, 757, 1034, 1248, 758, 1035, 1249, 759, 
       1036, 1250, 760, 1158, 945, 761, 1159, 946, 762}], 
      Line3DBox[{764, 1037, 1251, 763, 1038, 1252, 765, 1039, 1253, 766, 1040,
        1254, 767, 1041, 1255, 768, 1042, 1256, 769, 1160, 1043, 1257, 770, 
       1044, 1258, 771, 1045, 1259, 772, 1046, 1260, 773, 1047, 1261, 774, 
       1048, 1262, 775, 1049, 1263, 776, 1161, 947, 777}], 
      Line3DBox[{781, 1162, 948, 779, 1163, 949, 783, 1164, 950, 785, 1165, 
       951, 787, 1166, 952, 789, 1167, 953, 791, 1168, 1057, 1272, 793, 1169, 
       954, 795, 1170, 955, 797, 1171, 956, 799, 1172, 957, 801, 1173, 958, 
       803, 1174, 959, 805, 1175, 960, 807}], 
      Line3DBox[{806, 1279, 1064, 804, 1278, 1063, 802, 1277, 1062, 800, 1276,
        1061, 798, 1275, 1060, 796, 1274, 1059, 794, 1273, 1058, 792, 1271, 
       1270, 1056, 790, 1269, 1055, 788, 1268, 1054, 786, 1267, 1053, 784, 
       1266, 1052, 782, 1265, 1051, 778, 1264, 1050, 780}], 
      Line3DBox[{809, 1065, 1280, 808, 1176, 961, 810, 1177, 962, 811, 1178, 
       963, 812, 1179, 964, 813, 1180, 965, 814, 1181, 1066, 1281, 815, 1067, 
       1282, 816, 1182, 966, 817, 1183, 967, 818, 1184, 968, 819, 1185, 969, 
       820, 1186, 970, 821, 1187, 971, 822}], 
      Line3DBox[{824, 1068, 1283, 823, 1069, 1284, 825, 1188, 972, 826, 1189, 
       973, 827, 1190, 974, 828, 1191, 975, 829, 1192, 1070, 1285, 830, 1071, 
       1286, 831, 1072, 1287, 832, 1193, 976, 833, 1194, 977, 834, 1195, 978, 
       835, 1196, 979, 836, 1197, 980, 837}], 
      Line3DBox[{839, 1073, 1288, 838, 1074, 1289, 840, 1075, 1290, 841, 1198,
        981, 842, 1199, 982, 843, 1200, 983, 844, 1201, 1076, 1291, 845, 1077,
        1292, 846, 1078, 1293, 847, 1079, 1294, 848, 1202, 984, 849, 1203, 
       985, 850, 1204, 986, 851, 1205, 987, 852}], 
      Line3DBox[{854, 1080, 1295, 853, 1081, 1296, 855, 1082, 1297, 856, 625, 
       857, 1206, 988, 858, 1207, 989, 859, 1208, 1083, 1298, 860, 1084, 1299,
        861, 1085, 1300, 862, 1086, 1301, 863, 633, 864, 1209, 990, 865, 1210,
        991, 866, 1211, 992, 867}], 
      Line3DBox[{869, 1087, 1302, 868, 1088, 1303, 870, 1089, 1304, 871, 1090,
        1305, 872, 641, 873, 1212, 993, 874, 1213, 1091, 1306, 875, 1092, 
       1307, 876, 1093, 1308, 877, 1094, 1309, 878, 1095, 1310, 879, 1096, 
       1311, 880, 1214, 994, 881, 1215, 995, 882}], 
      Line3DBox[{884, 1097, 1312, 883, 1098, 1313, 885, 1099, 1314, 886, 1100,
        1315, 887, 1101, 1316, 888, 657, 889, 1216, 1102, 1317, 890, 1103, 
       1318, 891, 1104, 1319, 892, 1105, 1320, 893, 1106, 1321, 894, 1107, 
       1322, 895, 665, 896, 1217, 996, 897}], 
      Line3DBox[{911, 1002, 685, 910, 1336, 1119, 909, 1335, 1118, 908, 1334, 
       1117, 907, 1333, 1116, 906, 1332, 1115, 905, 1331, 1114, 904, 1330, 
       1329, 1113, 903, 1328, 1112, 902, 1327, 1111, 901, 1326, 1110, 900, 
       1325, 1109, 899, 1324, 1108, 898, 1120, 1323, 1000, 1001}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1121, 252, 1220, 488, 280, 1225, 503, 295, 1232, 
       518, 310, 1241, 533, 325, 1252, 548, 340, 1265, 563, 1163, 355, 578, 
       1176, 370, 1284, 593, 385, 1289, 608, 400, 1296, 623, 415, 1303, 638, 
       430, 1313, 653, 445, 1324, 668, 460}], 
      Line3DBox[{253, 475, 1122, 254, 489, 1132, 281, 1226, 504, 296, 1233, 
       519, 311, 1242, 534, 326, 1253, 549, 341, 1266, 564, 1164, 356, 579, 
       1177, 371, 594, 1188, 386, 1290, 609, 401, 1297, 624, 416, 1304, 639, 
       431, 1314, 654, 446, 1325, 669, 461}], 
      Line3DBox[{255, 476, 1123, 256, 490, 1133, 282, 505, 1142, 297, 1234, 
       520, 312, 1243, 535, 327, 1254, 550, 342, 1267, 565, 1165, 357, 580, 
       1178, 372, 595, 1189, 387, 610, 1198, 402, 625, 417, 1305, 640, 432, 
       1315, 655, 447, 1326, 670, 462}], 
      Line3DBox[{257, 477, 1124, 258, 491, 1134, 283, 506, 1143, 298, 521, 
       1150, 313, 1244, 536, 328, 1255, 551, 343, 1268, 566, 1166, 358, 581, 
       1179, 373, 596, 1190, 388, 611, 1199, 403, 626, 1206, 418, 641, 433, 
       1316, 656, 448, 1327, 671, 463}], 
      Line3DBox[{259, 478, 1125, 260, 492, 1135, 284, 507, 1144, 299, 522, 
       1151, 314, 537, 1156, 329, 1256, 552, 344, 1269, 567, 1167, 359, 582, 
       1180, 374, 597, 1191, 389, 612, 1200, 404, 627, 1207, 419, 642, 1212, 
       434, 657, 449, 1328, 672, 464}], 
      Line3DBox[{261, 479, 1126, 263, 493, 1136, 285, 508, 1145, 300, 523, 
       1152, 315, 538, 1157, 330, 553, 1160, 345, 1270, 568, 1168, 360, 583, 
       1181, 375, 598, 1192, 390, 613, 1201, 405, 628, 1208, 420, 643, 1213, 
       435, 658, 1216, 450, 1329, 673, 465}], 
      Line3DBox[{265, 481, 266, 1222, 495, 287, 1228, 510, 302, 1236, 525, 
       317, 1246, 540, 332, 1258, 555, 347, 1273, 570, 1169, 362, 1282, 585, 
       377, 1286, 600, 392, 1292, 615, 407, 1299, 630, 422, 1307, 645, 437, 
       1318, 660, 452, 1331, 675, 467}], 
      Line3DBox[{267, 482, 1127, 268, 1223, 496, 288, 1229, 511, 303, 1237, 
       526, 318, 1247, 541, 333, 1259, 556, 348, 1274, 571, 1170, 363, 586, 
       1182, 378, 1287, 601, 393, 1293, 616, 408, 1300, 631, 423, 1308, 646, 
       438, 1319, 661, 453, 1332, 676, 468}], 
      Line3DBox[{269, 483, 1128, 270, 497, 1137, 289, 1230, 512, 304, 1238, 
       527, 319, 1248, 542, 334, 1260, 557, 349, 1275, 572, 1171, 364, 587, 
       1183, 379, 602, 1193, 394, 1294, 617, 409, 1301, 632, 424, 1309, 647, 
       439, 1320, 662, 454, 1333, 677, 469}], 
      Line3DBox[{271, 484, 1129, 272, 498, 1138, 290, 513, 1146, 305, 1239, 
       528, 320, 1249, 543, 335, 1261, 558, 350, 1276, 573, 1172, 365, 588, 
       1184, 380, 603, 1194, 395, 618, 1202, 410, 633, 425, 1310, 648, 440, 
       1321, 663, 455, 1334, 678, 470}], 
      Line3DBox[{273, 485, 1130, 274, 499, 1139, 291, 514, 1147, 306, 529, 
       1153, 321, 1250, 544, 336, 1262, 559, 351, 1277, 574, 1173, 366, 589, 
       1185, 381, 604, 1195, 396, 619, 1203, 411, 634, 1209, 426, 1311, 649, 
       441, 1322, 664, 456, 1335, 679, 471}], 
      Line3DBox[{275, 486, 1131, 276, 500, 1140, 292, 515, 1148, 307, 530, 
       1154, 322, 545, 1158, 337, 1263, 560, 352, 1278, 575, 1174, 367, 590, 
       1186, 382, 605, 1196, 397, 620, 1204, 412, 635, 1210, 427, 650, 1214, 
       442, 665, 457, 1336, 680, 472}], 
      Line3DBox[{277, 682, 1338, 683, 278, 501, 1141, 293, 516, 1149, 308, 
       531, 1155, 323, 546, 1159, 338, 561, 1161, 353, 1279, 576, 1175, 368, 
       591, 1187, 383, 606, 1197, 398, 621, 1205, 413, 636, 1211, 428, 651, 
       1215, 443, 666, 1217, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1323, 444, 652, 1312, 429, 637, 1302, 414, 
       622, 1295, 399, 607, 1288, 384, 592, 1283, 369, 577, 1280, 354, 1162, 
       562, 1264, 339, 547, 1251, 324, 532, 1240, 309, 517, 1231, 294, 502, 
       1224, 279, 487, 1219, 250, 473, 1337, 681, 688}], 
      Line3DBox[{466, 674, 1330, 451, 659, 1317, 436, 644, 1306, 421, 629, 
       1298, 406, 614, 1291, 391, 599, 1285, 376, 584, 1281, 361, 569, 1272, 
       1271, 346, 554, 1257, 331, 539, 1245, 316, 524, 1235, 301, 509, 1227, 
       286, 494, 1221, 264, 480, 1218, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJztnF1IFFEUxwfNIKFCV/sutA+zzF0po5L8gEjBrKC3giiCJIVICIQekkwt
guihDHoRV0MoWiIhiEp7yFJCQ7CXVcN8iR5EITGViqhmR/EMnusemdmd1b8v
wp/L3XN+99z/zN45s8nnLp04H6VpWlaMpkX/+1+SkDm49+JIrhb4u/a69Ko7
v+dTbn72xJeZ+o3fo57/Ojfe/yiR6A179ivHNwxsJbq7u0+pHyjYRvTxIr+u
11zZRfQfG3zKeKR5ScdLdXAGZ3AGZ3AGZ3AGZ3AGZ3AGZ3AGZ3AGZ3AGZ3AO
PWenrZfd8zttvNPylepp/j8z59eOFb7zzLJfNM/s+2had8clE/1I6qhSl86f
c9ZN9OIyr1I3z8P4wLT+fIjq3ypm9Qdtyh+k4w/eS6N6Y7NSX3J6PdEn0hM9
Kr2uKYroGd99St3kY1qj4WOc3npoI9EvVC5T6isvLyW668F9pV5K61NrMeqT
06V1K61DaV1ZVQ/S9ZWul5Q/OIMzOIMzOIMzOIMzOIMzOIMzOIMzONvHuYCe
+2k3jXM/cJ4fZ/C0lid8AH4LzuAMzuAMzuAMzuAMzuAMzuAMzuAc6ZxxXhSa
8zdp35dV80jnt+pzzTyn+oe58dI+Rq4eTP3MGtPPPB2PNF+7x4NnePcLOIMz
OIMzOIeGs933OdL1kq6jVetrVT1I60RaP9K6Wqj1A9+AP4MzOIMzOIMzODuN
M3iqeXJxFpavJXp1X5I+/2R+BtF722r18afepxDdu7lbyW3k+hqidz1L0ed/
GfuL5FX6sN+jitP8fOSo8XzEPH7MGM9xMJ9vlxjn29znunypRI8rb1Pmy8Vp
Hp9hjDefqycY5+rc8wUuL3Oc8UacXXd3Er3qwwtl/ByfseUriN73tVj5vCDY
OpxaLy6eYL+Xeee538159Rt5RbpfwZfgSzPzhS8tTl+Srpfd83C+kZJF76+y
6/zzqkNXOp2nejgwz6iP1tt4aqDeuOfmHH+uDrk+AS2JxtOZ3avrj9t30Hie
tuj6un2biJ78JFr0HH+uc0uOG6cPx9P44+8E4j8zSPf1eOZbXfeYOBQZHLj+
gWD7ELj9/tlYF85nuHi4Po2+GJrvyYFAvqt+bqf5vurQ9cNDW4he3jSo65V5
sbSuciqU8XN+xa0Lty+46wXHk7uecr7UMUl1rzugd7lMfPI+Kq/LnG8Hu9/d
DAfXHBy4PiuOg/k+pMa4D2lO3030wtW3lNykfT5V6ZTbeHuPrpfVU9/orG/V
9eL+OKK/uX3co8pXykfat8b5Ode/BJ8Pjc/b7ed2+zb8udaRPuw0X3Waf0ZK
32m4+kjDlW+4+pDtzsvu+K2K0y6ec32udH5unkjv53daP7l0vyw2n+T4wD/h
n1byDLd/ct+Lpb5q1Xs0Vvm53e/12H3dCdd7SeG6njrtPSyn3Vc4jc9C/V2j
SOEsvR+W5gX/D43/R0qcTrtOOc23ncYhUs7BnMbNqvev/wIBCpF+
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BaseStyle->{FontFamily -> "Arial"},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-0.5, 0.5}, {-0.16, 0.16}, {-1.5350392591410702`, 
   1.5350389845307473`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6177205827312617`*^9, 3.617797802744731*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  RowBox[{"Plot3D", "[", 
   RowBox[{
    RowBox[{"0.08490356838515613`", "\[VeryThinSpace]", "+", 
     RowBox[{"0.262631886804103`", " ", "qq"}], "+", 
     RowBox[{"1.4502338875909508`", " ", "ru"}], "-", 
     RowBox[{
      FractionBox["99", "200"], " ", 
      RowBox[{"(", 
       RowBox[{"0.042451784192578085`", "\[VeryThinSpace]", "+", 
        RowBox[{"1.2251169437954754`", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "6.3437477801304835`*^-18"}], "+", 
           RowBox[{"1.`", " ", "ru"}]}], ")"}]}], "+", 
        RowBox[{"0.3813159434020515`", " ", 
         RowBox[{"(", 
          RowBox[{"0.042451784192578085`", "\[VeryThinSpace]", "+", 
           RowBox[{"0.3813159434020515`", " ", "qq"}], "+", 
           RowBox[{"1.2251169437954754`", " ", "ru"}]}], ")"}]}]}], ")"}]}]}],
     ",", 
    RowBox[{"{", 
     RowBox[{"qq", ",", 
      RowBox[{"-", "0.5`"}], ",", "0.5`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"ru", ",", 
      RowBox[{"-", "0.16`"}], ",", "0.16`"}], "}"}]}], "]"}],
  HoldForm]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"Plot3D", "[", 
   RowBox[{
    RowBox[{"0.08490356838515613`", "\[VeryThinSpace]", "+", 
     RowBox[{"0.262631886804103`", " ", "qq"}], "+", 
     RowBox[{"1.4502338875909508`", " ", "ru"}], "-", 
     RowBox[{
      FractionBox["99", "200"], " ", 
      RowBox[{"(", 
       RowBox[{"0.042451784192578085`", "\[VeryThinSpace]", "+", 
        RowBox[{"1.2251169437954754`", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "6.3437477801304835`*^-18"}], "+", 
           RowBox[{"1.`", " ", "ru"}]}], ")"}]}], "+", 
        RowBox[{"0.3813159434020515`", " ", 
         RowBox[{"(", 
          RowBox[{"0.042451784192578085`", "\[VeryThinSpace]", "+", 
           RowBox[{"0.3813159434020515`", " ", "qq"}], "+", 
           RowBox[{"1.2251169437954754`", " ", "ru"}]}], ")"}]}]}], ")"}]}]}],
     ",", 
    RowBox[{"{", 
     RowBox[{"qq", ",", 
      RowBox[{"-", "0.5`"}], ",", "0.5`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"ru", ",", 
      RowBox[{"-", "0.16`"}], ",", "0.16`"}], "}"}]}], "]"}],
  HoldForm]], "Output",
 CellChangeTimes->{3.617720583441262*^9, 3.617797804204746*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"huh", "=", 
   RowBox[{"getAllNewtonIterInfo", "[", "res2$2$1", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.617543646721884*^9, 3.617543669001989*^9}, {
  3.61754379710327*^9, 3.6175438018433175`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"huh", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "//", "Dimensions"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.617543808223381*^9, 3.6175438640749397`*^9}, {
  3.617543938765687*^9, 3.6175439394656935`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", "24", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.6177205834912615`*^9, 3.617797804454748*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"huh", "=", 
   RowBox[{"getAllFVals", "[", "res2$2$1", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.617544337890678*^9, 3.6175443467307663`*^9}, {
  3.6175444031613307`*^9, 3.6175444037713366`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "huh", "]"}]], "Input",
 CellChangeTimes->{{3.61754391610546*^9, 3.617543921335512*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "11", ",", "24", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.6177205835312614`*^9, 3.6177978045147486`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Norm", " ", "/@", " ", 
    RowBox[{"huh", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.617544359790897*^9, 3.617544362200921*^9}, {
  3.617544449421793*^9, 3.617544452291822*^9}, {3.617544495513254*^9, 
  3.617544506473364*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`], 
    AbsoluteThickness[1.6], 
    StyleBox[
     LineBox[{{1., 37.611884246245204`}, {2., 32.31548509037757}, {3., 
      5.862708750947969*^6}, {4., 1.465675809258381*^6}, {5., 
      366410.37643775373`}, {6., 91561.8311536904}, {7., 
      22727.048579896753`}, {8., 5195.825595533379}, {9., 655.898090414444}, {
      10., 9.652394706720582}, {11., 0.00578172379216631}}],
     FontFamily->"Arial"]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontFamily -> "Arial"},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 11.}, {0, 3.664175044553892*^6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.617720583841262*^9, 3.6177978050947547`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"lucaBasis", "=", 
   RowBox[{"GenerateBasis", "[", 
    RowBox[{"stateVar", ",", 
     RowBox[{"polyRange", "//.", "lucaSubs"}], ",", "initPower", ",", 
     "theShock", ",", 
     RowBox[{"theMean", "//.", "lucaSubs"}], ",", 
     RowBox[{
      RowBox[{"{", "sigma$u", "}"}], "//.", "lucaSubs"}], ",", 
     RowBox[{"integOrder", "//.", "lucaSubs"}], ",", "shockPower", ",", 
     "nonStateVar"}], "]"}]}], ";"}]], "Input"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["check initialization", "Section",
 CellChangeTimes->{{3.617648049920026*^9, 3.6176480578011045`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["$ContextPath"], "Input",
 CellChangeTimes->{{3.6176463247456064`*^9, 3.617646327615635*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ProjectionInterface`\"\>", ",", "\<\"JLink`\"\>", 
   ",", "\<\"TemplatingLoader`\"\>", ",", "\<\"PacletManager`\"\>", 
   ",", "\<\"System`\"\>", ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.6177205839112616`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InstallJava", "[", "]"}]], "Input",
 CellChangeTimes->{{3.617645348426832*^9, 3.617645352746876*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LinkObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4sIjUTVcAooO8+XdOPpnKDg8YkwNXuen7JA2
W/qycJSgw5sbHEde31CB82PFhGf3n1V1aFVgVz0zR8oBrF9czWFHsFXE/9Wy
Dje0Dj4qiFWDy7cVLYptDVKH65/g6Xbu0HMNOB9sn4I23H6w+SWacD5De8DS
tDQNB7ldC/alskg4aD2+nx6joeFgnPFi/oMZog5B9vlaQa/UHao9k7f0KUhA
+D/UUPVbqML5jCB+oIpDzJHypGv8Eg4eGad3ikiqwM2T57H5LndPGW6eya7m
GzMvKcH1o4cXABG3d/Y=
             "]], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{14.163129999999999`, 4.337966249999999}, {
             16.96813, 4.337966249999999}, {16.96813, 5.047809999999999}, {
             14.98813, 5.047809999999999}, {14.98813, 8.29796625}, {
             14.163129999999999`, 8.29796625}, {14.163129999999999`, 
             4.337966249999999}}}]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               PaneBox["\<\"JLink-Launch218\"\>",
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Link mode: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["Connect",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4sIjUTVcAooO8+XdOPpnKDg8YkwNXuen7JA2
W/qycJSgw5sbHEde31CB82PFhGf3n1V1aFVgVz0zR8oBrF9czWFHsFXE/9Wy
Dje0Dj4qiFWDy7cVLYptDVKH65/g6Xbu0HMNOB9sn4I23H6w+SWacD5De8DS
tDQNB7ldC/alskg4aD2+nx6joeFgnPFi/oMZog5B9vlaQa/UHao9k7f0KUhA
+D/UUPVbqML5jCB+oIpDzJHypGv8Eg4eGad3ikiqwM2T57H5LndPGW6eya7m
GzMvKcH1o4cXABG3d/Y=
             "]], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{14.163129999999999`, 4.337966249999999}, {
             16.96813, 4.337966249999999}, {16.96813, 5.047809999999999}, {
             14.98813, 5.047809999999999}, {14.98813, 8.29796625}, {
             14.163129999999999`, 8.29796625}, {14.163129999999999`, 
             4.337966249999999}}}]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              PaneBox["\<\"JLink-Launch218\"\>",
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Link mode: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["Connect",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Link protocol: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"SharedMemory\"\>",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  LinkObject["JLink-Launch218", 91, 7],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.6177205842012615`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$ContextPath"], "Input",
 CellChangeTimes->{{3.6176460986193385`*^9, 3.617646102029372*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ProjectionInterface`\"\>", ",", "\<\"JLink`\"\>", 
   ",", "\<\"TemplatingLoader`\"\>", ",", "\<\"PacletManager`\"\>", 
   ",", "\<\"System`\"\>", ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.617720584221262*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<ProjectionInterface`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6175465828181276`*^9, 3.6175465891481905`*^9}, {
  3.617642190098014*^9, 3.6176421988801064`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReinstallJava", "[", "]"}]], "Input",
 CellChangeTimes->{{3.617647455953071*^9, 3.6176474604131155`*^9}, {
  3.61764758282434*^9, 3.6176475893044043`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LinkObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4sIjUTVcAooO8+XdOPpnKDg8YkwNXuen7JA2
W/qycJSgw5sbHEde31CB82PFhGf3n1V1aFVgVz0zR8oBrF9czWFHsFXE/9Wy
Dje0Dj4qiFWDy7cVLYptDVKH65/g6Xbu0HMNOB9sn4I23H6w+SWacD5De8DS
tDQNB7ldC/alskg4aD2+nx6joeFgnPFi/oMZog5B9vlaQa/UHao9k7f0KUhA
+D/UUPVbqML5jCB+oIpDzJHypGv8Eg4eGad3ikiqwM2T57H5LndPGW6eya7m
GzMvKcH1o4cXABG3d/Y=
             "]], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{14.163129999999999`, 4.337966249999999}, {
             16.96813, 4.337966249999999}, {16.96813, 5.047809999999999}, {
             14.98813, 5.047809999999999}, {14.98813, 8.29796625}, {
             14.163129999999999`, 8.29796625}, {14.163129999999999`, 
             4.337966249999999}}}]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox[
               
               PaneBox["\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Java\\\\Windows-x86-64\\\\\
bin\\\\javaw\\\" -classpath \\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Links\\\\JLink\\\\JLink.jar\
\\\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\"C:\\\\Users\\\\m1gsa00\\\\AppData\\\\Local\\\\Temp\\\\m-7b428f3f-564f-\
4daa-9473-f97408bd08d3\\\"\"\>",
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 300}, Automatic},
                ScrollPosition->{0., 0.},
                StripOnInput->True],
               LineBreakWithin->False],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Link mode: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["Listen",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.499999999999996`,
              2.5}, {25.499999999999996`, 1.3953100000000003`}, {
             24.604699999999998`, 0.49999999999999994`}, {23.5, 
             0.49999999999999994`}, {2.5, 0.49999999999999994`}, {
             1.3953100000000003`, 0.49999999999999994`}, {
             0.49999999999999994`, 1.3953100000000003`}, {
             0.49999999999999994`, 2.5}, {0.49999999999999994`, 23.5}, {
             0.49999999999999994`, 24.604699999999998`}, {1.3953100000000003`,
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
             25.499999999999996`}, {24.604699999999998`, 
             25.499999999999996`}, {25.499999999999996`, 
             24.604699999999998`}, {25.499999999999996`, 23.5}, {
             25.499999999999996`, 2.5}}}]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
             19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
             20.021499999999996`}, {6.930469999999999, 20.021499999999996`}, {
             6.930469999999999, 18.212100000000003`}, {16.3832, 
             18.212100000000003`}, {16.3832, 16.357399999999995`}, {20.5426, 
             19.116799999999998`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
             11.079700000000003`}, {9.46445, 12.933999999999997`}, {
             18.917199999999998`, 12.933999999999997`}, {18.917199999999998`, 
             14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
             13.8391}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4sIjUTVcAooO8+XdOPpnKDg8YkwNXuen7JA2
W/qycJSgw5sbHEde31CB82PFhGf3n1V1aFVgVz0zR8oBrF9czWFHsFXE/9Wy
Dje0Dj4qiFWDy7cVLYptDVKH65/g6Xbu0HMNOB9sn4I23H6w+SWacD5De8DS
tDQNB7ldC/alskg4aD2+nx6joeFgnPFi/oMZog5B9vlaQa/UHao9k7f0KUhA
+D/UUPVbqML5jCB+oIpDzJHypGv8Eg4eGad3ikiqwM2T57H5LndPGW6eya7m
GzMvKcH1o4cXABG3d/Y=
             "]], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{14.163129999999999`, 4.337966249999999}, {
             16.96813, 4.337966249999999}, {16.96813, 5.047809999999999}, {
             14.98813, 5.047809999999999}, {14.98813, 8.29796625}, {
             14.163129999999999`, 8.29796625}, {14.163129999999999`, 
             4.337966249999999}}}]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              
              PaneBox["\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Java\\\\Windows-x86-64\\\\\
bin\\\\javaw\\\" -classpath \\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Links\\\\JLink\\\\JLink.jar\
\\\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\"C:\\\\Users\\\\m1gsa00\\\\AppData\\\\Local\\\\Temp\\\\m-7b428f3f-564f-\
4daa-9473-f97408bd08d3\\\"\"\>",
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0,
               ImageSize->{{1, 500}, Automatic},
               StripOnInput->True],
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Link mode: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["Listen",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Link protocol: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"SharedMemory\"\>",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  LinkObject[
  "\"C:\\Program Files\\Wolfram \
Research\\Mathematica\\10.0\\SystemFiles\\Java\\Windows-x86-64\\bin\\javaw\" \
-classpath \"C:\\Program Files\\Wolfram \
Research\\Mathematica\\10.0\\SystemFiles\\Links\\JLink\\JLink.jar\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\"C:\\Users\\m1gsa00\\AppData\\Local\\Temp\\m-7b428f3f-564f-4daa-9473-\
f97408bd08d3\"", 1304, 7],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.617720584462262*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"duh", "=", 
  InterpretationBox[
   RowBox[{
    TagBox["LinkObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False}, 
     PanelBox[
      PaneSelectorBox[{False->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"],
             ImageSizeCache->{12., {0., 12.}}],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = True),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 
              3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
              25.499999999999996`, 2.5}, {25.499999999999996`, 
              1.3953100000000003`}, {24.604699999999998`, 
              0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
              0.49999999999999994`}, {1.3953100000000003`, 
              0.49999999999999994`}, {0.49999999999999994`, 
              1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
              0.49999999999999994`, 23.5}, {0.49999999999999994`, 
              24.604699999999998`}, {1.3953100000000003`, 
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
              25.499999999999996`}, {24.604699999999998`, 
              25.499999999999996`}, {25.499999999999996`, 
              24.604699999999998`}, {25.499999999999996`, 23.5}, {
              25.499999999999996`, 2.5}}}]}, 
            {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
              19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
              20.021499999999996`}, {6.930469999999999, 
              20.021499999999996`}, {6.930469999999999, 
              18.212100000000003`}, {16.3832, 18.212100000000003`}, {16.3832, 
              16.357399999999995`}, {20.5426, 19.116799999999998`}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
              11.079700000000003`}, {9.46445, 12.933999999999997`}, {
              18.917199999999998`, 12.933999999999997`}, {18.917199999999998`,
               14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
              13.8391}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
              11.079700000000003`}, {9.46445, 12.933999999999997`}, {
              18.917199999999998`, 12.933999999999997`}, {18.917199999999998`,
               14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
              13.8391}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
              0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4sIjUTVcAooO8+XdOPpnKDg8YkwNXuen7JA2
W/qycJSgw5sbHEde31CB82PFhGf3n1V1aFVgVz0zR8oBrF9czWFHsFXE/9Wy
Dje0Dj4qiFWDy7cVLYptDVKH65/g6Xbu0HMNOB9sn4I23H6w+SWacD5De8DS
tDQNB7ldC/alskg4aD2+nx6joeFgnPFi/oMZog5B9vlaQa/UHao9k7f0KUhA
+D/UUPVbqML5jCB+oIpDzJHypGv8Eg4eGad3ikiqwM2T57H5LndPGW6eya7m
GzMvKcH1o4cXABG3d/Y=
              "]], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}}}, {{{14.163129999999999`, 
              4.337966249999999}, {16.96813, 4.337966249999999}, {16.96813, 
              5.047809999999999}, {14.98813, 5.047809999999999}, {14.98813, 
              8.29796625}, {14.163129999999999`, 8.29796625}, {
              14.163129999999999`, 4.337966249999999}}}]}},
           AspectRatio->1,
           Axes->False,
           Background->GrayLevel[0.93],
           Frame->True,
           FrameStyle->Directive[
             Thickness[Tiny], 
             GrayLevel[0.7]],
           FrameTicks->None,
           ImageSize->{Automatic, 
             Dynamic[
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Name: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               StyleBox[
                
                PaneBox["\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Java\\\\Windows-x86-64\\\\\
bin\\\\javaw\\\" -classpath \\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\lib\\\\JLink.jar\\\" \
-Dcom.wolfram.jlink.libdir=\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\os\\\\win64\\\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\"C:\\\\Users\\\\m1gsa00\\\\AppData\\\\Local\\\\Temp\\\\m-3d3ffcbf-b63e-\
4bb7-97bb-12c7d6aa40b7\\\"\"\>",
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0,
                 ImageSize->{{1, 300}, Automatic},
                 ScrollPosition->{0., 0.},
                 StripOnInput->True],
                LineBreakWithin->False],
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Link mode: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["Listen",
               "SummaryItem"]}]}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquareMinusIconMedium"]],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = False),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 
              3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
              25.499999999999996`, 2.5}, {25.499999999999996`, 
              1.3953100000000003`}, {24.604699999999998`, 
              0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
              0.49999999999999994`}, {1.3953100000000003`, 
              0.49999999999999994`}, {0.49999999999999994`, 
              1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
              0.49999999999999994`, 23.5}, {0.49999999999999994`, 
              24.604699999999998`}, {1.3953100000000003`, 
              25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
              25.499999999999996`}, {24.604699999999998`, 
              25.499999999999996`}, {25.499999999999996`, 
              24.604699999999998`}, {25.499999999999996`, 23.5}, {
              25.499999999999996`, 2.5}}}]}, 
            {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
              19.116799999999998`}, {16.3832, 21.876199999999997`}, {16.3832, 
              20.021499999999996`}, {6.930469999999999, 
              20.021499999999996`}, {6.930469999999999, 
              18.212100000000003`}, {16.3832, 18.212100000000003`}, {16.3832, 
              16.357399999999995`}, {20.5426, 19.116799999999998`}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
              11.079700000000003`}, {9.46445, 12.933999999999997`}, {
              18.917199999999998`, 12.933999999999997`}, {18.917199999999998`,
               14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
              13.8391}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {9.46445, 
              11.079700000000003`}, {9.46445, 12.933999999999997`}, {
              18.917199999999998`, 12.933999999999997`}, {18.917199999999998`,
               14.7438}, {9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
              13.8391}}}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
              0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
              0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4sIjUTVcAooO8+XdOPpnKDg8YkwNXuen7JA2
W/qycJSgw5sbHEde31CB82PFhGf3n1V1aFVgVz0zR8oBrF9czWFHsFXE/9Wy
Dje0Dj4qiFWDy7cVLYptDVKH65/g6Xbu0HMNOB9sn4I23H6w+SWacD5De8DS
tDQNB7ldC/alskg4aD2+nx6joeFgnPFi/oMZog5B9vlaQa/UHao9k7f0KUhA
+D/UUPVbqML5jCB+oIpDzJHypGv8Eg4eGad3ikiqwM2T57H5LndPGW6eya7m
GzMvKcH1o4cXABG3d/Y=
              "]], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}}}, {{{14.163129999999999`, 
              4.337966249999999}, {16.96813, 4.337966249999999}, {16.96813, 
              5.047809999999999}, {14.98813, 5.047809999999999}, {14.98813, 
              8.29796625}, {14.163129999999999`, 8.29796625}, {
              14.163129999999999`, 4.337966249999999}}}]}},
           AspectRatio->1,
           Axes->False,
           Background->GrayLevel[0.93],
           Frame->True,
           FrameStyle->Directive[
             Thickness[Tiny], 
             GrayLevel[0.7]],
           FrameTicks->None,
           ImageSize->{Automatic, 
             Dynamic[
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Name: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               
               PaneBox["\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Java\\\\Windows-x86-64\\\\\
bin\\\\javaw\\\" -classpath \\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\lib\\\\JLink.jar\\\" \
-Dcom.wolfram.jlink.libdir=\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\os\\\\win64\\\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\"C:\\\\Users\\\\m1gsa00\\\\AppData\\\\Local\\\\Temp\\\\m-3d3ffcbf-b63e-\
4bb7-97bb-12c7d6aa40b7\\\"\"\>",
                BaselinePosition->Baseline,
                ContentPadding->False,
                FrameMargins->0,
                ImageSize->{{1, 500}, Automatic},
                StripOnInput->True],
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Link mode: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["Listen",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Link protocol: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"SharedMemory\"\>",
               "SummaryItem"]}]}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
       Typeset`open$$],
       ImageSize->Automatic],
      BaselinePosition->Baseline],
     DynamicModuleValues:>{}], "]"}],
   LinkObject[
   "\"C:\\Program Files\\Wolfram \
Research\\Mathematica\\10.0\\SystemFiles\\Java\\Windows-x86-64\\bin\\javaw\" \
-classpath \"C:\\Program Files\\Wolfram \
Research\\Mathematica\\10.0\\SystemFiles\\lib\\JLink.jar\" \
-Dcom.wolfram.jlink.libdir=\"C:\\Program Files\\Wolfram Research\\Mathematica\
\\10.0\\SystemFiles\\os\\win64\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\"C:\\Users\\m1gsa00\\AppData\\Local\\Temp\\m-3d3ffcbf-b63e-4bb7-97bb-\
12c7d6aa40b7\"", 147, 7],
   Editable->False,
   SelectWithContents->True,
   Selectable->False]}]], "Input",
 CellChangeTimes->{{3.617647720216714*^9, 3.6176477215267267`*^9}}],

Cell[BoxData[
 RowBox[{"LinkObject", "[", 
  RowBox[{"\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Java\\\\Windows-x86-64\\\\\
bin\\\\javaw\\\" -classpath \\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\lib\\\\JLink.jar\\\" \
-Dcom.wolfram.jlink.libdir=\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\os\\\\win64\\\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\"C:\\\\Users\\\\m1gsa00\\\\AppData\\\\Local\\\\Temp\\\\m-3d3ffcbf-b63e-\
4bb7-97bb-12c7d6aa40b7\\\"\"\>", ",", "147", ",", "7"}], "]"}]], "Output",
 CellChangeTimes->{3.617720584512262*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LinkConnectedQ", "[", "duh", "]"}]], "Input",
 CellChangeTimes->{{3.6176477385068965`*^9, 3.617647746436976*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"LinkObject", "::", "linkn"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Argument \[NoBreak]\\!\\(LinkObject[\\(\\(\\(\\(\\\"\\\\\\\
\"C:\\\\\\\\Program Files\\\\\\\\Wolfram \
Research\\\\\\\\Mathematica\\\\\\\\10.0\\\\\\\\SystemFiles\\\\\\\\Java\\\\\\\\\
Windows-x86-64\\\\\\\\bin\\\\\\\\javaw\\\\\\\" -classpath \
\\\\\\\"C:\\\\\\\\Program Files\\\\\\\\Wolfram Research\\\\\\\\Math\\\" \
\[Ellipsis] \\\".wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\\\\\"C:\\\\\\\\Users\\\\\\\\m1gsa00\\\\\\\\AppData\\\\\\\\Local\\\\\\\\\
Temp\\\\\\\\m-3d3ffcbf-b63e-4bb7-97bb-12c7d6aa40b7\\\\\\\"\\\"\\)\\), 147, \
7\\)\\)]\\)\[NoBreak] in \
\[NoBreak]\\!\\(LinkConnectedQ[\\(\\(LinkObject[\\(\\(\\(\\(\\\"\\\\\\\"C:\\\\\
\\\\Program Files\\\\\\\\Wolfram \
Research\\\\\\\\Mathematica\\\\\\\\10.0\\\\\\\\SystemFiles\\\\\\\\Java\\\\\\\\\
Windows-x86-64\\\\\\\\bin\\\\\\\\javaw\\\\\\\" -classpath \
\\\\\\\"C:\\\\\\\\Program Files\\\\\\\\Wolfram Resea\\\" \[Ellipsis] \
\\\".jlink.JLinkSystemClassLoader com.wolfram.jlink.Install -init \
\\\\\\\"C:\\\\\\\\Users\\\\\\\\m1gsa00\\\\\\\\AppData\\\\\\\\Local\\\\\\\\\
Temp\\\\\\\\m-3d3ffcbf-b63e-4bb7-97bb-12c7d6aa40b7\\\\\\\"\\\"\\)\\), 147, \
7\\)\\)]\\)\\)]\\)\[NoBreak] has an invalid LinkObject number; the link may \
be closed. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/LinkObject/linkn\\\", ButtonNote -> \
\\\"LinkObject::linkn\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6177205849022617`*^9}],

Cell[BoxData[
 RowBox[{"LinkConnectedQ", "[", 
  RowBox[{"LinkObject", "[", 
   RowBox[{"\<\"\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\Java\\\\Windows-x86-64\\\\\
bin\\\\javaw\\\" -classpath \\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\lib\\\\JLink.jar\\\" \
-Dcom.wolfram.jlink.libdir=\\\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\10.0\\\\SystemFiles\\\\os\\\\win64\\\" -Xmx256m  \
-Djava.system.class.loader=com.wolfram.jlink.JLinkSystemClassLoader \
com.wolfram.jlink.Install -init \
\\\"C:\\\\Users\\\\m1gsa00\\\\AppData\\\\Local\\\\Temp\\\\m-3d3ffcbf-b63e-\
4bb7-97bb-12c7d6aa40b7\\\"\"\>", ",", "147", ",", "7"}], "]"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.6177205849822617`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "*Link*"}]], "Input",
 CellChangeTimes->{{3.617647704275554*^9, 3.6176477093656054`*^9}}],

Cell[BoxData[{
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["System`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["System`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["ControllerLinking",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"ControllerLinking", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkFunction",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkFunction", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkProtocol",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkProtocol", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["ThisLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"ThisLink", "System`"}},
          ButtonNote->"System`"]},
        {
         ButtonBox["GraphLinkEfficiency",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"GraphLinkEfficiency", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkHost",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkHost", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkRankCentrality",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"LinkRankCentrality", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["$CurrentLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"$CurrentLink", "System`"}},
          ButtonNote->"System`"]},
        {
         ButtonBox["LinkActivate",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkActivate", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkInterrupt",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkInterrupt", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkRead",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkRead", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["$Linked",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"$Linked", "System`"}},
          ButtonNote->"System`"]},
        {
         ButtonBox["LinkClose",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkClose", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkLaunch",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkLaunch", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkReadHeld",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkReadHeld", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["$LinkSupported",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"$LinkSupported", "System`"}},
          ButtonNote->"System`"]},
        {
         ButtonBox["LinkConnect",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkConnect", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkMode",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkMode", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkReadyQ",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkReadyQ", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["$ParentLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"$ParentLink", "System`"}},
          ButtonNote->"System`"]},
        {
         ButtonBox["LinkConnectedQ",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"LinkConnectedQ", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkObject",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkObject", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["Links",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"Links", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["$SetParentLink",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"$SetParentLink", "System`"}},
          ButtonNote->"System`"]},
        {
         ButtonBox["LinkCreate",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkCreate", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkOpen",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkOpen", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkService",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkService", "System`"}},
          ButtonNote->"System`"], ""},
        {
         ButtonBox["LinkError",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkError", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkOptions",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkOptions", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkWrite",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkWrite", "System`"}},
          ButtonNote->"System`"], ""},
        {
         ButtonBox["LinkFlush",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkFlush", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkPatterns",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkPatterns", "System`"}},
          ButtonNote->"System`"], 
         ButtonBox["LinkWriteHeld",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"LinkWriteHeld", "System`"}},
          ButtonNote->"System`"], ""}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.2375]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]], "\n", 
 DynamicModuleBox[{Typeset`open$$ = True}, 
  PaneSelectorBox[{False->
   RowBox[{
    OpenerBox[Dynamic[Typeset`open$$],
     ImageSize->Small], 
    StyleBox["JLink`", "InfoHeading"]}], True->GridBox[{
     {
      RowBox[{
       OpenerBox[Dynamic[Typeset`open$$],
        ImageSize->Small], 
       StyleBox["JLink`", "InfoHeading"]}]},
     {GridBox[{
        {
         ButtonBox["CreateExtraLinks",
          BaseStyle->"InformationLink",
          
          ButtonData:>{
           "Info3617706185-7034399", {"CreateExtraLinks", "JLink`"}},
          ButtonNote->"JLink`"], 
         ButtonBox["FrontEndLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"FrontEndLink", "JLink`"}},
          ButtonNote->"JLink`"], 
         ButtonBox["JavaLink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"JavaLink", "JLink`"}},
          ButtonNote->"JLink`"], 
         ButtonBox["JavaUILink",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"JavaUILink", "JLink`"}},
          ButtonNote->"JLink`"], 
         ButtonBox["SharingLinks",
          BaseStyle->"InformationLink",
          ButtonData:>{"Info3617706185-7034399", {"SharingLinks", "JLink`"}},
          ButtonNote->"JLink`"]}
       },
       DefaultBaseStyle->"InfoGrid",
       GridBoxItemSize->{"Columns" -> {{
            Scaled[0.19]}}}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}, 
   Dynamic[Typeset`open$$],
   ImageSize->Automatic]]}], "Print", "InfoCell",
 CellChangeTimes->{3.617720585162262*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"urlClass", "=", 
  RowBox[{"LoadJavaClass", "[", "\"\<java.net.URL\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.6176473903024144`*^9, 3.6176474065625772`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"JavaClass", "[", 
   RowBox[{"java", ".", "net", ".", "URL"}], ",", "<>", "]"}],
  JLink`JavaClass["java.net.URL", 30, {
    JLink`JVM["vm3"]}, 1, "java`net`URL`", False, True]]], "Output",
 CellChangeTimes->{3.617720585472262*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialization", "Section"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"$OperatingSystem", "===", "\"\<Windows\>\""}], ",", 
    RowBox[{
    "SetDirectory", "[", 
     "\"\<g:/git/ProjectionMethodTools/ProjectionMethodToolsJava/code\>\"", 
     "]"}]}], "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.61764493105157*^9, 3.6176449762320213`*^9}, {
   3.6176461252696047`*^9, 3.6176461327996798`*^9}, {3.6176461684300365`*^9, 
   3.6176461696100483`*^9}, 3.6176465507588663`*^9}],

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<prepPackages.mth\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.61764493105157*^9, 3.6176449762320213`*^9}, {
   3.6176461252696047`*^9, 3.6176461327996798`*^9}, {3.6176461684300365`*^9, 
   3.6176461696100483`*^9}, 3.6176465507588663`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelDiags", "[", 
  RowBox[{"modEqns", ",", "tryMat", ",", "lucaBasis"}], "]"}]], "Input",
 CellChangeTimes->{{3.617721060199997*^9, 3.6177210880602756`*^9}}],

Cell[BoxData[
 RowBox[{"modelDiags", "[", 
  RowBox[{
   InterpretationBox[
    RowBox[{"\[LeftGuillemet]", 
     RowBox[{"JavaObject", "[", "lucaMod", "]"}], "\[RightGuillemet]"}],
    JLink`Objects`vm3`JavaObject23866079067504641], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0.292289`", ",", "0", ",", "0", ",", "0",
        ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0.5`", ",", "0", ",", "0", ",", "0", ",",
        "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0.299289`", ",", "0", ",", "0", ",", "0",
        ",", "0"}], "}"}]}], "}"}], ",", 
   "JLink`Objects`vm2`JavaObject9714448113598465"}], "]"}]], "Output",
 CellChangeTimes->{3.617721089840293*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";", 
  RowBox[{"InstallJava", "[", "]"}], ";", 
  RowBox[{"Needs", "[", "\"\<ProjectionInterface`\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.6176483553441143`*^9, 3.617648419509763*^9}, 
   3.61764845348411*^9}],

Cell[CellGroupData[{

Cell[BoxData["$ContextPath"], "Input",
 CellChangeTimes->{{3.617648519376775*^9, 3.6176485222268033`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"ProjectionInterface`\"\>", ",", "\<\"JLink`\"\>", 
   ",", "\<\"TemplatingLoader`\"\>", ",", "\<\"PacletManager`\"\>", 
   ",", "\<\"System`\"\>", ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.6177205856922617`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1628, 891},
WindowMargins->{{Automatic, -1710}, {45, Automatic}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792},
"PostScriptOutputFile"->""},
ShowSelection->True,
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 1, 2014)",
StyleDefinitions->FrontEnd`FileName[{"Report"}, "StandardReport.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 33, 0, 99, "Title"],
Cell[616, 24, 102, 1, 41, "Author"],
Cell[CellGroupData[{
Cell[743, 29, 74, 0, 72, "Section"],
Cell[CellGroupData[{
Cell[842, 33, 67, 0, 37, "Subsection"],
Cell[CellGroupData[{
Cell[934, 37, 146, 3, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[1105, 44, 1879, 50, 101, "Input"],
Cell[2987, 96, 577, 9, 23, "Print"]
}, Open  ]],
Cell[3579, 108, 481, 9, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4097, 122, 84, 1, 35, "Subsubsection"],
Cell[4184, 125, 1841, 48, 101, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6062, 178, 149, 3, 35, "Subsubsection"],
Cell[6214, 183, 977, 28, 81, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7240, 217, 129, 1, 37, "Subsection"],
Cell[7372, 220, 171, 2, 30, "Text",
 InitializationCell->True],
Cell[7546, 224, 10241, 291, 281, "Input"],
Cell[17790, 517, 319, 8, 40, "Input"],
Cell[18112, 527, 355, 9, 40, "Input"],
Cell[CellGroupData[{
Cell[18492, 540, 1197, 35, 40, "Input"],
Cell[19692, 577, 1802, 51, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21531, 633, 151, 3, 40, "Input"],
Cell[21685, 638, 666, 15, 40, "Output"]
}, Open  ]],
Cell[22366, 656, 1703, 42, 141, "Input"],
Cell[CellGroupData[{
Cell[24094, 702, 127, 2, 40, "Input"],
Cell[24224, 706, 12510, 263, 81, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36771, 974, 365, 6, 40, "Input"],
Cell[37139, 982, 917, 23, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38093, 1010, 2387, 69, 81, "Input"],
Cell[40483, 1081, 910, 21, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41442, 1108, 55, 0, 37, "Subsection"],
Cell[CellGroupData[{
Cell[41522, 1112, 123, 3, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[41670, 1119, 4565, 117, 261, "Input"],
Cell[46238, 1238, 734, 16, 40, "Output"]
}, Open  ]],
Cell[46987, 1257, 289, 6, 40, "Input"],
Cell[CellGroupData[{
Cell[47301, 1267, 232, 5, 40, "Input"],
Cell[47536, 1274, 398, 7, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47971, 1286, 184, 4, 40, "Input"],
Cell[48158, 1292, 117859, 3040, 213, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[166078, 4339, 163, 2, 37, "Subsection"],
Cell[166244, 4343, 305, 5, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[166574, 4352, 345, 8, 40, "Input"],
Cell[166922, 4362, 1109, 25, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168068, 4392, 486, 10, 40, InheritFromParent],
Cell[168557, 4404, 1048, 24, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169642, 4433, 256, 6, 40, "Input"],
Cell[169901, 4441, 553, 12, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170491, 4458, 241, 7, 40, "Input"],
Cell[170735, 4467, 981, 26, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171753, 4498, 135, 2, 40, "Input"],
Cell[171891, 4502, 273, 4, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172201, 4511, 203, 5, 40, "Input"],
Cell[172407, 4518, 614, 14, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173058, 4537, 98, 1, 40, "Input"],
Cell[173159, 4540, 590, 13, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173786, 4558, 184, 3, 40, "Input"],
Cell[173973, 4563, 1440, 44, 155, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[175450, 4612, 574, 9, 40, "Input"],
Cell[176027, 4623, 1617, 41, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177681, 4669, 1533, 37, 40, "Input"],
Cell[179217, 4708, 714, 18, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179968, 4731, 839, 23, 40, InheritFromParent],
Cell[180810, 4756, 737, 19, 40, "Output"]
}, Open  ]],
Cell[181562, 4778, 1594, 38, 40, "Input"],
Cell[183159, 4818, 1936, 47, 101, "Input"],
Cell[CellGroupData[{
Cell[185120, 4869, 3080, 81, 101, "Input"],
Cell[188203, 4952, 1091, 23, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189331, 4980, 123, 3, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[189479, 4987, 4621, 118, 261, "Input"],
Cell[194103, 5107, 583, 10, 40, "Output"]
}, Open  ]],
Cell[194701, 5120, 289, 6, 40, "Input"],
Cell[CellGroupData[{
Cell[195015, 5130, 232, 5, 40, "Input"],
Cell[195250, 5137, 447, 8, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195734, 5150, 184, 4, 40, "Input"],
Cell[195921, 5156, 12523, 321, 54, "Output"]
}, Open  ]],
Cell[208459, 5480, 702, 15, 40, "Input"],
Cell[CellGroupData[{
Cell[209186, 5499, 102, 1, 40, "Input"],
Cell[209291, 5502, 1121, 17, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210449, 5524, 140, 2, 40, "Input"],
Cell[210592, 5528, 1036, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211665, 5549, 184, 3, 40, "Input"],
Cell[211852, 5554, 2302, 49, 155, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214191, 5608, 385, 8, 40, "Input"],
Cell[214579, 5618, 1734, 30, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216350, 5653, 281, 7, 61, "Input"],
Cell[216634, 5662, 1595, 28, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218266, 5695, 130, 2, 40, "Input"],
Cell[218399, 5699, 2197, 42, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220633, 5746, 442, 10, 40, "Input"],
Cell[221078, 5758, 1846, 35, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222961, 5798, 515, 11, 40, "Input"],
Cell[223479, 5811, 1879, 36, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[225395, 5852, 305, 6, 40, "Input"],
Cell[225703, 5860, 1123, 22, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226863, 5887, 454, 11, 40, "Input"],
Cell[227320, 5900, 3606, 66, 121, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230963, 5971, 206, 4, 40, "Input"],
Cell[231172, 5977, 1171, 24, 40, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[232416, 6009, 113, 1, 72, "Section"],
Cell[CellGroupData[{
Cell[232554, 6014, 108, 1, 35, "Subsubsection"],
Cell[232665, 6017, 91, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[232781, 6022, 586, 11, 40, "Input"],
Cell[233370, 6035, 1197, 24, 40, "Output"]
}, Open  ]],
Cell[234582, 6062, 533, 11, 40, "Input"],
Cell[235118, 6075, 86, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[235229, 6080, 616, 12, 40, "Input"],
Cell[235848, 6094, 1248, 24, 40, "Output"]
}, Open  ]],
Cell[237111, 6121, 586, 12, 40, "Input"],
Cell[CellGroupData[{
Cell[237722, 6137, 773, 21, 40, "Input"],
Cell[238498, 6160, 1285, 24, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239820, 6189, 612, 17, 40, "Input"],
Cell[240435, 6208, 389, 8, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240861, 6221, 348, 9, 40, InheritFromParent],
Cell[241212, 6232, 347, 6, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241596, 6243, 509, 9, 40, "Input"],
Cell[242108, 6254, 1218, 24, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243363, 6283, 183, 3, 40, "Input"],
Cell[243549, 6288, 355, 5, 40, "Output"]
}, Open  ]],
Cell[243919, 6296, 563, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[244507, 6311, 516, 9, 40, "Input"],
Cell[245026, 6322, 1201, 24, 40, "Output"]
}, Open  ]],
Cell[246242, 6349, 560, 11, 40, "Input"],
Cell[246805, 6362, 188, 3, 25, "Item"],
Cell[CellGroupData[{
Cell[247018, 6369, 669, 13, 40, "Input"],
Cell[247690, 6384, 1223, 24, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248950, 6413, 631, 18, 40, "Input"],
Cell[249584, 6433, 853, 19, 40, "Output"]
}, Open  ]],
Cell[250452, 6455, 600, 12, 40, "Input"],
Cell[CellGroupData[{
Cell[251077, 6471, 537, 10, 40, "Input"],
Cell[251617, 6483, 1190, 24, 40, "Output"]
}, Open  ]],
Cell[252822, 6510, 579, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[253426, 6525, 537, 10, 40, "Input"],
Cell[253966, 6537, 1186, 24, 40, "Output"]
}, Open  ]],
Cell[255167, 6564, 577, 11, 40, "Input"],
Cell[255747, 6577, 86, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[255858, 6582, 514, 9, 40, "Input"],
Cell[256375, 6593, 971, 20, 40, "Output"]
}, Open  ]],
Cell[257361, 6616, 566, 11, 40, "Input"],
Cell[CellGroupData[{
Cell[257952, 6631, 514, 9, 40, "Input"],
Cell[258469, 6642, 972, 20, 40, "Output"]
}, Open  ]],
Cell[259456, 6665, 558, 11, 40, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[260063, 6682, 115, 1, 72, "Section"],
Cell[CellGroupData[{
Cell[260203, 6687, 4543, 117, 261, "Input"],
Cell[264749, 6806, 261, 5, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265047, 6816, 4372, 114, 281, "Input"],
Cell[269422, 6932, 528, 15, 40, "Output"],
Cell[269953, 6949, 398, 10, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270388, 6964, 120, 3, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[270533, 6971, 1009, 27, 81, "Input"],
Cell[271545, 7000, 400, 10, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271982, 7015, 1055, 28, 81, "Input"],
Cell[273040, 7045, 308, 9, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[273397, 7060, 72, 0, 37, "Subsection"],
Cell[CellGroupData[{
Cell[273494, 7064, 139, 1, 35, "Subsubsection"],
Cell[273636, 7067, 292, 8, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273965, 7080, 47, 0, 35, "Subsubsection"],
Cell[274015, 7082, 85, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[274125, 7088, 122, 3, 40, "Input"],
Cell[274250, 7093, 125, 2, 40, "Output"]
}, Open  ]],
Cell[274390, 7098, 97, 2, 40, "Input"],
Cell[CellGroupData[{
Cell[274512, 7104, 197, 4, 61, "Input"],
Cell[274712, 7110, 122, 2, 40, "Output"]
}, Open  ]],
Cell[274849, 7115, 264, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[275138, 7124, 309, 6, 61, "Input"],
Cell[275450, 7132, 227, 6, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[275726, 7144, 121, 1, 35, "Subsubsection"],
Cell[275850, 7147, 247, 5, 30, "Text"],
Cell[276100, 7154, 218, 5, 40, "Input"],
Cell[276321, 7161, 107, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[276453, 7166, 164, 3, 40, "Input"],
Cell[276620, 7171, 442, 14, 40, "Output"]
}, Open  ]],
Cell[277077, 7188, 162, 2, 25, "Item"],
Cell[CellGroupData[{
Cell[277264, 7194, 213, 4, 40, "Input"],
Cell[277480, 7200, 174, 4, 40, "Output"]
}, Open  ]],
Cell[277669, 7207, 109, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[277803, 7212, 348, 8, 40, "Input"],
Cell[278154, 7222, 466, 14, 40, "Output"]
}, Open  ]],
Cell[278635, 7239, 188, 2, 25, "Item"],
Cell[CellGroupData[{
Cell[278848, 7245, 561, 14, 40, "Input"],
Cell[279412, 7261, 729, 19, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[280178, 7285, 139, 3, 40, "Input"],
Cell[280320, 7290, 406, 10, 40, "Output"]
}, Open  ]],
Cell[280741, 7303, 118, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[280884, 7308, 176, 3, 40, "Input"],
Cell[281063, 7313, 212, 5, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281312, 7323, 149, 2, 40, "Input"],
Cell[281464, 7327, 674, 15, 40, "Output"]
}, Open  ]],
Cell[282153, 7345, 117, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[282295, 7350, 178, 3, 40, "Input"],
Cell[282476, 7355, 1459, 38, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283972, 7398, 389, 9, 40, "Input"],
Cell[284364, 7409, 1301, 25, 61, "Output"]
}, Open  ]],
Cell[285680, 7437, 153, 3, 25, "Item"],
Cell[CellGroupData[{
Cell[285858, 7444, 402, 6, 40, "Input"],
Cell[286263, 7452, 2726, 59, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289026, 7516, 352, 8, 40, "Input"],
Cell[289381, 7526, 1022, 20, 61, "Output"]
}, Open  ]],
Cell[290418, 7549, 102, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[290545, 7554, 249, 5, 40, "Input"],
Cell[290797, 7561, 962, 21, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291796, 7587, 299, 7, 40, "Input"],
Cell[292098, 7596, 1280, 23, 64, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293427, 7625, 108, 1, 35, "Subsubsection"],
Cell[293538, 7628, 91, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[293654, 7633, 532, 10, 40, "Input"],
Cell[294189, 7645, 649, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294875, 7666, 489, 10, 40, "Input"],
Cell[295367, 7678, 2988, 60, 101, "Output"]
}, Open  ]],
Cell[298370, 7741, 86, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[298481, 7746, 485, 10, 40, "Input"],
Cell[298969, 7758, 650, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299656, 7779, 485, 10, 40, "Input"],
Cell[300144, 7791, 2984, 60, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[303165, 7856, 462, 9, 40, "Input"],
Cell[303630, 7867, 608, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304275, 7888, 464, 9, 40, "Input"],
Cell[304742, 7899, 4270, 82, 181, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[309049, 7986, 464, 9, 40, "Input"],
Cell[309516, 7997, 566, 12, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[310119, 8014, 462, 9, 40, "Input"],
Cell[310584, 8025, 6168, 113, 241, "Output"]
}, Open  ]],
Cell[316767, 8141, 188, 3, 25, "Item"],
Cell[CellGroupData[{
Cell[316980, 8148, 531, 10, 40, "Input"],
Cell[317514, 8160, 648, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318199, 8181, 525, 10, 40, "Input"],
Cell[318727, 8193, 2984, 60, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321748, 8258, 507, 9, 40, "Input"],
Cell[322258, 8269, 587, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322882, 8290, 507, 9, 40, "Input"],
Cell[323392, 8301, 4285, 87, 181, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327714, 8393, 507, 9, 40, "Input"],
Cell[328224, 8404, 562, 12, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[328823, 8421, 505, 9, 40, "Input"],
Cell[329331, 8432, 6061, 114, 221, "Output"]
}, Open  ]],
Cell[335407, 8549, 86, 1, 25, "Item"],
Cell[CellGroupData[{
Cell[335518, 8554, 490, 9, 40, "Input"],
Cell[336011, 8565, 610, 16, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[336658, 8586, 490, 9, 40, "Input"],
Cell[337151, 8597, 4276, 84, 181, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341464, 8686, 490, 9, 40, "Input"],
Cell[341957, 8697, 570, 12, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[342564, 8714, 486, 9, 40, "Input"],
Cell[343053, 8725, 6751, 125, 261, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[349853, 8856, 121, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[349999, 8861, 674, 19, 81, "Input"],
Cell[350676, 8882, 1415, 48, 70, "Output"],
Cell[352094, 8932, 13113, 264, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[365268, 9203, 99, 1, 37, "Subsection"],
Cell[CellGroupData[{
Cell[365392, 9208, 517, 13, 40, "Input"],
Cell[365912, 9223, 239, 7, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366188, 9235, 378, 7, 40, "Input"],
Cell[CellGroupData[{
Cell[366591, 9246, 136, 1, 23, "Print"],
Cell[366730, 9249, 136, 1, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[366893, 9254, 452, 10, 40, "Input"],
Cell[367348, 9266, 933, 26, 40, "Input"],
Cell[CellGroupData[{
Cell[368306, 9296, 228, 6, 40, "Input"],
Cell[368537, 9304, 194, 5, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[368768, 9314, 471, 10, 40, "Input"],
Cell[369242, 9326, 36275, 592, 324, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[405554, 9923, 1088, 28, 112, "Input"],
Cell[406645, 9953, 1153, 29, 55, "Output"]
}, Open  ]],
Cell[407813, 9985, 240, 5, 40, "Input"],
Cell[CellGroupData[{
Cell[408078, 9994, 408, 12, 61, "Input"],
Cell[408489, 10008, 151, 3, 40, "Output"]
}, Open  ]],
Cell[408655, 10014, 236, 5, 40, "Input"],
Cell[CellGroupData[{
Cell[408916, 10023, 130, 2, 40, "Input"],
Cell[409049, 10027, 163, 3, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[409249, 10035, 382, 9, 40, "Input"],
Cell[409634, 10046, 1263, 32, 235, "Output"]
}, Open  ]],
Cell[410912, 10081, 460, 11, 40, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[411421, 10098, 107, 1, 72, "Section"],
Cell[CellGroupData[{
Cell[411553, 10103, 106, 1, 40, "Input"],
Cell[411662, 10106, 278, 5, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[411977, 10116, 125, 2, 40, "Input"],
Cell[412105, 10120, 12237, 259, 81, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[424379, 10384, 106, 1, 40, "Input"],
Cell[424488, 10387, 276, 5, 40, "Output"]
}, Open  ]],
Cell[424779, 10395, 206, 3, 40, "Input"],
Cell[CellGroupData[{
Cell[425010, 10402, 179, 3, 40, "Input"],
Cell[425192, 10407, 13652, 286, 82, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[438881, 10698, 14347, 294, 82, "Input"],
Cell[453231, 10994, 749, 12, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454017, 11011, 137, 2, 40, "Input"],
Cell[454157, 11015, 1616, 28, 73, "Message"],
Cell[455776, 11045, 796, 14, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[456609, 11064, 117, 2, 40, "Input"],
Cell[456729, 11068, 8691, 217, 309, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465457, 11290, 185, 3, 40, "Input"],
Cell[465645, 11295, 276, 6, 40, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[465970, 11307, 33, 0, 72, "Section"],
Cell[466006, 11309, 503, 12, 40, "Input",
 InitializationCell->True],
Cell[466512, 11323, 305, 5, 40, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[466842, 11332, 183, 3, 40, "Input"],
Cell[467028, 11337, 824, 22, 40, "Output"]
}, Open  ]],
Cell[467867, 11362, 289, 6, 40, "Input"],
Cell[CellGroupData[{
Cell[468181, 11372, 106, 1, 40, "Input"],
Cell[468290, 11375, 278, 5, 40, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
