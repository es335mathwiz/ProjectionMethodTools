PrependTo[$Path,"../../../AMASeriesRepresentation/AMASeriesRepresentation/"]

(*"../../../paperProduction/occBind/docs/"*)


Get["prepSimple.mth"]

Get["genArbLin.mth"]


Print["occDir=",occDir]
occDir="~/Dropbox/Apps/Texpad/paperProduction/occBind/docs/"
Print["occDir=",occDir]

toOccDir[fName_String]:=CopyFile[fName,occDir <>fName,OverwriteTarget -> True];


trueVal=Flatten[simpRBCExactDR @@ anXEps]
numVals=30;

(*

arbMod = genSeriesReps[notLinMod,anXEps, theDist, 
   simpRBCExactDR, numVals];
theArbZs=genZsREExact[notLinMod,anXEps,theDist,simpRBCExactDR,numVals];
arbErrMatNorms=Norm[truncErrorMat[notLinMod[[3]],notLinMod[[2]],#-1] ,Infinity]&/@Range[numVals]


arbRes={arbErrMatNorms[[#]],Norm[theArbZs[[#]],Infinity],
arbErrMatNorms[[#]]*Norm[theArbZs[[#]],Infinity],
Norm[Flatten[arbMod[[#,{4,5,6}]]-trueVal],Infinity]}& /@ Range[numVals];

Export["arbBoundsVActual.pdf",ListPlot[Transpose[arbRes[[All,{-2,-1}]]],
PlotStyle->{Red,Blue},
PlotRange->All,PlotJoined->True,
PlotLegends->{Text[Subscript[B,n]],Text[Subscript[Z,n]]},
PlotLabel->"Arbitrary Linear Model: Bounds versus Actual"]]

toOccDir/@{
"arbBoundsVActual.pdf"
};



*)




simpMod = 
  genSeriesReps[ linMod,anXEps, theDist, 
   simpRBCExactDR, numVals];
theSimpZs=genZsREExact[linMod,anXEps,theDist,simpRBCExactDR,numVals];
simpErrMatNorms=Norm[truncErrorMat[notLinMod[[3]],notLinMod[[2]],#-1],Infinity]&/@Range[numVals]




simpRes={simpErrMatNorms[[#]],Norm[theSimpZs[[#]],Infinity],
simpErrMatNorms[[#]]*Norm[theSimpZs[[#]],Infinity],
Norm[Flatten[simpMod[[#,{4,5,6}]]-trueVal],Infinity]}& /@ Range[numVals];



Export["simpBoundsVActual.pdf",ListPlot[Transpose[simpRes[[All,{-2,-1}]]],
PlotStyle->{Red,Blue},
PlotRange->All,
PlotJoined->True,
PlotLegends->{Text[Subscript[B,n]],Text[Subscript[Z,n]]},
PlotLabel->"Linearized RBC Model: Bounds versus Actual"]]

toOccDir/@{
"simpBoundsVActual.pdf"
};

Get["prepBetter.mth"]

(*
exactEvalInterp = makeDREvalInterp[betterExactDR, theDist,
rbcEqnsCompiled,aGSpec]



Export["exactNormErrorZeroEQ"<>#<>".pdf",
Plot3D[exactEvalInterp[.1, xx, 1, yy, 0][[ToExpression[#]]], 
{xx, kLow, kHigh}, {yy, thLow,   thHigh},PlotLabel->"Numerical Error Iterating and Integrating\n the Exact RBC Decision Rule: equation "<>#]]& /@(ToString/@Range[4])


toOccDir/@{
"exactNormErrorZeroEQ1.pdf",
"exactNormErrorZeroEQ2.pdf",
"exactNormErrorZeroEQ3.pdf",
"exactNormErrorZeroEQ4.pdf"
};

kLow=

FindMaximum[{Norm[exactEvalInterp[.1, xx, 1, yy, 0]], 
  kLow <= xx <= kHigh && thLow <= yy <= thHigh}, {xx, yy}]



approxExactDR=Private`makeInterpFunc[betterExactDR,aGSpec];


approxEvalInterp = makeDREvalInterp[approxExactDR, theDist,
rbcEqnsCompiled,aGSpec]


Export["approxNormErrorZeroEQ"<>#<>".pdf",
Plot3D[approxEvalInterp[.1, xx, 1, yy, 0][[ToExpression[#]]], 
{xx, kLow, kHigh}, {yy, thLow,   thHigh},PlotRange->All,PlotLabel->"Numerical Error Iterating and Integrating\n the Approx RBC Decision Rule: equation "<>#]]& /@(ToString/@Range[4])



numNodes=15
betterGSpec={{1, 3}, 1, 
{{numNodes, 0.018732441104784652, 0.7492976441913861}, 
{numNodes, 9/10, 11/10}, 
{numNodes, -0.03, 0.09}}}


betterApproxExactDR=Private`makeInterpFunc[betterExactDR,betterGSpec];


betterApproxEvalInterp = makeDREvalInterp[betterApproxExactDR, theDist,
rbcEqnsCompiled,betterGSpec]


Export["betterApproxNormErrorZeroEQ"<>#<>".pdf",
Plot3D[betterApproxEvalInterp[.1, xx, 1, yy, 0][[ToExpression[#]]], 
{xx, kLow, kHigh}, {yy, thLow,   thHigh},PlotRange->All,PlotLabel->"Numerical Error Iterating and Integrating\n the BetterApprox RBC Decision Rule: equation "<>#]]& /@(ToString/@Range[4])







numNodes=30
betterGSpec={{1, 3}, 1, 
{{numNodes, 0.018732441104784652, 0.7492976441913861}, 
{numNodes, 9/10, 11/10}, 
{numNodes, -0.03, 0.09}}}


betterApproxExactDR=Private`makeInterpFunc[betterExactDR,betterGSpec];


betterApproxEvalInterp = makeDREvalInterp[betterApproxExactDR, theDist,
rbcEqnsCompiled,betterGSpec]


Export["betterApproxNormErrorZeroEQ"<>#<>".pdf",
Plot3D[betterApproxEvalInterp[.1, xx, 1, yy, 0][[ToExpression[#]]], 
{xx, kLow, kHigh}, {yy, thLow,   thHigh},PlotRange->All,PlotLabel->"Numerical Error Iterating and Integrating\n the BetterApprox RBC Decision Rule: equation "<>#]]& /@(ToString/@Range[4])




numNodes=45
betterGSpec={{1, 3}, 1, 
{{numNodes, 0.018732441104784652, 0.7492976441913861}, 
{numNodes, 9/10, 11/10}, 
{numNodes, -0.03, 0.09}}}


betterBetterBetterApproxExactDR=Private`makeInterpFunc[betterExactDR,betterGSpec];


betterBetterBetterApproxEvalInterp = makeDREvalInterp[betterBetterBetterApproxExactDR, theDist,rbcEqnsCompiled,betterGSpec]


Export["betterBetterBetterApproxNormErrorZeroEQ"<>#<>".pdf",
Plot3D[betterBetterBetterApproxEvalInterp[.1, xx, 1, yy, 0][[ToExpression[#]]], 
{xx, kLow, kHigh}, {yy, thLow,   thHigh},PlotRange->All,PlotLabel->"Numerical Error Iterating and Integrating\n the BetterBetterBetterApprox RBC Decision Rule: equation "<>#]]& /@(ToString/@Range[4])

(*

evalExpctPathErrDRREIntegrate[betterExactDR,anX,theDist,rbcEqnsCompiled]
Private`worstPathForErrDRREIntegrate[betterExactDR,anX,theDist,rbcEqnsCompiled]

bp=evalBadPathErrDRREIntegrate[betterExactDR,anX,theDist,rbcEqnsCompiled]
badXEps=Append[anX,bp[[2,-1,-1]]]
Norm[evalPathErrDRREIntegrate[betterExactDR,badXEps,theDist,rbcEqnsCompiled],Infinity]

betterApproxEvalInterp = makeDREvalInterp[betterApproxExactDR, theDist,rbcEqnsCompiled,betterGSpec]





anApproxEvalInterp = makeDREvalInterp[betterApproxExactDR, theDist,rbcEqnsCompiled,aGSpec];
thePts=Private`gridPts[aGSpec[[3]]]
evalPathErrDRREIntegrate[betterExactDR,Sequence[#],theDist,rbcEqnsCompiled]&/@thePts


evalPathErrDRREIntegrate[betterExactDR,Private`fillIn[{{},{1,3},#}],theDist,rbcEqnsCompiled]&/@(thePts[[{1,2}]])

(anApproxEvalInterp@@Private`fillIn[{{},{1,3},#}])&/@(thePts[[{1,2}]])
numTerms=4;

genTruncFunc[numTerms_Integer]:=
Function[{ig,kv,ig2,tv,ev},With[{aSer=
Private`genASeriesRep[linMod,{ig,kv,ig2,tv,ev},genZsREExact[Private`hmatSymbRE,linMod,{ig,kv,ig2,tv,ev},theDist,betterExactDR,numTerms],numTerms]},aSer[[{5,6,7,8}]]]]


numNodes=15
betterGSpec={{1, 3}, 1, 
{{numNodes, 0.018732441104784652, 0.7492976441913861}, 
{numNodes, 9/10, 11/10}, 
{numNodes, -0.03, 0.09}}}


numTerms=20;
{truncEvalInterp,truncEval} = 
makeDREvalInterp[genTruncFunc[numTerms], theDist,rbcEqnsCompiled,betterGSpec]

Export["ugly0NormErrorZeroEQ"<>#<>".pdf",
Plot3D[truncEvalInterp[.1, xx, 1, yy, 0][[ToExpression[#]]], 
{xx, kLow, kHigh}, {yy, thLow,   thHigh},PlotRange->All,PlotLabel->"Numerical Error Iterating and Integrating\n the BetterBetterBetterApprox RBC Decision Rule: equation "<>#]]& /@(ToString/@Range[4])




Needs["DifferentialEquations`InterpolatingFunctionAnatomy`"];


*)


*)


