Get["prep.mth"]
Print["without expectations this takes about 3 minutes on a linux box"]
(*compute z0 for time zero constraint only *)
Print["for one"]
aPath01=genPath[1]
try01={
(aPath01[[5,1]]>=0.02&&zzz$0$1[t]==0)||
(aPath01[[5,1]]==0.02&&zzz$0$1[t]>=0)
}

try01Func=Function @@ {{qtm1,rutm1,eps},try01}
try01Vals[qtm1_?NumberQ,rutm1_?NumberQ,eps_?NumberQ]:=
{zzz$0$1[t]}/.Flatten[Solve[try01Func[qtm1,rutm1,eps],{zzz$1$1[t],zzz$0$1[t]}]]

try01Vals[qtm1_?NumberQ,rutm1_?NumberQ,eps_?NumberQ]:=
{zzz$0$1[t]}/.Flatten[Solve[try01Func[qtm1,rutm1,eps],{zzz$1$1[t],zzz$0$1[t]}]]

slv01=Solve[try01,{zzz$0$1[t]},Reals]//FullSimplify//Chop
zzz$0$1Func= Function @@ {{qtm1,rutm1,eps},Piecewise[List @@@ (Last/@Flatten[slv01])]}

hmatApp01NotFunc=hmatN .(aPath01Ext=genPath[1,1]/.zzz$0$1[t]->zzz$0$1Func[qtm1,rutm1,eps]//FullSimplify//Chop)//FullSimplify//Chop
Export["prettyhmatApp01.pdf",MatrixForm[hmatApp01NotFunc//.latexSubs/.morePaperSubs]]
Export["prettyPath01.pdf",MatrixForm[aPath01Ext//.latexSubs/.morePaperSubs]]





aPath01ExtFunc[qtm1Arg_?NumberQ,rutm1Arg_?NumberQ,epsArg_?NumberQ]:=
aPath01Ext/.{qtm1->qtm1Arg,rutm1->rutm1Arg,eps->epsArg}


hmatApp01[qtm1_?NumberQ,rutm1_?NumberQ,eps_?NumberQ]:=
With[{tp=aPath01ExtFunc[qtm1,rutm1,eps]},
Join[hmatN.tp[[Range[9]]]]//Chop]


redExport["prettyhapp01A.pdf",happ02AG=
(Plot3D[hmatApp01[qtm1,rutm1,0][[2,1]]*(aPath01ExtFunc[qtm1,rutm1,0][[5,1]]-.02),{qtm1,qLow,qHigh}//.lucaSubs,{rutm1,ruLow,ruHigh}//.lucaSubs,
PlotRange->All,PlotLabel->
{"\!\(\*SubscriptBox[\(H\), \(2\)]\)[q,r,0]  constraint for one period"}])]


projResults=genProjResults @@ ({modSymb,theEqns,modClass,lucaBasis,simp}=genProjComponents[1])
num01=genPolyFuncs[modSymb,projResults]
Print["need last basis here"]
aBasis=projResults[getTheWeightedStochasticBasis[]];
{{qLow,qHigh},{ruLow,ruHigh},{epsLow,epsHigh}}=aBasis[getRanges[]];
theStatePoly = aBasis[getTheState[]];
nodePts01=theStatePoly[getXformedChebNodePts[]];
nodePts01Subs=gtXFormedChebSubsNotStrings[aBasis];
numEpsilon=Length[Union[nodePts01[[All,3]]]];
numOuterOther=Length[nodePts01]/numEpsilon;
ptsSByEpsilon=Partition[Sort[nodePts01,#[[3]]>#2[[3]]&],numOuterOther];
zeroColloc=ListPointPlot3D[ReplacePart[#,3->0]&/@ ptsSByEpsilon[[3]],
PlotStyle->{PointSize[.04]}]

redExport["prettyZ01.pdf",
z01G=Plot3D[try01Vals[qq,ru,0],{qq,qLow,qHigh},{ru,ruLow,ruHigh},PlotRange->All,
PlotLabel->
{"\!\(\*SubscriptBox[\(z\), \(t\)]\)[q,r]  constraint for one period"}]]

redExport["prettyrr01.pdf",
r01G=Plot3D  @@{aPath01Ext[[5,1]]/.eps->0,{qtm1,qLow,qHigh},{rutm1,ruLow,ruHigh},PlotRange->All,
PlotLabel->
{"\!\(\*SubscriptBox[\(r\), \(t\)]\)[q,r,0]  constraint for one period"}}]

redExport["prettyNumDiff01.pdf",
diff01G=Show[zeroColloc,Plot3D[(aPath01ExtFunc[qq,ru,0][[5,1]] -num01[[2]][qq,ru,0]),{qq,qLow,qHigh},{ru,ruLow,ruHigh},PlotRange->All,PlotLabel->
{"\!\(\*SubscriptBox[\(r\), \(t\)]\)[q,r,0] - \(\*SubscriptBox[\(r\), \(t\)]\)[q,r,0] constraint for one symbolic less numeric"},PlotRange->All,DisplayFunction->$DisplayFunction],PlotRange->All]]









