(*work up repAgent in smolyak paper*)
(*copying stuff from 
~/scratch/learnProjection/proto/authoritative/
*)
(*Needs["JLink`"]
Needs["ProjectionInterface`"]
InstallJava[]
*)
(*from pathsForProjection.mth*)
isWindowsQ[]:=$OperatingSystem=="Windows"
If[isWindowsQ[],
$MAVENREPO="R:/Software/mavenRepositories/tryRep";
AddToClassPath[$MAVENREPO<>"/org/apache/commons/commons-math/2.0/commons-math-2.0.jar"];
AddToClassPath[$JamaJar=$MAVENREPO<>"/math/nist/gov/Jama/1.0.3/Jama-1.0.3.jar"];
AddToClassPath[$ProjJar=$MAVENREPO<>"/gov/frb/ma/msu/ProjectionMethodToolsJava/0.0.1-SNAPSHOT/ProjectionMethodToolsJava-0.0.1-SNAPSHOT.jar"],
$MAVENREPO="/msu/res1/Software/mavenRepositories/tryRep/";
AddToClassPath[$MAVENREPO<>"/org/apache/commons/commons-math/2.0/commons-math-2.0.jar"];
AddToClassPath[$JamaJar=$MAVENREPO<>"/math/nist/gov/Jama/1.0.3/Jama-1.0.3.jar"];
AddToClassPath[$ProjJar=$MAVENREPO<>"/gov/frb/ma/msu/ProjectionMethodToolsJava/0.0.1-SNAPSHOT/ProjectionMethodToolsJava-0.0.1-SNAPSHOT.jar"];
]
AddToClassPath[Directory[]];

(*
PrependTo[$Path,$PROJHOME<>"/mathematicaFiles"]
*)



doExportState[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ]:=
Module[{xxX,xxXVals,xxXDrvs},
With[{vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime",vName,vTime]},
xxX=vt[evalVar[aBasis]];
xxXVals=xxX[getTheVal[]][getArray[]];
xxXDrvs=xxX[getTheJac[]][getArray[]];
xxXDrvsLft=xxXDrvs[[All,Range[6]]];
xxXDrvsRght=xxXDrvs[[All,6+Range[6]]];
Export[varFName=ridDollar[vName<>"X"<>ToString[vTime]<>"ValsX.pdf"],TableForm[xxXVals]];
Export[dvarFName=ridDollar[vName<>"X"<>ToString[vTime]<>"DrvsX.pdf"],TableForm[xxXDrvs]];
Export[dvarFName=ridDollar[vName<>"X"<>ToString[vTime]<>"DrvsXLft.pdf"],TableForm[xxXDrvsLft]];
Export[dvarFName=ridDollar[vName<>"X"<>ToString[vTime]<>"DrvsXRght.pdf"],TableForm[xxXDrvsRght]];
{varFName,dvarFName}]]

doExportNonState[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ]:=
Module[{xxX,xxXVals,xxXDrvs},
With[{vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime]},
xxX=vt[evalVar[aBasis]];
xxXVals=xxX[getTheVal[]][getArray[]];
xxXDrvs=xxX[getTheJac[]][getArray[]];
xxXDrvsLft=xxXDrvs[[All,Range[6]]];
xxXDrvsRght=xxXDrvs[[All,6+Range[6]]];
Export[varFName=vName<>"X"<>ToString[vTime]<>"ValsX.pdf",TableForm[xxXVals]];
Export[dvarFName=vName<>"X"<>ToString[vTime]<>"DrvsX.pdf",TableForm[xxXDrvs]];
Export[dvarFName=vName<>"X"<>ToString[vTime]<>"DrvsXLft.pdf",TableForm[xxXDrvsLft]];
Export[dvarFName=vName<>"X"<>ToString[vTime]<>"DrvsXRght.pdf",TableForm[xxXDrvsRght]];
{varFName,dvarFName}]]

doExportSys[theModEqns_?JavaObjectQ,theBasisVal_?JavaObjectQ]:=
Module[{sysVal=theModEqns[updateValDrv[theBasisVal]],xxXVals,xxXDrvs},
xxXVals=sysVal[getTheVal[]][getArray[]];
xxXDrvs=sysVal[getTheJac[]][getArray[]];
xxXDrvsLft=xxXDrvs[[All,Range[6]]];
xxXDrvsRght=xxXDrvs[[All,6+Range[6]]];
Export[sysFName=ClassName[theModEqns]<>"X"<>ToString[vTime]<>"ValsX.pdf",TableForm[xxXVals]];
Export[dsysFName=ClassName[theModEqns]<>"X"<>ToString[vTime]<>"DrvsX.pdf",TableForm[xxXDrvs]];
Export[dsysFName=ClassName[theModEqns]<>"X"<>ToString[vTime]<>"DrvsXLft.pdf",TableForm[xxXDrvsLft]];
Export[dsysFName=ClassName[theModEqns]<>"X"<>ToString[vTime]<>"DrvsXRght.pdf",TableForm[xxXDrvsRght]];
{sysFName,dsysFName}]






ridDollar[aStr_String]:=StringReplace[aStr,{"$"->"X"}]



doExportXFormedCheb[theBasis_?JavaObjectQ]:=
With[{theStatePoly=theBasis[getTheState[]]},
Module[{vNames=theStatePoly[getStateVariableNames[]]},
Export["xFormedChebPolys.pdf",
TableForm[getPhiFunc[#,theBasis]&/@theStatePoly[getStateVariableNames[]]]];
]]


doExportOrderedOuter[theBasis_?JavaObjectQ]:=
Module[{theStatePoly},
With[{theStatePoly=theBasis[getTheState[]]},
Module[{vNames=theStatePoly[getStateVariableNames[]],
thePows=theStatePoly[getTheGrid[][generatePolyOrdersForOuterProduct[]]]},
With[{thePolys=getPhiFunc[#,theBasis]&/@theStatePoly[getStateVariableNames[]]},
Export["xFormedOrderedOuter.pdf",
TableForm[theRes=Expand[prodHelper01[thePolys,#]&/@ thePows]]
];theRes]]]]

prodHelper01[polys_List,ords_List]:=
With[{prep=MapIndexed[polys[[#2[[1]],#1+1]]&,ords]},Times @@ prep]


doExportRawCheb[theBasis_?JavaObjectQ]:=
With[{theStatePoly=theBasis[getTheState[]]},
Module[{vNames=theStatePoly[getStateVariableNames[]]},
Export["rawChebPolys.pdf",
TableForm[getRawPhiFunc[#,theBasis]&/@theStatePoly[getStateVariableNames[]]]];
]]

toSymbSubs[aWSB_?JavaObjectQ]:=
With[{theStatePoly=aWSB[getTheState[]]},
With[{vNames=theStatePoly[getStateVariableNames[]]},
#->ToExpression[#]&/@vNames]]


doExportOuterEval[aWSB_?JavaObjectQ]:=
With[{aStatePoly=aWSB[getTheState[]]},
With[{ePoints=
aStatePoly[getTheGrid[]][getXformedChebNodePts[#]]&/@
aStatePoly[getStateVariableNames[]]},
With[{eSubs=
{qq->#[[1]],ru->#[[2]],uu$Shock->#[[3]]}& /@Transpose[ePoints]},
With[{ooPolys=TableForm[theRes=Identity[
(doExportOrderedOuter[aWSB]/.toSymbSubs[aWSB])/.eSubs//Chop]]},
Export["outerXformedEval.pdf",ooPolys];theRes]]]]






doExportOuterEvalTB[aBasis_?JavaObjectQ]:=
Module[{theStatePoly},
With[{theStatePoly=aBasis[getTheState[]]},
Print["huh",Methods[theStatePoly]];
With[{ePoints=
theStatePoly[getTheGrid[]][getXformedChebNodePts[#]]&/@
theStatePoly[getStateVariableNames[]]},
With[{eSubs=
{qq->#[[1]],uu$Shock->#[[2]]}& /@Transpose[ePoints]},
With[{ooPolys=TableForm[theRes=Identity[
(doExportOrderedOuter[aBasis]/.toSymbSubs[aBasis])/.eSubs//Chop]]},
Export["outerXformedEval.pdf",ooPolys];theRes]]]]]




doNVal[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ]:=
Module[{vt,xxX,xxXVals},
aBasis[setAllWeights[theMat]];
vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime];
xxX=vt[evalVar[aBasis]];
xxXVals=xxX[getTheVal[]][getArray[]]]

stateVarQ[vName_String,aBasis_?JavaObjectQ]:=
With[{theRow=Position[gtStateVars[aBasis],vName]},
If[theRow==={},False,True]]
nonStateVarQ[vName_String,aBasis_?JavaObjectQ]:=
With[{theRow=Position[gtNonStateVars[aBasis],vName]},
If[theRow==={},False,True]]


doVal[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ]:=
Module[{vt,xxX,xxXVals},
aBasis[setAllWeights[theMat]];
vt=
Which[stateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime",vName,vTime],
nonStateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime],
True,Throw[vName,"-doVal:not in state or non-state-"]];
xxX=vt[evalVar[aBasis]];
xxXVals=xxX[getTheVal[]][getArray[]]]

doDrv[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ]:=
Module[{vt,xxX,xxXVals},
aBasis[setAllWeights[theMat]];
vt=
Which[stateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime",vName,vTime],
nonStateVarQ[vName,aBasis],
JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime],
True,Throw[vName,"-doDrv:not in state or non-state-"]];xxX=vt[evalVar[aBasis]];
xxXDrvs=xxX[getTheJac[]][getArray[]]]


doVal[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ,{ii_Integer,jj_Integer},val_?NumberQ]:=
doVal[vName,vTime,aBasis,ReplacePart[theMat,{ii,jj}->theMat[[ii,jj]]+val]]

doNumDrv[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,
theMat_?MatrixQ,{ii_Integer,jj_Integer},val_?NumberQ]:=
(doVal[vName,vTime,aBasis,theMat,{ii,jj},val]-doVal[vName,vTime,aBasis,theMat])/val

varNumberState[vName_String,aBasis_?JavaObjectQ]:=
Position[
Which[
stateVarQ[vName,aBasis],gtStateVars[aBasis],
True,Throw[vName,"-varNumber:variable not found in state-"]],vName][[1,1]]



cmpDrvs[vName_String,vTime_?NumberQ,aBasis_?JavaObjectQ,theMat_?MatrixQ,val_?NumberQ]:=
With[{theRow=Position[
Which[
stateVarQ[vName,aBasis],gtStateVars[aBasis],
nonStateVarQ[vName,aBasis],gtNonStateVars[aBasis],
True,Throw[vName,"-cmpDrvs:variable not found-"]],vName],cols=Length[tryMat[[1]]]},
If[Not[Or[stateVarQ[vName,aBasis],nonStateVarQ[vName,aBasis]]],
Throw[vName,"-variable not found-"],
doDrv[vName,vTime,aBasis,theMat][[All,Range[cols]]]-
ArrayFlatten[{doNumDrv[vName,vTime,aBasis,theMat,{theRow[[1,1]],#},val]&/@Range[cols]}]]]


getPhiFunc::usage="getPhiFunc[vName_String,theBasis_?JavaObjectQ]"

getPhiFunc[vName_String,theBasis_?JavaObjectQ]:=
Module[{theStatePoly=theBasis[getTheState[]],
vNumber=varNumberState[vName,theBasis]},
With[{rng=theStatePoly[getRanges[]][[vNumber]],
ord=theStatePoly[getOrders[]][[vNumber]]},
phiFunc[vName,ord,rng[[1]],rng[[2]]]//Expand//Chop]]

getRawPhiFunc[vName_String,theBasis_?JavaObjectQ]:=
Module[{theStatePoly=theBasis[getTheState[]],
vNumber=varNumberState[vName,theBasis]},
With[{ord=theStatePoly[getOrders[]][[vNumber]]},
phiFunc[vName,ord,-1,1]]//Expand//Chop]



forIterate[wts_List]:=
With[{state0=wts. ooPolys//Chop},
With[{someSubs=qq->#&/@state0[[1]]},
wts . (preEvalPolys/.#)&/@someSubs]]


(*
doExportRawEvalPts[aWSB?JavaObjectQ]:=
Module[{theGr=gtGrid[aWSB]},
With[{thGr[]},
Export["rawEvalPts.pdf"]]]

stPolys=getPhiFunc[#,theBasis]&/@theStatePoly[getStateVariableNames[]]
daGr=theStatePoly[getTheGrid[]]
daOrds=daGr[generatePolyOrdersForOuterProduct[]]
cp=daGr[getTheChebPoly[]]

ePoints=daGr[getXformedChebNodePts[#]]&/@theStatePoly[getStateVariableNames[]]
eSubs={qq->#[[1]],uu$Shock->#[[2]]}& /@Transpose[ePoints]


(*time 0 state and non state*)

ooPolys=(doExportOrderedOuter[theBasis]/.toSymbSubs[theBasis])/.eSubs
{state0,nstate0}=tryMat . ooPolys//Chop;


*)

modelDiags::usage="modelDiags[aMod_?JavaObjectQ,theWts_?MatrixQ,aWSB_?JavaObjectQ]"

modelDiags[aMod_?JavaObjectQ,modParams_?VectorQ,theWts_?MatrixQ,
aWSB_?JavaObjectQ]:=
Module[{theStatePoly=aWSB[getTheState[]],theOrds,matRows,matCols,
stateVars=gtStateVars[aWSB],nStateVars=gtNonStateVars[aWSB]},
theOrds=theStatePoly[getOrders[]];
{matRows,matCols}=Dimensions[theWts];
numShks=aWSB[getNumberOfShocks[]];
If[Or[matRows=!=(modMatRows=Length[stateVars]+Length[nStateVars]-numShks),
matCols=!=(modMatCols=(Times @@ (theOrds+1)))],
Throw[{"problem with weight matrix dimensions",{matRows,modMatRows},{matCols,modMatCols}}]];
aMod[updateParams[modParams]];
aWSB[setAllWeights[theWts]];
With[{theRes=aMod[updateValDrv[aWSB]],
theStatePoly=aWSB[getTheState[]]},
With[{theVals=Partition[Flatten[theRes[getTheVal[]][getArray[]]],matCols],
theDrvs=theRes[getTheJac[]][getArray[]]},
With[{xformedNodes=theStatePoly[getXformedChebNodePts[]]},
{stateVars,nStateVars,
theRes,xformedNodes,theVals,theDrvs}]]]]

