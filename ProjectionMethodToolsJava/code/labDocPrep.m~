If[$OperatingSystem==="Unix",
Needs["ProjectionInterface`"]
Needs["JLink`"]; (*Needs["OccasionallyBindingConstraints`"]; *)
Get["prepPackages.mth"]; Get["applyReliable.mth"];
<<JavaGraphics`

lucaSubs = {betap -> 99/100, phip -> 1, rhop -> 1/2, sigmap -> 1, 
  rUnderBar -> 2/100, qLow -> -1/2, qHigh -> 1/2, 
  ruLow -> -4*sigma$u/(1 - rho$ru), ruHigh ->  4*sigma$u/(1 - rho$ru),
   integOrder -> {50}, sigma$u ->2/100, theMean -> {0}, rho$ru -> 1/2,
   adj -> 1}; 


mySubs={betap -> 99/100, phip -> 1, rhop -> 1/2, sigmap -> 1, 
  (*rUnderBar -> rub,*) qLow -> -1/2, qHigh -> 1/2, 
  ruLow -> -4*sigma$u/(1 - rho$ru), ruHigh ->  4*sigma$u/(1 - rho$ru),
   integOrder -> {50}, sigma$u ->2/100, theMean -> {0}, rho$ru -> 1/2,
   adj -> 1}




myN[xx_]:=(N[xx/.{t-1->$tm1,t+1->$tp1}])/.{$tm1->t-1,$tp1->t+1}

numIt[xx_]:=xx//.lucaSubs//myN//Expand//Chop

forFzComp[xtm1_?MatrixQ,epst_?MatrixQ,zt_?MatrixQ,ztp1Exp_?MatrixQ]:=(bmat .xtm1 + 
        phimat .(psieps . epst +
           psiz.zt) + 
        fmat .phimat . 
         psiz . ztp1Exp)//numIt


fzComp[xt_?MatrixQ,xtm1_?MatrixQ,epst_?MatrixQ,zt_?MatrixQ,ztp1Exp_?MatrixQ]:=
With[{theComp=forFzComp[xtm1,epst,zt,ztp1Exp]},
With[{zZap=Solve[myN[((theComp[[2,1]]//.lucaSubs))] == rUnderBar,zt[[1,1]]]//Flatten},Print[zZap//InputForm];
Join[Thread[
Flatten[xt-theComp] ==0],
{(discrep[t] - (theComp[[2,1]] - rUnderBar)/.zt[[1,1]]->0) == 0,
zt[[1,1]]-eqvdIf[discrep[t]>=0,0,
zt[[1,1]]/.zZap]==0}]]]


fzIterComp[
xt_?MatrixQ,xtm1_?MatrixQ,epst_?MatrixQ,zt_?MatrixQ,ztp1Exp_?MatrixQ]:=
With[{theComp=forFzComp[xtm1,epst,zt,ztp1Exp]},
With[{zZap=Solve[myN[
{theComp[[1,1]]==xt[[1,1]],theComp[[3,1]]==xt[[3,1]],myN[((theComp[[2,1]]))]== rUnderBar}//.
lucaSubs] ,{xt[[1,1]],xt[[3,1]],zt[[1,1]]}]//Flatten},Print[zZap//InputForm];
{zZap,Thread[
Flatten[xt-theComp] ==0]}]]



doIter[{zsubNow_List,eqnsNow_List}]:=
fzIterComp[
Transpose[{{qt,rt,rut}}],Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{zz/.zsubNow/.{eps->0,qtm1->qt,rtm1->rt,rutm1->rut}}}]//.lucaSubs//myN//Expand//Chop




forSimp = Union[Cases[bmat, Sqrt[___], Infinity]][[1]];
latexSubs = Join[N[lucaSubs],{(*forSimp -> \[Nu],*) 
betap -> Subscript[\[Beta], p], 
   phip -> Subscript[\[Phi], p], rhop -> Subscript[\[Rho], p], 
   rho$ru -> Subscript[\[Rho], ru], sigmap -> Subscript[\[Sigma], p],
xx_[yy:t+_.]->Subscript[xx,yy],zt0->Subscript[z,0],
uu$Shock->Subscript[\[Epsilon],t],
Subscript[discrep,t]->\[Delta],eqvdIf->\[CurlyTheta],
Subscript[ru,y:t+_.]->Subscript[Subscript[r,u],y]}];
Export["prettyHmat.pdf", MatrixForm[hmat //. latexSubs]];
Export["prettyBmat.pdf", MatrixForm[bmat //. latexSubs]];
Export["prettyPhimat.pdf", MatrixForm[phimat //. latexSubs]];
Export["prettyFmat.pdf", MatrixForm[fmat //. latexSubs]];
Export["prettyHmatCons.pdf", MatrixForm[hmatCons //. latexSubs]];
Export["prettyBmatCons.pdf", MatrixForm[bmatCons //. latexSubs]];
Export["prettyPhimatCons.pdf", MatrixForm[phimatCons //. latexSubs]];
Export["prettyFmatCons.pdf", MatrixForm[fmatCons //. latexSubs]];

applyBmat[xtm1_?MatrixQ,bmat_?MatrixQ,num_?NumberQ]:=
ArrayFlatten[Transpose[{NestList[bmat . #&,xtm1,num]}]]

applyFormula[xtm1_?MatrixQ,epst_?MatrixQ,zt_?MatrixQ,ztp1_?MatrixQ]:=
With[{xt=forFzComp[xtm1,epst,zt,ztp1]},xt]

compZ0[xtm1_?MatrixQ,epst_?MatrixQ,zt_?MatrixQ,ztp1_?MatrixQ]:=
With[{theComp=applyFormula[xtm1,epst,zt,ztp1]},
With[{zZap=(Solve[myN[((theComp[[2,1]]//.lucaSubs))] == rUnderBar,zt[[1,1]]]//Flatten)},{zZap,theComp/.zZap}]]






Get["thirdRecursion.mth"];

hmatN=hmat//.lucaSubs//myN;

morePaperSubs={
qtm1->Subscript[q,t-1],
rutm1->Subscript[ru,t-1],
rtm1->Subscript[rr,t-1],
eps->Subscript[\[Epsilon],t]
}

redExport[fName_String,gObj_Graphics3D]:=Export[fName,gObj,"AllowRasterization" -> True,ImageSize -> 360, ImageResolution -> 600,PlotRange->All]





doEpsValPlot[varIndx_Integer,epsIndx_Integer,theFuncs_List]:=
Show[
ListPointPlot3D[doAnEps[ptsSByEpsilon[[epsIndx]],varIndx],
PlotStyle->{PointSize[Large]},DisplayFunction->$DisplayFunction],
Plot3D[theFuncs[xx,yy,ptsSByEpsilon[[epsIndx,1,3]]][[varIndx]],{xx,-.5,.5},{yy,-.15,.15}],
PlotRange->All]

doAnEps[theVals:{
{_?NumberQ,_?NumberQ,xx_?NumberQ}..},theFuncs_List,pick_Integer]:=
{#[[1]],#[[2]],(theFuncs @@ #)[[pick]]}& /@ theVals


