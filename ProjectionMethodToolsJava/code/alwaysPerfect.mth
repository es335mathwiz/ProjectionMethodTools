Get["ProjectionInterface`"]
Get["paperFocus.mth"]


(* to validate code*)

once = NestList[doRecurIneqOcc, {}, 1];
onePer=genPath[1,1];
oneZEqn=onePer[[5,1]]>=0.02;

zz0Sub=Reduce[oneZEqn,{zzz$0$1[t]},Reals]//FullSimplify
zz0Func=Function @@{{qtm1,rutm1,eps},
Piecewise[{{0.0430556 - 1.3289 eps - 0.57639 qtm1 - 0.664452 rutm1,
0.617296 eps + 0.267742 qtm1 + 0.308648 rutm1 >0.02}},0]};


oneWithSub=onePer/.{zzz$0$1[t]->once[[-1,-1,3]][qtm1,rutm1,eps]}
Plot3D @@ ({{0.02,oneWithSub[[5,1]]} /. eps -> 0, {qtm1, qLow,      qHigh}, {rutm1, ruLow, ruHigh}, PlotRange -> All} //numIt)





twice = NestList[doRecurIneqOcc, once[[-1]], 1];
twoPer=({qqt,rrt,rut}-thePath2=genPath[2,1][[{4,5,6}]])/.zzz$0$1[t]->zz0Func[qqt,rut,0];



thePath2=Flatten[genPath[2,1][[{4,5,6}]]];
tryNow2={qt,rrt,rut}-thePath2/.zzz$0$1[t]->zz0Func[qt,rut,0]
zZap=zzz$1$1[t]/.Solve[tryNow2[[2]]==0.02,zzz$1$1[t]]//FullSimplify
noZEqn=tryNow2[[2]]/.zzz$1$1[t]->0

tryNow2Ineq={tryNow2[[1]]==0,tryNow2[[2]]==0,tryNow2[[3]]==0,
zzz$1$1[t]==(If @@ {noZEqn>0.02,0,zZap[[1]]})};
Reduce[tryNow2Ineq,{qt,rrt,rut,zzz$1$1[t]},Reals]
(*
sample output for twice

theEqn={-0.2677422653638917*qq$1$1[-1 + t] + qq$1$1[t] - 
      0.30864815234034326*ru$1$1[-1 + t] + 0.14193812291113334*zzz$0$1[t] + 
      0.5354845307277833*zzz$1$1[t] - 0.6172963046806865*eps[ru][t], 
     -0.5*ru$1$1[-1 + t] + ru$1$1[t] - eps[ru][t], 
     0.02 + discrep[t] - 0.2677422653638917*qq$1$1[-1 + t] - 
      0.30864815234034326*ru$1$1[-1 + t] + 0.14193812291113334*zzz$0$1[t] - 
      0.6172963046806865*eps[ru][t], 
     -eqvdIf[0. + 0.2677422653638917*
           Piecewise[{{0. + 0.2677422653638917*qq$1$1[t] + 
               0.30864815234034326*ru$1$1[t], 
              0. + 0.2677422653638917*qq$1$1[t] + 
                0.30864815234034326*ru$1$1[t] >= 0.02}}, 
            0.5763904177042347*(-0.03999999999999997 + 1.*qq$1$1[t] + 
               1.1527808354084699*ru$1$1[t])] + 0.15432407617017163*ru$1$1[t]\
          < 0.02, 0.043055616708169354 - 
         0.5763904177042344*Piecewise[{{0. + 0.2677422653638917*qq$1$1[t] + 
              0.30864815234034326*ru$1$1[t], 
             0. + 0.2677422653638917*qq$1$1[t] + 
               0.30864815234034326*ru$1$1[t] >= 0.02}}, 
           0.5763904177042347*(-0.03999999999999997 + 1.*qq$1$1[t] + 
              1.1527808354084699*ru$1$1[t])] - 0.3322259136212621*ru$1$1[t], 0]
        + zzz$0$1[t], -eqvdIf[discrep[t] >= 0, 0, 
        0.043055616708169354 - 0.5763904177042344*qq$1$1[-1 + t] - 
         0.6644518272425242*ru$1$1[-1 + t] + 0.30556167081693936*zzz$0$1[t] - 
         1.3289036544850483*eps[ru][t]] + zzz$1$1[t]};

zZap=    0.043055616708169354 - 0.5763904177042344*qq$1$1[-1 + t] - 
     0.6644518272425242*ru$1$1[-1 + t] + 0.30556167081693936*zzz$0$1[t] - 
     1.3289036544850483*eps[ru][t];
 
zEqns={-eqvdIf[0. + 0.2677422653638917*
           Piecewise[{{0. + 0.2677422653638917*qq$1$1[t] + 
               0.30864815234034326*ru$1$1[t], 
              0. + 0.2677422653638917*qq$1$1[t] + 
                0.30864815234034326*ru$1$1[t] >= 0.02}}, 
            0.5763904177042347*(-0.03999999999999997 + 1.*qq$1$1[t] + 
               1.1527808354084699*ru$1$1[t])] + 0.15432407617017163*ru$1$1[t]\
          < 0.02, 0.043055616708169354 - 
         0.5763904177042344*Piecewise[{{0. + 0.2677422653638917*qq$1$1[t] + 
              0.30864815234034326*ru$1$1[t], 
             0. + 0.2677422653638917*qq$1$1[t] + 
               0.30864815234034326*ru$1$1[t] >= 0.02}}, 
           0.5763904177042347*(-0.03999999999999997 + 1.*qq$1$1[t] + 
              1.1527808354084699*ru$1$1[t])] - 0.3322259136212621*ru$1$1[t], 0]
        + zzz$0$1[t]} 
zSubs={zzz$0$1[t] -> 
      Piecewise[{{0.043055616708169354 - 
          0.5763904177042344*Piecewise[{{0. + 0.2677422653638917*qq$1$1[t] + 
               0.30864815234034326*ru$1$1[t], 
              0. + 0.2677422653638917*qq$1$1[t] + 
                0.30864815234034326*ru$1$1[t] >= 0.02}}, 
            0.5763904177042347*(-0.03999999999999997 + 1.*qq$1$1[t] + 
               1.1527808354084699*ru$1$1[t])] - 0.3322259136212621*ru$1$1[t], 
         0. + 0.2677422653638917*
            Piecewise[{{0. + 0.2677422653638917*qq$1$1[t] + 
                0.30864815234034326*ru$1$1[t], 
               0. + 0.2677422653638917*qq$1$1[t] + 
                 0.30864815234034326*ru$1$1[t] >= 0.02}}, 
             0.5763904177042347*
              (-0.03999999999999997 + 1.*qq$1$1[t] + 
                1.1527808354084699*ru$1$1[t])] + 0.15432407617017163*ru$1$1[t]\
           < 0.02}}, 0]}



{polys,crpolys}={{Piecewise[{{0.06807656776005006 + 
         qq$1$1*(-0.2772801248338851 + 
            ru$1$1*(-0.00008873540951605365 + 
               ru$1$1*(0.000010510396905363706 - 
                  1.144623294664428*^-6*ru$Shock) + 
               9.663632849281731*^-6*ru$Shock) + 
            0.00038571214487409197*ru$Shock) + 
         ru$1$1*(-0.35641431046713656 + 
            ru$1$1*(0.00005024030372802769 - 5.471365400936505*^-6*ru$Shock) + 
            0.0004181817767764732*ru$Shock) - 0.7118821527543032*ru$Shock, 
        qq$1$1*(0.27053495374507686 + 
              ru$1$1*(-0.00008025812043642246 + 
                 ru$1$1*(9.506291854245685*^-6 - 
                    1.0352723308378283*^-6*ru$Shock) + 
                 8.740422941649969*^-6*ru$Shock) + 
              0.0003488633449256187*ru$Shock) + 
           ru$1$1*(0.3279358905912701 + 
              ru$1$1*(0.0003168897207065571 - 
                 0.000034510528900705574*ru$Shock) + 
              0.0026832294333479223*ru$Shock) + 0.6616278357266734*ru$Shock >= 
          -0.37337902259049605 && 
         82634.91448629537*ru$Shock + 
           ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
              ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
          59475.08501476743 && 41437.49802478351*ru$Shock + 
           ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
              ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
          55565.5036196127}, {0.1413952385536321 + 
         qq$1$1*(-0.2882751864417127 + 
            ru$1$1*(-0.00019102788902828258 + 
               ru$1$1*(0.000022626581030403464 - 
                  2.4641230925156815*^-6*ru$Shock) + 
               0.00002080368359835745*ru$Shock) + 
            0.0008303537134692402*ru$Shock) + 
         ru$1$1*(-0.384298230790315 + 
            ru$1$1*(0.00010815636303079866 - 
               0.000011778650578653083*ru$Shock) + 
            0.0009002537147614539*ru$Shock) - 0.7665589230214668*ru$Shock, 
        qq$1$1*(0.27053495374507686 + 
              ru$1$1*(-0.00008025812043642246 + 
                 ru$1$1*(9.506291854245685*^-6 - 
                    1.0352723308378283*^-6*ru$Shock) + 
                 8.740422941649969*^-6*ru$Shock) + 
              0.0003488633449256187*ru$Shock) + 
           ru$1$1*(0.3279358905912701 + 
              ru$1$1*(0.0003168897207065571 - 
                 0.000034510528900705574*ru$Shock) + 
              0.0026832294333479223*ru$Shock) + 0.6616278357266734*ru$Shock >= 
          -0.37337902259049605 && 
         (82634.91448629537*ru$Shock + 
             ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            59475.08501476743 || 
           41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            55565.5036196127) && 
         (60574.33526520564*ru$Shock + 
             ru$1$1*(30700.608536864445 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.97736772618464*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            57381.56465604092 || 
           41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
            55565.5036196127)}, 
       {-0.2677422653638917*qq$1$1 - 0.30864815234034326*ru$1$1 - 
         0.6172963046806865*ru$Shock, 
        qq$1$1*(0.27053495374507686 + 
             ru$1$1*(-0.00008025812043642246 + 
                ru$1$1*(9.506291854245685*^-6 - 
                   1.0352723308378283*^-6*ru$Shock) + 
                8.740422941649969*^-6*ru$Shock) + 
             0.0003488633449256187*ru$Shock) + 
          ru$1$1*(0.3279358905912701 + 
             ru$1$1*(0.0003168897207065571 - 
                0.000034510528900705574*ru$Shock) + 
             0.0026832294333479223*ru$Shock) + 0.6616278357266734*ru$Shock >= 
         -0.37337902259049605}, 
       {0.16960954712239112 + qq$1$1*
          (-0.5969233387820556 + 
            ru$1$1*(-0.00019102788902828255 + 
               ru$1$1*(0.00002262658103040346 - 
                  2.464123092515681*^-6*ru$Shock) + 
               0.000020803683598357446*ru$Shock) + 0.00083035371346924*ru$Shock
            ) + ru$1$1*(-0.7672818970389756 + 
            ru$1$1*(0.00010815636303079863 - 
               0.000011778650578653078*ru$Shock) + 
            0.0009002537147614537*ru$Shock) - 1.5325262555187882*ru$Shock, 
        82634.91448629537*ru$Shock + 
           ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
              ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
          59475.08501476743 && 41437.49802478351*ru$Shock + 
           ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
              ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
          55565.5036196127}, {0.32744857648443715 + 
         qq$1$1*(-0.6205932966955223 + 
            ru$1$1*(-0.00041124117852862246 + 
               ru$1$1*(0.000048710070013069384 - 
                  5.304716969655207*^-6*ru$Shock) + 
               0.000044785771356445404*ru$Shock) + 
            0.0017875695609668352*ru$Shock) + 
         ru$1$1*(-0.8273098663267708 + 
            ru$1$1*(0.00023283694556018437 - 
               0.000025356853232697226*ru$Shock) + 0.00193804894414374*ru$Shock
            ) - 1.650233358691969*ru$Shock, 
        (82634.91448629537*ru$Shock + 
             ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            59475.08501476743 && 
           41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
            55565.5036196127) || 
         (41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            55565.5036196127 && 
           60574.33526520564*ru$Shock + 
             ru$1$1*(30700.608536864445 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.97736772618464*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            57381.56465604092)}}, 
      0.02305561670816937 - 0.5763904177042347*qq$1$1 - 
       0.6644518272425245*ru$1$1 - 1.328903654485049*ru$Shock], 
     -0.5*ru$1$1 - ru$Shock, Piecewise[{{0.08807656776005006 + 
         qq$1$1*(-0.2772801248338851 + 
            ru$1$1*(-0.00008873540951605365 + 
               ru$1$1*(0.000010510396905363706 - 
                  1.144623294664428*^-6*ru$Shock) + 
               9.663632849281731*^-6*ru$Shock) + 
            0.00038571214487409197*ru$Shock) + 
         ru$1$1*(-0.35641431046713656 + 
            ru$1$1*(0.00005024030372802769 - 5.471365400936505*^-6*ru$Shock) + 
            0.0004181817767764732*ru$Shock) - 0.7118821527543032*ru$Shock, 
        82634.91448629537*ru$Shock + 
           ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
              ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
          59475.08501476743 && 41437.49802478351*ru$Shock + 
           ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
              ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
          55565.5036196127}, {0.16139523855363208 + 
         qq$1$1*(-0.2882751864417127 + 
            ru$1$1*(-0.00019102788902828258 + 
               ru$1$1*(0.000022626581030403464 - 
                  2.4641230925156815*^-6*ru$Shock) + 
               0.00002080368359835745*ru$Shock) + 
            0.0008303537134692402*ru$Shock) + 
         ru$1$1*(-0.384298230790315 + 
            ru$1$1*(0.00010815636303079866 - 
               0.000011778650578653083*ru$Shock) + 
            0.0009002537147614539*ru$Shock) - 0.7665589230214668*ru$Shock, 
        (82634.91448629537*ru$Shock + 
             ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            59475.08501476743 && 
           41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
            55565.5036196127) || 
         (41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            55565.5036196127 && 
           60574.33526520564*ru$Shock + 
             ru$1$1*(30700.608536864445 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.97736772618464*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            57381.56465604092)}}, 
      0.02 - 0.2677422653638917*qq$1$1 - 0.30864815234034326*ru$1$1 - 
       0.6172963046806865*ru$Shock], 
     Piecewise[{{0.479621446048518 + 
         qq$1$1*(-0.06719730594130095 + 
            ru$1$1*(-0.0006251696703894724 + 
               ru$1$1*(0.00007404914683805003 - 
                  8.064241453869798*^-6*ru$Shock) + 
               0.00006808342009237418*ru$Shock) + 0.002717466857833425*ru$Shock
            ) + ru$1$1*(-0.33652803874755655 + 
            ru$1$1*(0.0003539591950182606 - 
               0.000038547539510312505*ru$Shock) + 0.00294622592013771*ru$Shock
            ) - 0.6663879029373692*ru$Shock, 
        82634.91448629537*ru$Shock + 
           ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
              ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
          59475.08501476743 && 41437.49802478351*ru$Shock + 
           ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
              ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
          55565.5036196127}, {0.9961752040511263 + 
         qq$1$1*(-0.14466107242151235 + 
            ru$1$1*(-0.0013458532852930857 + 
               ru$1$1*(0.00015941158419130173 - 
                  0.00001736054445399743*ru$Shock) + 
               0.00014656868198392704*ru$Shock) + 0.005850110572401469*ru$Shock
            ) + ru$1$1*(-0.5329792792690082 + 
            ru$1$1*(0.0007619965715519202 - 0.00008298440430995154*ru$Shock) + 
            0.006342578697656144*ru$Shock) - 1.0516034401429468*ru$Shock, 
        (82634.91448629537*ru$Shock + 
             ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            59475.08501476743 && 
           41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
            55565.5036196127) || 
         (41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            55565.5036196127 && 
           60574.33526520564*ru$Shock + 
             ru$1$1*(30700.608536864445 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.97736772618464*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            57381.56465604092)}}, 0], 
     Piecewise[{{0, qq$1$1*(0.27053495374507686 + 
             ru$1$1*(-0.00008025812043642246 + 
                ru$1$1*(9.506291854245685*^-6 - 
                   1.0352723308378283*^-6*ru$Shock) + 
                8.740422941649969*^-6*ru$Shock) + 
             0.0003488633449256187*ru$Shock) + 
          ru$1$1*(0.3279358905912701 + 
             ru$1$1*(0.0003168897207065571 - 
                0.000034510528900705574*ru$Shock) + 
             0.0026832294333479223*ru$Shock) + 0.6616278357266734*ru$Shock >= 
         -0.37337902259049605}, 
       {0.18960954712239103 + qq$1$1*
          (-0.5969233387820554 + 
            ru$1$1*(-0.00019102788902828244 + 
               ru$1$1*(0.000022626581030403447 - 
                  2.4641230925156798*^-6*ru$Shock) + 
               0.000020803683598357436*ru$Shock) + 
            0.0008303537134692396*ru$Shock) + 
         ru$1$1*(-0.7672818970389752 + 
            ru$1$1*(0.00010815636303079858 - 
               0.000011778650578653073*ru$Shock) + 
            0.0009002537147614533*ru$Shock) - 1.5325262555187873*ru$Shock, 
        82634.91448629537*ru$Shock + 
           ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
              ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
          59475.08501476743 && 41437.49802478351*ru$Shock + 
           ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
              ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
           qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
              ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                 ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
          55565.5036196127}, {0.347448576484437 + 
         qq$1$1*(-0.620593296695522 + 
            ru$1$1*(-0.00041124117852862224 + 
               ru$1$1*(0.00004871007001306936 - 
                  5.304716969655205*^-6*ru$Shock) + 
               0.000044785771356445384*ru$Shock) + 
            0.0017875695609668343*ru$Shock) + 
         ru$1$1*(-0.8273098663267705 + 
            ru$1$1*(0.0002328369455601842 - 0.00002535685323269721*ru$Shock) + 
            0.0019380489441437388*ru$Shock) - 1.6502333586919684*ru$Shock, 
        (82634.91448629537*ru$Shock + 
             ru$1$1*(41730.89814740931 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.7800577067065175*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.442631645125518*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            59475.08501476743 && 
           41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) >= 
            55565.5036196127) || 
         (41437.49802478351*ru$Shock + 
             ru$1$1*(21132.189916653377 - 365.3444576270594*ru$Shock + 
                ru$1$1*(-43.89243514632188 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.9773677261847*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            55565.5036196127 && 
           60574.33526520564*ru$Shock + 
             ru$1$1*(30700.608536864445 - 365.34445762705934*ru$Shock + 
                ru$1$1*(-43.89243514632187 + 4.780057706706518*ru$Shock)) + 
             qq$1$1*(8332.749747845768 - 336.97736772618464*ru$Shock + 
                ru$1$1*(77.52367956312511 - 8.44263164512552*ru$Shock + 
                   ru$1$1*(-9.182406958129455 + 1.*ru$Shock))) < 
            57381.56465604092)}}, 
      0.043055616708169354 - 0.5763904177042344*qq$1$1 - 
       0.6644518272425242*ru$1$1 - 1.3289036544850483*ru$Shock]}, 
    {2.4071457818579844 + 0.5619335678030758*
       (-1. + 0.6666666666666666*(1. + qq$1$1)) + 
      6.9121313774134325*(-1. + 0.06896551724137931*(4. + ru$1$1)) - 
      0.13105218569400012*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1)) - 
      0.2663367225451376*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) - 
      0.07566301468831946*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) + 
      11.172951274951092*(-1. + 
         0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.21400732308451167*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      2.5453053127901537*(-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.18533577838709045*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.37665700518133116*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.10700366154225448*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)), 
     5.249999999999999 + 7.25*(-1. + 0.06896551724137931*(4. + ru$1$1)) + 
      12.985884455415558*(-1. + 
         0.0770066916453246*(12.98588445541556 + ru$Shock)), 
     4.020825827940308 + 0.40760949163290394*
       (-1. + 0.6666666666666666*(1. + qq$1$1)) + 
      4.852428795090208*(-1. + 0.06896551724137931*(4. + ru$1$1)) + 
      0.002596384684934529*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1)) + 
      0.03381270635486561*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) + 
      0.0014990233967663667*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) + 
      8.862578797203172*(-1. + 0.0770066916453246*
          (12.98588445541556 + ru$Shock)) + 
      0.004239878436044229*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.3675540135862387*(-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.0036718424345718367*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.047818387907590465*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.0021199392180212126*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)), 
     -4.693235911692521 - 0.04224441935744513*
       (-1. + 0.6666666666666666*(1. + qq$1$1)) - 
      2.656302467740028*(-1. + 0.06896551724137931*(4. + ru$1$1)) - 
      0.018292370165835743*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1)) - 
      0.23822145637388462*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) - 
      0.01056110483936189*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) - 
      5.963445848827583*(-1. + 0.0770066916453246*
          (12.98588445541556 + ru$Shock)) - 
      0.029871315394937512*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      2.589536947845666*(-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.025869317976473113*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.3368960144522197*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      0.014935657697468784*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)), 
     3.050844519937799 - 0.288195208852117*
       (-1. + 0.6666666666666666*(1. + qq$1$1)) - 
      3.8464277941397484*(-1. + 0.06896551724137931*(4. + ru$1$1)) + 
      0.2495843721148957*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1)) + 
      0.5605193272195296*(-1. + 
         2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) + 
      0.14409760442605823*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2) - 
      4.314545696787668*(-1. + 0.0770066916453246*
          (12.98588445541556 + ru$Shock)) + 
      0.4075695729696104*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) + 
      5.43967035316126*(-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.35296560400125937*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 0.06896551724137931*(4. + ru$1$1))*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.792694034526102*(-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock)) - 
      0.20378478648480422*(-1. + 0.6666666666666666*(1. + qq$1$1))*
       (-1. + 2.*(-1. + 0.06896551724137931*(4. + ru$1$1))^2)*
       (-1. + 0.0770066916453246*(12.98588445541556 + ru$Shock))}}

*)

Solve[Thread[Flatten[twoPer]==0],{qqt,rrt,rut},Reals]

zz0Sub/.{eps->0,qtm1->
twoZEqns={twoPer[[5,1]]>=0.02,twoPer[[8,1]]>=0.02};

Solve[twoZEqns,{zzz$1$1[t],zzz$0$1[t]},Reals]
twoWithSub=twoPer/.{zzz$0$1[t]->twice[[-1,-1,3]][qtm1,rutm1,eps],zzz$0$1[t]->twice[[-1,-1,3]][qtm1,rutm1,eps]}
Plot3D @@ ({{0.02,oneWithSub[[5,1]]} /. eps -> 0, {qtm1, qLow,      qHigh}, {rutm1, ruLow, ruHigh}, PlotRange -> All} //numIt)


(*

genPath[numNonZeroZs_Integer]:=
With[{xtm1={{qtm1},{rtm1},{rutm1}},
rawFParts=Reverse[(redoFPart[phimat,fmat,psiz,#,1,0] &/@Range[0,numNonZeroZs-1])//numIt]},
With[{bgn=(nonFPart[xtm1,
{{eps}},bmat,phimat,psieps]+rawFParts[[1]])//numIt},
Join[xtm1,Join @@ FoldList[(nonFPart[#1,{{0}},bmat,phimat,psieps]+#2//numIt)&,
bgn,Drop[rawFParts,1]]]]]



genPath[numNonZeroZs_Integer,padZeroZs_Integer]:=
With[{startPath=genPath[numNonZeroZs]},
With[{tailPath=NestList[((nonFPart[#,
{{0}},bmat,phimat,psieps])//numIt)&,startPath[[{-3,-2,-1}]],padZeroZs]},
Join[startPath,Join@@Drop[tailPath,1]]]]
*)
genZAlwaysPathEqns[numNonZeroZ_Integer]:=
With[{thePos=2+3*Range[numNonZeroZ],
theZs=Flatten[redoGenZVars[numNonZeroZ-1,1]]},
With[{eqns=Thread[((genPath[numNonZeroZ]//numIt)[[thePos,1]])==0.02]},
{eqns,Solve @@ {eqns,theZs,Reals}}]]


genZAlwaysPathEqnsExps[numNonZeroZ_Integer,dstrbtn_]:=
With[{thePos=2+3*Range[numNonZeroZ],
theZs=Flatten[redoGenZVars[numNonZeroZ-1,1]],
theZExps=Flatten[redoGenZExpVars[numNonZeroZ-1,1]]},
With[{expEqns=MapThread[#2==Expectation[#1,dstrbtn]&,
{theZs,theZExps}]},
With[{eqns=Thread[((genPath[numNonZeroZ]//numIt)[[thePos,1]])==0.02]},
{eqns,Solve @@ {Join[expEqns,eqns],theZs,theZExps,Reals}}]]]

tryZFormula[theTime_Integer]:=
With[{notShk=( {{-1,0,0}} . MatrixPower[bmatCons,theTime+1] . 
Transpose[{{qtm1,rrtm1,rutm1}}])//numIt,
shk=( {{-1,0,0}}.MatrixPower[bmatCons,theTime] .phimatCons.{{0},{1},{0}} eps )//numIt},
{notShk,shk}]



(*
renamed to always below delete soon
doRecur[{}]:=
With[{fullPath=genPathNoT[1]},
With[{theEqn=((fullPath)[[5]])==0.02},
With[{soln=(Solve[theEqn,zzz$0$1,Reals][[1]])},
{
{
Function @@ ({{qtm1,rutm1,eps},fullPath[[4,1]]/.soln}//Expand),
Function @@ ({{qtm1,rutm1,eps},fullPath[[6,1]]/.soln}//Expand),
Function @@ ({{qtm1,rutm1,eps},zzz$0$1/.soln}//Expand)
}
}/.ridTSubs]]]



doRecur[zSubNow:{{(_Function)..}..}]:=
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])]},
With[{thePath=(genPathNoT[numZs+1]/.ridTSubs),
xVars=Drop[Flatten[genXVars[numZs,1],1],1]},
With[{
modVarEqns=
{xVars[[-1,1]]==thePath[[thePos[[-1,1]],1]],
xVars[[-1,2]]==thePath[[thePos[[-1,2]],1]]},
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}]
}
],
zSubs=
MapThread[(#1->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{theEqn=((Append[modVarEqns,
((thePath)[[5,1]])==0.02]/.zSubs)//.xSubs)//Expand},
With[{solveArgs=Append[Flatten[xVars[[-1]]],zVarNames[[-1]]]},Print["doRecur:theEqn="theEqn];
With[{(soln=Solve[theEqn,solveArgs,Reals][[1]])},
Append[zSubNow,{
Function @@ 
({{qtm1,rutm1,eps},xVars[[-1,1]]
}/.soln//Expand),
Function @@ 
({{qtm1,rutm1,eps},xVars[[-1,2]]
}/.soln//Expand),
Function @@ 
({{qtm1,rutm1,eps},zVarNames[[-1]]
}/.soln//Expand)
}]]]]]]]]/;
Length[zSubNow]>0
*)

doRecurAlways[{}]:=
With[{fullPath=genPathNoT[1]},
With[{theEqn=((fullPath)[[5]])==0.02},
With[{soln=(Solve[theEqn,zzz$0$1,Reals][[1]])},
{
{
Function @@ ({{qtm1,rutm1,eps},fullPath[[4,1]]/.soln}//Expand),
Function @@ ({{qtm1,rutm1,eps},fullPath[[6,1]]/.soln}//Expand),
Function @@ ({{qtm1,rutm1,eps},zzz$0$1/.soln}//Expand)
}
}/.ridTSubs]]]



doRecurAlways[zSubNow:{{(_Function)..}..}]:=
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])]},
With[{thePath=(genPathNoT[numZs+1]/.ridTSubs),
xVars=Drop[Flatten[genXVars[numZs,1],1],1]},
With[{
modVarEqns=
{xVars[[-1,1]]==thePath[[thePos[[-1,1]],1]],
xVars[[-1,2]]==thePath[[thePos[[-1,2]],1]]},
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}]
}
],
zSubs=
MapThread[(#1->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{theEqn=((Append[modVarEqns,
((thePath)[[5,1]])==0.02]/.zSubs)//.xSubs)//Expand},
With[{solveArgs=Append[Flatten[xVars[[-1]]],zVarNames[[-1]]]},Print["doRecurAlways:theEqn="theEqn];
With[{(soln=Solve[theEqn,solveArgs,Reals][[1]])},
Append[zSubNow,{
Function @@ 
({{qtm1,rutm1,eps},xVars[[-1,1]]
}/.soln//Expand),
Function @@ 
({{qtm1,rutm1,eps},xVars[[-1,2]]
}/.soln//Expand),
Function @@ 
({{qtm1,rutm1,eps},zVarNames[[-1]]
}/.soln//Expand)
}]]]]]]]]/;
Length[zSubNow]>0




doRecurIneq[{}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{(*solnVars={qq[t],ru[t],discrep[t],zzz$0$1[t]},*)
fullPath=genPath[1]/.{qtm1->qq[t-1],rtm1->rr[t-1],rutm1->ru[t-1],eps->eps[ru][t]}},
With[{zZap=(zzz$0$1[t]/.Flatten[Solve[fullPath[[5,1]]==rUnderBar//numIt,zzz$0$1[t]]])//Expand},
With[{theEqn={qq[t]-(fullPath[[4,1]]),rr[t]-(fullPath[[5,1]]),ru[t]-(fullPath[[6,1]]),
discrep[t]-((fullPath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zzz$0$1[t]-(eqvdIf[discrep[t]>=0,0,zZap//Expand]//Expand)}},
With[{(*rawSoln=Solve[theEqn,solnVars,Reals]//FullSimplify*)},
With[{(*soln=(#->
Piecewise[List @@@ ceToPiecewise[#,Flatten[rawSoln]]])&/@solnVars*)},
newWeightedStochasticBasis[modClass,theEqn];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {5, 1}], modClass, simp];
Print["resZ10$0$0 converged?",resZ10$0$0[isConvergedQ[]]];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[to$551[isConvergedQ[]], 
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop];
{{
Function @@ ({{qq,ru,ru$Shock},polys[[1]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[2]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[-1]]}//Expand)
}}]]]]]]

doRecurIneqNever[{}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,to$551,modClass=Unique["modClass"]},
With[{(*solnVars={qq[t],ru[t],discrep[t],zzz$0$1[t]},*)
fullPath=genPath[1]/.{qtm1->qq[t-1],rtm1->rr[t-1],rutm1->ru[t-1],eps->eps[ru][t]}},
With[{zZap=(zzz$0$1[t]/.Flatten[Solve[fullPath[[5,1]]==rUnderBar//numIt,zzz$0$1[t]]])//Expand},
With[{theEqn={qq[t]-(fullPath[[4,1]]),rr[t]-(fullPath[[5,1]]),ru[t]-(fullPath[[6,1]]),
discrep[t]-((fullPath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zzz$0$1[t]-(eqvdIf[discrep[t]>=0,0,0]//Expand)}},
With[{(*rawSoln=Solve[theEqn,solnVars,Reals]//FullSimplify*)},
With[{(*soln=(#->
Piecewise[List @@@ ceToPiecewise[#,Flatten[rawSoln]]])&/@solnVars*)},
newWeightedStochasticBasis[modClass,theEqn];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {5, 1}], modClass, simp];
Print["resZ10$0$0 converged?",resZ10$0$0[isConvergedQ[]]];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[to$551[isConvergedQ[]], 
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop];
{{
Function @@ ({{qq,ru,ru$Shock},polys[[1]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[2]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[-1]]}//Expand)
}}]]]]]]

doRecurIneqAlways[{}]:=
Module[{stateVar,nonStateVar,theShock,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{
thePath=genPath[1]/.
{qtm1->qq[t-1],rtm1->rr[t-1],rutm1->ru[t-1],eps->eps[ru][t]}},
With[{zZap=
(zzz$0$1[t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zzz$0$1[t]]])//Expand},
With[{theEqn={
qq[t]-(thePath[[4,1]]),
ru[t]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zzz$0$1[t]-(eqvdIf[discrep[t]>=0,zZap//Expand,zZap//Expand]//Expand)}},
newWeightedStochasticBasis[modClass,theEqn];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClass, simp];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
If[Not[to$551[isConvergedQ[]]],Throw["projection polynomial computation did not converge"]];
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop;
{{
Function @@ ({{qq,ru,ru$Shock},polys[[1]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[2]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[-1]]}//Expand)
}}]]]]


doRecurIneqAlways[zSubNow:{{(_Function)..}..}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])],
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],1]},
With[{xVars=Through[#[t]]&/@xVarsNoT},
With[{thePath=genPath[numZs+1]/.
{qtm1->(xVars[[-1,1]]/.t->t-1),rtm1->rr[t-1],
rutm1->(xVars[[-1,2]]/.t->t-1),eps->eps[ru][t]}},
With[{zZap=(zVarNames[[-1]]/.Solve[thePath[[5,1]]==0.02,zVarNames[[-1]],Reals])//Expand},
With[{
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]][t],#3[[2]][t],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVarsNoT,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]][t],#3[[2]][t],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVarsNoT,1]}]
}
],
zSubs=
MapThread[(#1[t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{zZap=(zVarNames[[-1]][t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zVarNames[[-1]][t]]])//Expand},
With[{theEqn=({xVars[[-1,1]]-(thePath[[4,1]]),xVars[[-1,2]]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zVarNames[[-1]][t]-(eqvdIf[discrep[t]>=0,zZap//Expand,zZap//Expand]//Expand)}//.Join[xSubs,zSubs])//Expand},
newWeightedStochasticBasis[modClass,(theEqn)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClass, simp];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[Not[to$551[isConvergedQ[]]], Throw["projection polynomial computation did not converge"]];
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop;
Append[zSubNow,
{
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[1]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[2]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[-1]]}//Expand)
}]]]]]]]]]]/;
Length[zSubNow]>0

(*

doRecurIneqOcc[{}]:=
Module[{stateVar,nonStateVar,theShock,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{
thePath=genPath[1]/.
{qtm1->qq[t-1],rtm1->rr[t-1],rutm1->ru[t-1],eps->eps[ru][t]}},
With[{zZap=
(zzz$0$1[t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zzz$0$1[t]]])//Expand},
With[{theEqn={
qq[t]-(thePath[[4,1]]),
ru[t]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zzz$0$1[t]-(eqvdIf[discrep[t]>=0,0,zZap//Expand]//Expand)}},
newWeightedStochasticBasis[modClass,theEqn];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClass, simp];
If[Not[resZ10$0$0[isConvergedQ[]]],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{3,3,1}]];
If[Not[to$551[isConvergedQ[]]],Throw["projection polynomial computation did not converge"]];
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop;
{{
Function @@ ({{qq,ru,ru$Shock},polys[[1]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[2]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[-1]]}//Expand)
}}]]]]


doRecurIneqOcc[zSubNow:{{(_Function)..}..}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])],
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],1]},
With[{xVars=Through[#[t]]&/@xVarsNoT},
With[{thePath=genPath[numZs+1]/.
{qtm1->(xVars[[-1,1]]/.t->t-1),rtm1->rr[t-1],
rutm1->(xVars[[-1,2]]/.t->t-1),eps->eps[ru][t]}},
With[{zZap=(zVarNames[[-1]]/.Solve[thePath[[5,1]]==0.02,zVarNames[[-1]],Reals])//Expand},
With[{
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]][t],#3[[2]][t],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVarsNoT,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]][t],#3[[2]][t],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVarsNoT,1]}]
}
],
zSubs=
MapThread[(#1[t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{zZap=(zVarNames[[-1]][t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zVarNames[[-1]][t]]])//Expand},
With[{theEqn=({xVars[[-1,1]]-(thePath[[4,1]]),xVars[[-1,2]]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zVarNames[[-1]][t]-(eqvdIf[discrep[t]>=0,0,zZap//Expand]//Expand)}//.Join[xSubs,zSubs])//Expand},
newWeightedStochasticBasis[modClass,(theEqn)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClass, simp];
If[Not[resZ10$0$0[isConvergedQ[]]],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{2, 2, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[Not[to$551[isConvergedQ[]]], Throw["projection polynomial computation did not converge"]];
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop;
Append[zSubNow,
{
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[1]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[2]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[-1]]}//Expand)
}]]]]]]]]]]/;
Length[zSubNow]>0

*)


ceToPiecewise[aVar_Symbol,solns_List]:=
With[{relevant=Cases[solns,HoldPattern[aVar->aVal_]->aVal]},
relevant]




doRecurIneqNever[zSubNow:{{(_Function)..}..}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])]},
With[{thePath=genPath[numZs+1]/.{qtm1->qq[t-1],rtm1->rr[t-1],rutm1->ru[t-1],eps->eps[ru][t]},
xVars=Through[#[t]]&/@Drop[Flatten[genXVars[numZs,1],1],1]},
With[{zZap=(zVarNames[[-1]]/.Solve[thePath[[5,1]]==0.02,zVarNames[[-1]],Reals])//Expand},Print[{zZap}];
With[{(*theIneq={
(zVarNames[[-1]]-(eqvdIf[discrep[t]>0,0,0])//Expand)==0,
discrep==(thePath[[5,1]]/.zVarNames[[-1]]->0)-0.02},*)
modVarEqns=
{xVars[[-1,1]]==thePath[[thePos[[-1,1]],1]],
xVars[[-1,2]]==thePath[[thePos[[-1,2]],1]]},
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}]
}
],
zSubs=
MapThread[(#1[t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{(*theEqn=((Join[modVarEqns,theIneq]/.zSubs)//.xSubs)//Expand*)},Print[theEqn];
With[{zZap=(zVarNames[[-1]][t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zVarNames[[-1]][t]]])//Expand},
With[{theEqn={qq[t]-(thePath[[4,1]]),rr[t]-(thePath[[5,1]]),ru[t]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zVarNames[[-1]][t]-(eqvdIf[discrep[t]>=0,0,0]//Expand)}},
Print["theEqn=",theEqn,zSubs];
newWeightedStochasticBasis[modClass,(theEqn/.zSubs)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {5, 1}], modClass, simp];
Print["resZ10$0$0 converged?",resZ10$0$0[isConvergedQ[]]];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[to$551[isConvergedQ[]], 
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop];
Append[zSubNow,
{
Function @@ ({{qq,ru,ru$Shock},polys[[1]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[2]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[-1]]}//Expand)
}]]]]]]]]]]/;
Length[zSubNow]>0


(*

genPiecewiseSubs
piecewiseSubs=Piecewise[{{val1_,cond1_},{val2_,cond2_}}]:>
eqvdIf[cond1,val1,val2]






*)


doExp[theArg_,dstrbtn_]:=
Expectation[theArg,eps \[Distributed] dstrbtn]//Expand


doRecurExp[{},dstrbtn_]:=
With[{fullPath=genPathNoT[1]},
With[{theEqn=((fullPath)[[5]])==0.02},
With[{soln=(Solve[theEqn,zzz$0$1,Reals][[1]])},
{
{
Function @@ ({{qtm1,rutm1,eps},
doExp[fullPath[[4,1]]/.soln,dstrbtn]}//Expand),
Function @@ ({{qtm1,rutm1,eps},
doExp[fullPath[[6,1]]/.soln,dstrbtn]}//Expand),
Function @@ ({{qtm1,rutm1,eps},
doExp[(zzz$0$1/.soln),dstrbtn]}//Expand)
}
}/.ridTSubs]]]


doRecurExp[zSubNow:{{(_Function)..}..},dstrbtn_]:=
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])]},
With[{thePath=(genPathNoT[numZs+1]/.ridTSubs),
xVars=Drop[Flatten[genXVars[numZs,1],1],1]},
With[{
modVarEqns=
{xVars[[-1,1]]==thePath[[thePos[[-1,1]],1]],
xVars[[-1,2]]==thePath[[thePos[[-1,2]],1]]},
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]],#3[[2]],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVars,1]}]
}
],
zSubs=
MapThread[(#1->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{theEqn=((Append[modVarEqns,
((thePath)[[5,1]])==0.02]/.zSubs)//.xSubs)//Expand},
With[{solveArgs=Append[Flatten[xVars[[-1]]],zVarNames[[-1]]]},
With[{(soln=Solve[theEqn,solveArgs,Reals][[1]])},
Append[zSubNow,{
Function @@ 
({{qtm1,rutm1,eps},
doExp[xVars[[-1,1]]
/.soln//Expand,dstrbtn]}),
Function @@ 
({{qtm1,rutm1,eps},
doExp[xVars[[-1,2]]
/.soln//Expand,dstrbtn]}),
Function @@ 
({{qtm1,rutm1,eps},
doExp[zVarNames[[-1]]
/.soln//Expand,dstrbtn]})
}]]]]]]]]/;
Length[zSubNow]>0


(*

MatrixPower[fmat,theTime] .phimat .psiz .

(*soln01=Solve[((genPath[1]//numIt)[[5,1]])==0.02,
zzz$0$1[t]]//Expand
soln02=Solve[
Thread[((genPath[2]//numIt)[[{5,8},1]])==0.02],
{zzz$0$1[t],zzz$1$1[t]}]//Expand
soln03=Solve[
Thread[((genPath[3]//numIt)[[{5,8,11},1]])==0.02],
{zzz$0$1[t],zzz$1$1[t],zzz$2$1[t]}]//Expand
*)

pth40=genPath[40,2];

(*one non zero z*)
nfp$0$0=nonFPart[xxtm1={{qtm1},{rtm1},{rutm1}},{{eps}},bmat,phimat,psieps]//numIt//Chop;
fp$0$0=fPart[phimat,fmat,psiz,0,1]//numIt;
x$0$0=nfp$0$0+fp$0$0

x$0$1=nonFPart[x$0$0,{{0}},bmat,phimat,psieps]//numIt//Chop;
hmat . Join[xxtm1,x$0$0,x$0$1]//numIt//Expand


(*two non zero z's*)
nfp$1$0=nonFPart[xxtm1={{qtm1},{rtm1},{rutm1}},{{eps}},bmat,phimat,psieps]//numIt//Chop;
fp$1$0=fPart[phimat,fmat,psiz,1,1]//numIt;
x$1$0=nfp$1$0+fp$1$0

nfp$1$1=nonFPart[x$1$0,{{0}},bmat,phimat,psieps]//numIt//Chop;
fp$1$1=fPart[phimat,fmat,psiz,0,1]/.zzz$0$1[t]->zzz$1$1[t]//numIt;
x$1$1=nfp$1$1+fp$1$1;
x$1$2=nonFPart[x$1$1,{{0}},bmat,phimat,psieps]//numIt//Chop;
hmat . Join[xxtm1,x$1$0,x$1$1]//numIt//Expand
hmat . Join[x$1$0,x$1$1,x$1$2]//numIt//Expand






(*three non zero z's*)
nfp$2$0=nonFPart[xxtm1={{qtm1},{rtm1},{rutm1}},{{eps}},bmat,phimat,psieps]//numIt//Chop;
fp$2$0=fPart[phimat,fmat,psiz,2,1]//numIt;
x$2$0=nfp$2$0+fp$2$0

nfp$2$1=nonFPart[x$2$0,{{0}},bmat,phimat,psieps]//numIt//Chop;
fp$2$1=fPart[phimat,fmat,psiz,1,1]/.{zzz$1$1[t]->zzz$2$1[t],zzz$0$1[t]->zzz$1$1[t]}//numIt;
x$2$1=nfp$2$1+fp$2$1;
nfp$2$2=nonFPart[x$2$1,{{0}},bmat,phimat,psieps]//numIt//Chop;
fp$2$2=fPart[phimat,fmat,psiz,0,1]/.{zzz$0$1[t]->zzz$2$1[t]}//numIt;
x$2$2=nfp$2$2+fp$2$2;

nfp$2$3=nonFPart[x$2$2,{{0}},bmat,phimat,psieps]//numIt//Chop;
x$2$3=nfp$2$3;
hmat . Join[xxtm1,x$2$0,x$2$1]//numIt//Expand
hmat . Join[x$2$0,x$2$1,x$2$2]//numIt//Expand
hmat . Join[x$2$1,x$2$2,x$2$3]//numIt//Expand



(*solve for constraint in second equation using x$0$0 *)
(* one period constraint*)
soln$1=Solve[
{qt==x$0$0[[1,1]],rut==x$0$0[[3,1]],rUnderBar==x$0$0[[2,1]]}//numIt,
{qt,rut,zzz$0$1[t]}]


(* two period constraint*)

zSub$2=(Cases[soln$1,HoldPattern[zzz$0$1[t]->_],Infinity]/.
{zzz$0$1[t]->zzz$1$1[t],qtm1->qt,rutm1->rut,eps->0});
xSubbed=x$1$0/.zSub$2//Expand
soln$2=Solve[
{qt==xSubbed[[1,1]],rut==xSubbed[[3,1]],rUnderBar==xSubbed[[2,1]]}//numIt,
{qt,rut,zzz$0$1[t]}]

x$1$1=nfp$1$1+fp$1$1;
x$1$2=nonFPart[x$1$1,{{0}},bmat,phimat,psieps]//numIt//Chop;
x$1$3=nonFPart[x$1$2,{{0}},bmat,phimat,psieps]//numIt//Chop;

xReSubbed$1=(Join[xxtm1,x$1$0,x$1$1]/.zSub$2)/.soln$2[[1]];
((hmat . xReSubbed$1//numIt//Expand) -(psiz . {{ zzz$0$1[t]}}/.soln$2[[1]]) -( psieps . {{eps}}))//numIt//Chop

xReSubbed$2=(Join[x$1$0,x$1$1,x$1$2]/.zSub$2)/.soln$2[[1]];
((hmat . xReSubbed$2//numIt//Expand) -((psiz . ({{ zzz$0$1[t]}}/.soln$1[[1]])/.{qtm1->xReSubbed$1[[4,1]],rutm1->xReSubbed$1[[6,1]],eps->0}) +( psieps . {{0}})))//numIt//Chop

xReSubbed$3=(Join[x$1$1,x$1$2,x$1$3]/.zSub$2)/.soln$2[[1]];
(hmat . xReSubbed$3//numIt//Expand) 




(* three period constraint*)


zSub$2=(Cases[soln$1,HoldPattern[zzz$0$1[t]->_],Infinity]/.
{zzz$0$1[t]->zzz$1$1[t],qtm1->qt,rutm1->rut,eps->0});
xSubbed=x$1$0/.zSub$2//Expand
soln$2=Solve[
{qt==xSubbed[[1,1]],rut==xSubbed[[3,1]],rUnderBar==xSubbed[[2,1]]}//numIt,
{qt,rut,zzz$0$1[t]}]

x$1$1=nfp$1$1+fp$1$1;
x$1$2=nonFPart[x$1$1,{{0}},bmat,phimat,psieps]//numIt//Chop;
x$1$3=nonFPart[x$1$2,{{0}},bmat,phimat,psieps]//numIt//Chop;

xReSubbed$1=(Join[xxtm1,x$1$0,x$1$1]/.zSub$2)/.soln$2[[1]];
((hmat . xReSubbed$1//numIt//Expand) -(psiz . {{ zzz$0$1[t]}}/.soln$2[[1]]) -( psieps . {{eps}}))//numIt//Chop

xReSubbed$2=(Join[x$1$0,x$1$1,x$1$2]/.zSub$2)/.soln$2[[1]];
((hmat . xReSubbed$2//numIt//Expand) -((psiz . ({{ zzz$0$1[t]}}/.soln$1[[1]])/.{qtm1->xReSubbed$1[[4,1]],rutm1->xReSubbed$1[[6,1]],eps->0}) +( psieps . {{0}})))//numIt//Chop

xReSubbed$3=(Join[x$1$1,x$1$2,x$1$3]/.zSub$2)/.soln$2[[1]];
(hmat . xReSubbed$3//numIt//Expand) 



*)


(*


augPath[{}]=augPath[]:=
With[{xtm1={{qtm1},{rtm1},{rutm1}}},
With[{nfp=
nonFPart[xtm1,{{eps}},bmat,phimat,psieps]//
numIt//Chop,
fp=fPart[phimat,fmat,psiz,0,1]//numIt},
With[{xt=nfp+fp},
xt]]]


augPath[pathNow_?MatrixQ]:=

With[{theFParts=(fPart[phimat,fmat,psiz,#,1,0]&/@Range[numCons-1,0,-1])//numIt},
theFParts]





unCon0 = fzComp[ {{qq[t]},{rr[t]},{ru[t]}},{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{uu$Shock}},{{zt0}},{{0}}]/.eqvdIf[xx_,yy_,zz_]:>eqvdIf[xx,zz,zz]




Export["prettyAlways.pdf", MatrixForm[unCon0//. latexSubs]];






Print["got to zt0Subs"]

zt0Subs=Flatten[Solve[unCon0[[-1]],zt0]]/.eqvdIf->If
discrepSubs=Flatten[Solve[unCon0[[-2]],discrep[t]]]/.eqvdIf->If

z1RHS=zt0//.Join[zt0Subs,discrepSubs]//.mySubs//myN//FullSimplify//Chop;
r1RHS=(rr[t]-unCon0[[2,1]])//.Join[zt0Subs,discrepSubs]//.mySubs//myN//FullSimplify//Chop
ru1RHS=(ru[t]-unCon0[[3,1]])//.Join[zt0Subs,discrepSubs]//.mySubs//myN//FullSimplify//Chop
q1RHS=(qq[t]-unCon0[[1,1]])//.Join[zt0Subs,discrepSubs]//.mySubs//myN//FullSimplify//Chop

Export["prettyAlwaysZ1.pdf", MatrixForm[z1RHS//myN//Simplify/. latexSubs]]
Export["prettyAlwaysR1.pdf", MatrixForm[r1RHS//myN//Simplify/. latexSubs]]
Export["prettyAlwaysQ1.pdf", MatrixForm[q1RHS//myN//Simplify/. latexSubs]]
Print["about to compute expectation"]

z1ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[z1RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];

q1ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[q1RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];

r1ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[r1RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];


ru1ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[ru1RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];



erfcFound=Union[Cases[z1ExpRHS, Erfc[___], Infinity]];
erfFound=Union[Cases[z1ExpRHS, Erf[___], Infinity]];




erfSubs = {};




Export["prettyAlwaysZ1EXP.pdf", 
  MatrixForm[z1ExpRHS/. erfSubs /. latexSubs  // Expand]];
Export["prettyAlwaysQ1EXP.pdf", 
  MatrixForm[q1ExpRHS/. erfSubs /. latexSubs  // Expand]];
Export["prettyAlwaysR1EXP.pdf", 
  MatrixForm[r1ExpRHS/. erfSubs /. latexSubs  // Expand]];
Export["prettyAlwaysRu1EXP.pdf", 
  MatrixForm[ru1ExpRHS/. erfSubs /. latexSubs  // Expand]];
Export["prettyAlwaysPsiEps.pdf", 
 MatrixForm[psieps]]; Export["prettyAlwaysPsiZ.pdf", 
 MatrixForm[psiz]]; Export["prettyAlwaysPsiEps.pdf", MatrixForm[psieps]];
Export["prettyAlwaysMuVal.pdf", muVal];

Print["got to end uncommented"]

Print["compute values to sub into system"]
xtm1={{qq[t-1]},{rr[t-1]},{ru[t-1]}};
xt={{q1RHS},{r1RHS},{ru1RHS}};
xtp1=bmat . xt;


xVec=Join[xtm1,xt,xtp1];
resid0=((hmat.xVec//.mySubs) - (psieps*uu$Shock + psiz * z1RHS))//Expand//Chop
Export["prettyAlwaysResid0.pdf", 
  MatrixForm[resid0//Simplify//Chop/. latexSubs]];




Print["solving unCon1"]
RUB=2/100;


unCon1 = ((fzComp[ {{qq[t]},{rr[t]},{ru[t]}},{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{uu$Shock}},{{zt1}},{{z1ExpRHS/.{qq[t-1]->qq[t],ru[t-1]->ru[t]}}}]/.rUnderBar->RUB//myN)/.eqvdIf[xx_,yy_,zz_]:>eqvdIf[xx,yy,yy])//.mySubs;

Print["got to zt1Subs"]

zt1Subs=Flatten[Solve[unCon1[[-1]],zt1]]/.eqvdIf->If
discrepSubs=Flatten[Solve[unCon1[[-2]],discrep[t]]]/.eqvdIf->If

z2RHS=zt1/.Join[zt1Subs,discrepSubs]/.mySubs//myN//FullSimplify//Chop;


Export["prettyAlwaysZ2RHS.pdf", 
  MatrixForm[z2RHS/. erfSubs /. latexSubs  // Expand]];


sysSubs={uu$Shock->eps[uu][t],zt1->(sqrtZt1[t])};
unCon1A=Chop[((((First/@unCon1)//.mySubs)//myN)/.sysSubs)//ExpandAll];


newWeightedStochasticBasis[lucaMod01, unCon1A];
{{stateVar, nonStateVar, theShock}, modEqns01} = 
  GenerateModelCode[lucaMod01];

polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];

simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];

modEqns01[updateParams[{RUB(*rUnderBar*)}//.mySubs//myN]]


resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {5, 1}], modEqns01, simp];
resZ10$0$0[isConvergedQ[]]


boo02 = resZ10$0$0[toOrder[{5, 5, 1}]];
If[boo02[isConvergedQ[]], 
polys = Expand[CreatePolynomials[boo02]] // Chop]


TableForm[duh= {(resid0[[1]]/.{rUnderBar->RUB,qq[t-1]->qq,ru[t-1]->ru})/.uu$Shock->.0 ,{qq, qLow, qHigh}, {ru, ruLow, ruHigh}} //. mySubs // myN];Plot3D @@ duh






polySubs={qq[t]->polys[[1]],ru[t]->polys[[2]],qq[t-1]->qq,ru[t-1]->ru};

z2RHSNew=(z2RHS/.rUnderBar->RUB/.discrepSubs)/.polySubs//Simplify

Export["prettyAlwaysZ2RHSNew.pdf", 
  MatrixForm[z2RHSNew/. erfSubs /. latexSubs  // Expand]];



r2RHS=((rr[t]-unCon1[[2,1]])//.Join[zt1Subs,discrepSubs]/.rUnderBar->RUB//.mySubs)/.polySubs//myN//Simplify//Chop
ru2RHS=((ru[t]-unCon1[[3,1]])//.Join[zt1Subs,discrepSubs]//.mySubs)/.polySubs//myN//Simplify//Chop
q2RHS=((qq[t]-unCon1[[1,1]])//.Join[zt1Subs,discrepSubs]//.mySubs)/.polySubs//myN//Simplify//Chop

Export["prettyAlwaysZ2.pdf", MatrixForm[z2RHS//myN//Simplify/. latexSubs]]
Export["prettyAlwaysR2.pdf", MatrixForm[r2RHS//myN//Simplify/. latexSubs]]
Export["prettyAlwaysQ2.pdf", MatrixForm[q2RHS//myN//Simplify/. latexSubs]]

Print["compute values to sub into system"]
xtm1={{qq},{rr},{ru}};
xt={{q2RHS},{r2RHS},{ru2RHS}};
xtp1={{q1ExpRHS},{r1ExpRHS},{ru1ExpRHS}}/.{qq[t-1]->q2RHS,rr[t-1]->r2RHS,ru[t-1]->ru2RHS};
xtp2=bmatCons . ({{q1ExpRHS},{r1ExpRHS},{ru1ExpRHS}}/.{qq[t-1]->q2RHS,rr[t-1]->r2RHS,ru[t-1]->ru2RHS});
xVec=Join[xtm1,xt,xtp1];
xVecTp1=Join[xt,xtp1,xtp2];
resid1=(hmat.xVec//.mySubs)- (psieps*uu$Shock + psiz * z1RHS)//Expand//Chop;
resid1Tp1=(hmat.xVecTp1//.mySubs) - (psieps . {{0}}+ psiz . {{z2RHS}})//Expand//Chop//FullSimplify;
Export["prettyAlwaysResid0.pdf", 
  MatrixForm[resid0/. latexSubs]];






Print["about to compute expectation"]




z2ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[z2RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];

q2ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[q2RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];

r2ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[r2RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];


ru2ExpRHS = 
  FullSimplify[
   PiecewiseExpand[
    Expectation[ru2RHS //. mySubs, 
     uu$Shock \[Distributed] 
      NormalDistribution[0, sigma$u /. mySubs]]]];




{zsub,xtVal}=compZ0[Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{0}}]//.lucaSubs//myN//Expand//Chop



{zsub0,eqns0}=fzIterComp[
Transpose[{{qt,rt,rut}}],Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{0}}]//.lucaSubs//myN//Expand//Chop



{zsub1,eqns1}=fzIterComp[
Transpose[{{qt,rt,rut}}],Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{zz/.zsub0/.{eps->0,qtm1->qt,rtm1->rt,rutm1->rut}}}]//.lucaSubs//myN//Expand//Chop


{zsub1,eqns1}=fzIterComp[
Transpose[{{qt,rt,rut}}],Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz2}},{{zz1}}]//.lucaSubs//myN//Expand//Chop



{zsub2,eqns2}=fzIterComp[
Transpose[{{qt,rt,rut}}],Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{zz/.zsub1/.{qtm1->qt,rtm1->rt,rutm1->rut}}}]//.lucaSubs//myN//Expand//Chop




{zsub3,eqns3}=fzIterComp[
Transpose[{{qt,rt,rut}}],Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{zz/.zsub2/.{qtm1->qt,rtm1->rt,rutm1->rut}}}]//.lucaSubs//myN//Expand//Chop


ha=NestList[doIter,{{zz->0},{}},340];


someVecs={{qt},{0.02},{rut}}/.#[[1]]&/@ha;



xtm1Val$1={{qtm1},{rtm1},{rutm1}};
ztVal$1={{zz}}/.ha[[2,1]]//numIt;
ztp1Val$1={{0}};
ztp2Val$1={{0}};
xtVal$1=bmat . xtm1Val$1 + phimat .( psiz . ztVal$1 +psieps . {{eps}} +
fmat . phimat . psiz .ztp1Val$1)//numIt;
xtp1Val$1=bmat . xtVal$1 + phimat .( psiz . ztp1Val$1 )//numIt;
xtp2Val$1=bmat . xtp1Val$1 + phimat .( psiz . ztp2Val$1 )//numIt;
hmat . Join[xtm1Val$1,xtVal$1,xtp1Val$1] -
((psiz . ztVal$1)  +(psieps . {{eps}}))//numIt;
hmat . Join[xtVal$1,xtp1Val$1,xtp2Val$1] -
((psiz . ztp1Val$1)  +(psieps . {{0}}))//numIt;




xtm1Val$2={{qtm1},{rtm1},{rutm1}};
ztVal$2={{zz}}/.ha[[3,1]]//numIt;
ztp1Val$2={{zz}}/.ha[[2,1]]/.
{eps->0,qtm1->xtVal$2[[1,1]],rutm1->xtVal$2[[3,1]]}//numIt;
ztp2Val$2={{0}};
xtVal$2=bmat . xtm1Val$2 + phimat .( psiz . ztVal$2 +psieps . {{eps}} +
fmat . phimat . psiz .ztp1Val$2)//numIt
xtp1Val$2=bmat . xtVal$2 + phimat .( psiz . ztp1Val$2 )//numIt;
xtp2Val$2=bmat . xtp1Val$2 + phimat .( psiz . ztp2Val$2 )//numIt;
hmat . Join[xtm1Val$2,xtVal$2,xtp1Val$2] -
((psiz . ztVal$2)  +(psieps . {{eps}}))//numIt
hmat . Join[xtVal$2,xtp1Val$2,xtp2Val$2] -
((psiz . ztp1Val$2)  +(psieps . {{0}}))//numIt



someVecs[[2]],bmat. someVecs[[2]]//.
((lucaSubs//myN//Expand//Chop)  - (psiz . {{zz}}/.ha[[2,1]]//.lucaSubs//myN//Expand)  -(psieps . {{eps}}))//Chop


(hmat .Join[{{qtm1},{rtm1},{rutm1}},someVecs[[3]],
(bmat. someVecs[[3]]//.
lucaSubs//myN//Expand//Chop)+
phimat . psiz . {{zz}}/.ha[[2,1]]]/.{qtm1->someVecs[[3,1,1]]/.eps->0,rutm1->someVecs[[3,3,1]]/.eps->0}//.lucaSubs//myN//Expand//Chop)






someVecs[[2]]
{zsub0,xtVal0}=compZ0[Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{0}}]//.lucaSubs//myN//Expand//Chop


{zsub1,xtVal1}=compZ0[Transpose[{{qtm1,rtm1,rutm1}}],
{{eps}},{{zz}},{{(zz/.zsub0)/.{qtm1->qt,rtm1->rt,rutm1->rut}}}]//.lucaSubs//myN//Expand//Chop






ha = {z2RHSNew/.{rUnderBar->RUB,uu$Shock->0} ,{qq, qLow, qHigh}, {ru, ruLow, ruHigh}} //. mySubs // myN
Plot3D @@ ha

ba= {(z1RHS/.{qq[t-1]->qq,ru[t-1]->ru})/.uu$Shock->.0 ,{qq, qLow, qHigh}, {ru, ruLow, ruHigh}} //. mySubs // myN
Plot3D @@ ba



duh= {(resid0/.{qq[t-1]->qq,ru[t-1]->ru})/.uu$Shock->.0 ,{qq, qLow, qHigh}, {ru, ruLow, ruHigh}} //. mySubs // myN;Plot3D @@ duh


formula verification






doPlots[rb_?NumberQ]:=
Module[{},
ba= {(z1RHS/.{qq[t-1]->qq,ru[t-1]->ru})/.uu$Shock->rb ,{qq, qLow, qHigh}, {ru, ruLow, ruHigh}} //. mySubs // myN;plt1=(Plot3D @@ ba);
ha = {z2RHSNew/.uu$Shock->rb ,{qq, qLow, qHigh}, {ru, ruLow, ruHigh}} //. mySubs // myN;(plt2=Plot3D @@ ha);
Show[GraphicsGrid[{{plt1,plt2}}]]]

*)




chkDoRecurIneqAlways[{}]:=
Module[{stateVar,nonStateVar,theShock,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{
thePath=genPath[1]/.
{qtm1->qq[t-1],rtm1->rr[t-1],rutm1->ru[t-1],eps->eps[ru][t]}},
With[{zZap=
(zzz$0$1[t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zzz$0$1[t]]])//Expand},
With[{theEqn={
qq[t]-(thePath[[4,1]]),
ru[t]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zzz$0$1[t]-(eqvdIf[discrep[t]>=0,zZap//Expand,zZap//Expand]//Expand)}},
newWeightedStochasticBasis[modClass,theEqn];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClass, simp];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
If[Not[to$551[isConvergedQ[]]],Throw["projection polynomial computation did not converge"]];
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop;
{{
Function @@ ({{qq,ru,ru$Shock},polys[[1]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[2]]}//Expand),
Function @@ ({{qq,ru,ru$Shock},polys[[-1]]}//Expand)
}}]]]]




chkDoRecurIneqAlways[zSubNow:{{(_Function)..}..}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modClass=Unique["modClass"]},
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])],
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],1]},
With[{xVars=Through[#[t]]&/@xVarsNoT},
With[{thePath=genPath[numZs+1]/.
{qtm1->(xVars[[-1,1]]/.t->t-1),rtm1->rr[t-1],
rutm1->(xVars[[-1,2]]/.t->t-1),eps->eps[ru][t]}},
With[{zZap=(zVarNames[[-1]]/.Solve[thePath[[5,1]]==0.02,zVarNames[[-1]],Reals])//Expand},Print[{zZap}];
With[{(*theIneq={
(zVarNames[[-1]]-(eqvdIf[discrep[t]>0,zZap//Expand,zZap//Expand])//Expand)==0,
discrep==(thePath[[5,1]]/.zVarNames[[-1]]->0)-0.02},*)
modVarEqns=
{xVars[[-1,1]]==thePath[[thePos[[-1,1]],1]],
xVars[[-1,2]]==thePath[[thePos[[-1,2]],1]]},
xSubs=Flatten[{
MapThread[(#1[[1]]->
#2[[1]][#3[[1]][t],#3[[2]][t],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVarsNoT,1]}],
MapThread[(#1[[2]]->
#2[[2]][#3[[1]][t],#3[[2]][t],0])&,
{Drop[xVars,-1],Drop[zSubNow,1],Drop[xVarsNoT,1]}]
}
],
zSubs=
MapThread[(#1[t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xVars}]
},
With[{(*theEqn=((Join[modVarEqns,theIneq]/.zSubs)//.xSubs)//Expand*)},Print[theEqn,xSubs,zSubs];
With[{zZap=(zVarNames[[-1]][t]/.Flatten[Solve[thePath[[5,1]]==rUnderBar//numIt,zVarNames[[-1]][t]]])//Expand},
With[{theEqn=({xVars[[-1,1]]-(thePath[[4,1]]),(*rr[t]-(thePath[[5,1]]),*)xVars[[-1,2]]-(thePath[[6,1]]),
discrep[t]-((thePath[[5,1]]/.zzz$0$1[t]->0)-rUnderBar//numIt),
zVarNames[[-1]][t]-(eqvdIf[discrep[t]>=0,zZap//Expand,zZap//Expand]//Expand)}//.Join[xSubs,zSubs])//Expand},
Print["theEqn=",{theEqn,zSubs,xSubs}//InputForm];
newWeightedStochasticBasis[modClass,(theEqn/.zSubs)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modClass];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClass, simp];
Print["resZ10$0$0 converged?",resZ10$0$0[isConvergedQ[]]];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[to$551[isConvergedQ[]], 
polys = Expand[CreatePolynomials[modClass,to$551]] // Chop];
Append[zSubNow,
{
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[1]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[2]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],ru$Shock},polys[[-1]]}//Expand)
}]]]]]]]]]]]/;
Length[zSubNow]>0
