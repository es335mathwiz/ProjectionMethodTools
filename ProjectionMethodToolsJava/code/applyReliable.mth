(* use reliable paper formula to solve occasionally binding constraints models*)
Get["prepPackages.mth"];
PrependTo[$Path,"../../../mathAMA/SymbolicAMA"];
PrependTo[$Path,"../../../mathAMA/NumericAMA"];
PrependTo[$Path,"../../../paperProduction/mathAMA/AMAModel/"];
PrependTo[$Path,"../../../paperProduction/symbAMA/code"];
PrependTo[$Path,"../../../paperProduction/FormatOptimize/"];

Needs["AccelerateAMA`"]
Print["changing MatrixPower to produce Identity Matrix for singular matrices raised to 0th power"]
Unprotect[MatrixPower]
MatrixPower[xx_?MatrixQ,0]:=IdentityMatrix[Length[xx]]/;
Length[xx]===Length[xx[[1]]]
Protect[MatrixPower]

Print["need code to compute psimat"]



numericLinearizeSystemForOBC[eqns_List]:=
Module[{noCnstr=eqns/.{eps[_][_]->0,eqvdIf[_,xx_,_]->xx},zf,hr,
bmat,phimat,fmat},Print[noCnstr];
With[{hmat=equationsToMatrix[noCnstr]},Print[hmat];
{ig,ig,ig,ig,qmat,ig,ig,ig}=numericAMA[hmat,1,1];Print[zf,hf];
Print["need to generalize to actually compute qmat"];
{hmat,qmat,{bmat,phimat,fmat}=numericComputeBPhiF[hmat,qmat,1]}
]]

nonFPart[xtm1_?MatrixQ,epsilon_?MatrixQ,
bmat_?MatrixQ,phimat_?MatrixQ,psimat_?MatrixQ]:=
bmat . xtm1 + phimat . psimat . epsilon

redoFPart[phimat_?MatrixQ,fmat_?MatrixQ,psiz_?MatrixQ,
horizon_Integer,numCon_Integer]:=
redoFPart[phimat,fmat,psiz,horizon,numCon,0]


redoFPart[phimat_?MatrixQ,fmat_?MatrixQ,psiz_?MatrixQ,
horizon_Integer,numCon_Integer,offset_Integer]:=
With[{zMats=redoGenZVars[horizon,numCon,offset]},
Plus @@ MapIndexed[ MatrixPower[fmat,(#2[[1]]-1)] . phimat. psiz . #1&,
Reverse[zMats]]]

redoGenZVars[horizons_Integer,numConstr_Integer]:=
redoGenZVars[horizons,numConstr,0]

redoGenZVars[horizons_Integer,numConstr_Integer,offset_Integer]:=
Table[
{ToExpression["zzz$"<>ToString[forTime]<>"$"<>ToString[ii]<>"[Global`t"<>"]"]},
{forTime,0-offset,horizons},{ii,numConstr,1,-1}]

redoGenZExpVars[horizons_Integer,numConstr_Integer]:=
redoGenZExpVars[horizons,numConstr,0]

redoGenZExpVars[horizons_Integer,numConstr_Integer,offset_Integer]:=
Table[
{ToExpression["zzzExp$"<>ToString[forTime]<>"$"<>ToString[ii]<>"[Global`t"<>"]"]},
{forTime,0-offset,horizons},{ii,numConstr,1,-1}]




fPart[phimat_?MatrixQ,fmat_?MatrixQ,psiz_?MatrixQ,
horizon_Integer,numCon_Integer]:=
fPart[phimat,fmat,psiz,horizon,numCon,0]

fPart[phimat_?MatrixQ,fmat_?MatrixQ,psiz_?MatrixQ,
horizon_Integer,numCon_Integer,offset_Integer]:=
With[{zMats=genZVars[horizon,numCon,offset]},
Plus @@ MapIndexed[ MatrixPower[fmat,(#2[[1]]-1)] . phimat. psiz . #1&,zMats]]

fPart[phimat_?MatrixQ,fmat_?MatrixQ,psiz_?MatrixQ,
horizon_Integer,lhsCnstrns_?MatrixQ,rhsCnstrns_?MatrixQ]:=
With[{numCon=Length[lhsCnstrns]},
With[{zMats=genZVars[horizon,numCon]},
Plus @@ MapIndexed[ MatrixPower[fmat,(#2[[1]]-1)] . phimat. psiz . #1&,zMats]]]

onlyOneTimePeriod[lhsCnstrnt_?MatrixQ]:=
Length[Union[Cases[lhsCnstrnt,_[Global`t+ss_.]->ss,Infinity]]]===1

Print["assumes all variables on lhs and dated the same time period."]
Print["try relaxing condition on cnstrntsPart"]
cnstrntsPart[lhsCnstrnt_?MatrixQ,rhsCnstrnt_?MatrixQ]:=
With[{forTime=Cases[lhsCnstrnt,_[Global`t+ss_.]->ss,Infinity][[1]]},
MapThread[eqvdIf[#1>=#2,0,#2-#1]&,(Flatten/@{lhsCnstrnt,rhsCnstrnt})]](*/;
onlyOneTimePeriod[lhsCnstrnt]*)


Print["try relaxing condition on makecnstrntsSubs"]
makeCnstrntsSubs[lhsCnstrnt_?MatrixQ,rhsCnstrnt_?MatrixQ,horizons_Integer]:=
With[{eqvdPart=Flatten[Table[
cnstrntsPart[lhsCnstrnt/.Global`t->Global`t+ii,rhsCnstrnt],{ii,horizons,0,-1}]],
zvars=Flatten[genZVars[horizons,Length[lhsCnstrnt]]]},
Thread[zvars:>eqvdPart][[{-1}]]](*/;
onlyOneTimePeriod[lhsCnstrnt]*)


internalizeSubs={xxx___+mlt_.*eqvdIf[cond_,tVal_,fVal_]+yyy___:>
eqvdIf[cond,xxx+mlt*tVal+yyy,xxx+fVal+yyy],
xxx___-mlt_.eqvdIf[cond_,tVal_,fVal_]+yyy___:>
eqvdIf[cond,xxx-mlt*tVal+yyy,xxx-fVal+yyy]}

Print["try relaxing condition on genLeadEqns"]
genLeadEqns[lhsCnstrns_?MatrixQ]:=
With[{vars=Cases[lhsCnstrns,xx_[Global`t+_.]:>ToString[xx],Infinity],
forTime=Cases[lhsCnstrns,_[Global`t+ss_.]->ss,Infinity][[1]]},
If[forTime<2,{},
With[{allTimes=genFutureDefs[#,forTime]&/@vars},Flatten[allTimes]
]]](*/;onlyOneTimePeriod[lhsCnstrns]*)

doVar[vn_String,num_Integer]:=
Table[ToExpression[vn<>"$tp"<>ToString[ii]],{ii,1,num}]

doVarSubs[vn_String,num_Integer]:=
If[num<2,{},
Table[ToExpression[vn<>"[Global`t+"<>ToString[ii]<>"]:>"<>vn<>"$tp"<>ToString[ii]<>"[t]"],{ii,1,num}]]

genFutureDefs[vn_String,num_Integer]:=
If[num<2,{},
With[{allVn=doVar[vn,num]},
With[{lhs=Through[allVn[Global`t]],
rhs=Prepend[Drop[Through[allVn[Global`t+1]],-1],
ToExpression[vn<>"[Global`t+1]"]]},
lhs-rhs]]]


Print["try relaxing condition on cnstrntsPartAll"]
cnstrntsPartAll[horizons_Integer,lhsCnstrnt_?MatrixQ,rhsCnstrnt_?MatrixQ]:=
With[{eqvdPart=Flatten[Table[
cnstrntsPart[lhsCnstrnt/.Global`t->Global`t+ii,rhsCnstrnt],{ii,horizons,0,-1}]],
vars=Cases[lhsCnstrnt,xx_[Global`t+_.]:>ToString[xx],Infinity],
zvars=Flatten[genZVars[horizons,Length[lhsCnstrnt]]],
leqns=genLeadEqns[lhsCnstrnt/.Global`t->Global`t+horizons]},
With[{allSubs=Flatten[doVarSubs[#,horizons]&/@vars]},
Join[leqns,zvars-eqvdPart/.allSubs]]](*/;
Union[Cases[lhsCnstrnt,_[Global`t+ss_.]->ss,Infinity]]==={0}*)


genZVars[horizons_Integer,numConstr_Integer]:=
genZVars[horizons,numConstr,0]:=
Table[
{ToExpression["zzz$"<>ToString[forTime]<>"$"<>ToString[ii]<>"[Global`t"<>"]"]},
{forTime,0,horizons},{ii,numConstr}]

genZVars[horizons_Integer,numConstr_Integer,offset_Integer]:=
Table[
{ToExpression["zzz$"<>ToString[forTime]<>"$"<>ToString[ii]<>"[Global`t"<>"]"]},
{forTime,0-offset,horizons},{ii,numConstr}]




lucaSubs = {betap -> 99/100, phip -> 1, rhop -> 1/2, sigmap -> 1, 
   rUnderBar -> 2/100, qLow -> -.5, qHigh -> .5, 
   ruLow -> -4*sigma$u/(1 - rho$ru), 
   ruHigh ->  4*sigma$u/(1 - rho$ru), integOrder -> {20}, 
   sigma$u -> 0.01, theMean -> {0}, rho$ru -> 0.5, adj -> 1};

   (*modParams = {betap, phip, rhop, rho$ru, sigmap} //. lucaSubs // N;*)
   modParams = {rUnderBar} //. lucaSubs // N;
lucaEqns = {qq[t] - (betap*(1 - rhop)*qq[t + 1] + rhop*qq[t - 1] - 
      sigmap*rr[t] + ru[t]),
   ru[t] - rho$ru*ru[t - 1] - adj*eps[uu][t],
   rr[t] - eqvdIf[phip*qq[t] >= rUnderBar, phip*qq[t], rUnderBar]}

lucaEqnsCons=ReplacePart[lucaEqns,3->
rr[t] - eqvdIf[phip*qq[t] >= rUnderBar,rUnderBar, phip*qq[t]]]
(*
{hmat,qmat,{bmat,phimat,fmat}}=linearizeSystemForOBC[lucaEqns//.lucaSubs];





{hmatCons,qmatCons,{bmatCons,phimatCons,fmatCons}}=linearizeSystemForOBC[lucaEqnsCons//.lucaSubs];


hmatCons=equationsToMatrix[
lucaEqnsCons/.{eps[_][_]->0,eqvdIf[_,xx_,_]->xx}]//FullSimplify;
{zfCons,hfCons}=symbolicAR[hmatCons];
amatCons=symbolicTransitionMatrix[hfCons];
{evlsCons,evcsCons}=Eigensystem[Transpose[amat]];
qmatCons=Join[zfCons,evcsCons[[{4}]]];
{bmatCons,phimatCons,fmatCons}=symbolicComputeBPhiF[hmatCons,qmatCons]//FullSimplify;

*)
hmatCons={{-rhop, 0, 0, 1, sigmap, -1, betap*(-1 + rhop), 0, 0}, 
 {0, 0, -rho$ru, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 0}};


{bmatCons,phimatCons,fmatCons}={{{(-1 + Sqrt[1 + 4*betap*(-1 + rhop)*rhop])/(2*betap*(-1 + rhop)), 0, 
   (2*rho$ru)/(1 + Sqrt[1 + 4*betap*(-1 + rhop)*rhop] + 
     2*betap*(-1 + rhop)*rho$ru)}, {0, 0, 0}, {0, 0, rho$ru}}, 
 {{2/(1 + Sqrt[1 + 4*betap*(-1 + rhop)*rhop]), 
   2/(1 + Sqrt[1 + 4*betap*(-1 + rhop)*rhop] + 2*betap*(-1 + rhop)*rho$ru), 
   (-2*sigmap)/(1 + Sqrt[1 + 4*betap*(-1 + rhop)*rhop])}, {0, 0, 1}, 
  {0, 1, 0}}, 
 {{(-2*betap*(-1 + rhop))/(1 + Sqrt[1 + 4*betap*(-1 + rhop)*rhop]), 0, 0}, 
  {0, 0, 0}, {0, 0, 0}}};



hmat = {{-rhop, 0, 0, 1, sigmap, -1, -(betap*(1 - rhop)), 0, 0}, {0, 
    0, 0, -phip, 1, 0, 0, 0, 0}, {0, 0, -rho$ru, 0, 0, 1, 0, 0, 0}};
bmat = {{(2*rhop)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), 
    0, (2*rho$ru)/(1 + 2*betap*(-1 + rhop)*rho$ru + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {(2*
       phip*rhop)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), 
    0, (2*phip*rho$ru)/(1 + 2*betap*(-1 + rhop)*rho$ru + phip*sigmap +
        Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {0, 0,
     rho$ru}};
phimat = {{2/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), (-2*
       sigmap)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), 
    2/(1 + 2*betap*(-1 + rhop)*rho$ru + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {(2*
       phip)/(1 + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]), (2*
        betap*(-1 + rhop)*rhop + 
       phip*sigmap*(1 + phip*sigmap - 
          Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]))/(2*
       betap*(-1 + rhop)*rhop), (2*phip)/(1 + 
       2*betap*(-1 + rhop)*rho$ru + phip*sigmap + 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])}, {0, 0, 
    1}};
fmat = {{(1 + phip*sigmap - 
       Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2])/(2*rhop),
     0, 0}, {(phip*(1 + phip*sigmap - 
         Sqrt[4*betap*(-1 + rhop)*rhop + (1 + phip*sigmap)^2]))/(2*
       rhop), 0, 0}, {0, 0, 0}};

genLucaMat[aBasis_?JavaObjectQ]:=
Module[{sns=
Flatten[Through[{gtStateVars,gtNonStateVars}[aBasis]]],
outerBasis=Transpose[{doExportOrderedOuter[aBasis]}]},
Print["aprel",sns,":",Length[sns],":",Length[sns]-4];
With[{qCols=Length[outerBasis]},
With[{qkArray = Array[qk, {3, qCols}]},
With[{theProd = qkArray.outerBasis},
With[{targ = (bmat.{{qq}, {rr}, {ru}} + 
     phimat.{{0}, {0}, {adj}}.{{uu$Shock}}) + 
   zero*(qq*rr + qq*uu$Shock + rr*uu$Shock + qq*rr*uu$Shock)},
With[{goodQkArray = 
 qkArray /. 
  Flatten[Solve[
    Thread[(tcl = 
         Flatten[CoefficientList[targ, {qq, ru, uu$Shock}]]) == (acl =
          Flatten[
          CoefficientList[theProd, {"qq", "ru", "uu$Shock"}]])] /. 
     zero -> 0, Flatten[qkArray]]]},
With[{lucaMatSymb = 
 Join[goodQkArray[[{1, 3, 2}]], ConstantArray[0, {Length[sns]-4 , qCols}]]},
lucaMatSymb //. lucaSubs]]]]]]]



Print["take care of difference in projmethod order and equations to matrix"]
Print["projectionmethod order for state before nonstate"]
(*
Print["must do same for bmat phimat fmat etc"]
*)
psiz={{0},{1},{0}};
psieps={{0},{0},{1}};



eqns00=InputForm[Flatten[fp+nfp]]

mMat={{phip},{0},{0}};

cnstrntsPart[{{qq[t]}},{{0.02}}]

(*
nfp=nonFPart[{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{eps[uu][t]}},bmat,phimat,psieps]//Chop;

fp=fPart[phimat,fmat,psiz,0,1]
*)

Print["need to generalize AMA state vector consistent with projection state vector"]
Print["need to include symbolic parameters in specification"]


genSysLagged[horizon_Integer]:=
Join[Flatten[-{{qq[t]},{rr[t]},{ru[t]}}+(nonFPart[{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{eps[uu][t]}},bmat,phimat,psieps] + If[horizon===boo,0,fPart[phimat,fmat,psiz,horizon,1]])]//Chop,
cnstrntsPartAll[horizon, {{0.26774226536389173*qq[-1 + t] + 0.3086481523403434*ru[-1 + t] + 
   0.6172963046806865*eps[uu][t]}}, {{rUnderBar}}]]

genSys[horizon_Integer]:=
Join[Flatten[-{{qq[t]},{rr[t]},{ru[t]}}+(nonFPart[{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{eps[uu][t]}},bmat,phimat,psieps] + If[horizon===boo,0,fPart[phimat,fmat,psiz,horizon,1]])]//Chop,
cnstrntsPartAll[horizon, {{qq[t]}}, {{rUnderBar}}]]

genSysSubbed[horizon_Integer]:=
Join[Flatten[{{qq[t]},{rr[t]},{ru[t]}}-((nonFPart[{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{eps[uu][t]}},bmat,phimat,psieps] + If[horizon===boo,0,fPart[phimat,fmat,psiz,horizon,1]]/.makeCnstrntsSubs[{{qq[t]}},{{rUnderBar}},horizon])/.internalizeSubs)]//Chop,
cnstrntsPartAll[horizon, {{qq[t]}}, {{rUnderBar}}]]


genSysLaggedSubbed[horizon_Integer]:=
Join[Flatten[{{qq[t]},{rr[t]},{ru[t]}}-((nonFPart[{{qq[t-1]},{rr[t-1]},{ru[t-1]}},{{eps[uu][t]}},bmat,phimat,psieps] + If[horizon===boo,0,fPart[phimat,fmat,psiz,horizon,1]]/.makeCnstrntsSubs[{{0.26774226536389173*qq[-1 + t] + 0.3086481523403434*ru[-1 + t] + 
   0.6172963046806865*eps[uu][t]}},{{rUnderBar}},horizon])/.internalizeSubs)]//Chop,
cnstrntsPartAll[horizon, {{qq[t]}}, {{rUnderBar}}]]//.lucaSubs


(*genSys[0]*)




gatherByShocks[fourList_?MatrixQ]:=
With[{theShocks=Union[fourList[[All,3]]]},
Cases[fourList,{_,_,#,_}]&/@theShocks]


gatherByRu[fourList_?MatrixQ]:=
With[{theShocks=Union[fourList[[All,2]]]},
Cases[fourList,{_,#,_,_}]&/@theShocks]


gatherByQq[fourList_?MatrixQ]:=
With[{theShocks=Union[fourList[[All,1]]]},
Cases[fourList,{#,_,_,_}]&/@theShocks]



