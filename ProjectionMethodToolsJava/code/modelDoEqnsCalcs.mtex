%
\newcommand{\aVar}[4]{\item[$#1(#4)$] \ 
  \begin{itemize}
  \item    \includegraphics{#2}
  \item    \includegraphics{#3}
  \end{itemize}
}
\newcommand{\theSys}[2]{
  \begin{itemize}
  \item    \includegraphics{#1}
  \item    \includegraphics{#2}
  \end{itemize}
}
\newcommand{\mma}{{\bf Mathematica}}
\newcommand{\mmaF}[1]{{\bf #1}}
\newcommand{\javaF}[1]{{\bf #1}}
A list of equations constitutes the model definition\footnote{Shocks are of the
form eps[name][t]. State and non-state variables are of the form 
symbName[t-1], symbName[t], symbName[t+1].  The shocks and the variables with
a t-1 index become the model state variables.\footnote{Although given a time t index, the shocks are treated as known and completely determined as are all the
t-1 regular state variables. }
 The remaining symbols become
the model parameters.}

\includegraphics{lucaEqn.pdf}


the \mma\  function \mmaF{GenerateModelCode} uses these equations
to 

\begin{itemize}
\item generate and compile java code implementing the \javaF{EqValDrv } class version of the model and returns a symbol providing access to the object
\item create  \mma\ lists: \mmaF{stateVars}, \mmaF{nonStateVars}, \mma{shockVars} 
\end{itemize}



The \mma\  function \mmaF{newWeightedStochasticBasis}



%<*theStatePoly=theBasis[getTheState[]];*>
%<*theNonStatePoly=theBasis[getTheNonState[]];*>
The state variables\footnote{replacing \$ with X so that \LaTeX is happy.}

\begin{gather*}
  <*ridDollar/@theStatePoly[getStateVariableNames[]]*>
\end{gather*}

The next steps require first providing values for any parameters in the model:

The \mma command will look something like:


modEqns[updateParams[modParams]]

Next we will augment the information
obtained from parsing the model and setting the parameters
with information specifying the projection method basis:

The state variable ranges, the state variable and polynomial orders,

If the model is stochastic we will specify, in addition to the shock polynomial order, the means, standard deviations and
the integration order for the gauss hermite integration routines.\footnote{The program infers the range for the shocks from the values needed for the
integration routine.}

\begin{gather*}
<*theStatePoly[getRanges[]]*>  
\end{gather*}

The polynomial orders

The polynomials for the state variables are:

%<*doExportXFormedCheb[theBasis];*>

\includegraphics{xFormedChebPolys.pdf}




Orders for outer product

\begin{gather*}
<*theStatePoly[getTheGrid[][generatePolyOrdersForOuterProduct[]]]*>
\end{gather*}




The ordered outer product of these polynomials is:


%<*doExportOrderedOuter[theBasis];*>
\includegraphics{xFormedOrderedOuter.pdf}



The transformed Chebyshev nodes 

\begin{gather*}
<*Chop[theStatePoly[getXformedChebNodePts[]]]*>  
\end{gather*}




The ordered outerproducts evaluated at the eval points

%<*doExportOuterEval[theBasis];*>

\includegraphics{outerXformedEval.pdf}



The untransformed polynomials would be


%<*doExportRawCheb[theBasis];*>


\includegraphics{rawChebPolys.pdf}

\begin{gather*}
  <*Chop[theStatePoly[getOrders[]]]*>
\end{gather*}


\mmaF{WeightedStochasticBasis} extends \mmaF{Stochastic Basis} which handles 
much of the initialization.\footnote{right now it sets perfectforesightQ true and and WeightedStochasticBasis sets this flag false.  Not sure why this is the case. Probably should be changed. At most two shocks.  But, even two shocks needs more testing.}

For a stochastic model, the shock augmented information goes into the
information  producing the {\bf GridVars } object.  The creation of
the \javaF{GridPointsSpec} object adds the augmented  state powers.  The weighted stochastic basis has the information describing the parameters for
the integration routine.

The \javaF{GridPointSpec} resides in an \javaF{StateVariablePolynomials} object.

The locations of the shock variables are  recorded in the \javaF{WeightedStochasticBasis.}


Given a \javaF{WeightedStochasticBasis} describing a projection method 
grid and a matrix of polynomial weights, we can
evaluate the basis polynomials model at the collocation grid points.
and iterate these polynomials one period ahead.  We 
can also compute the derivative with respect to 
the polynomial weights for the iterated polynomials.

This is done with the \javaF{setAllWeights}:

In \mma one could enter something like

theBasis[setAllWeights[theMat]]

This matrix must include weights for all the unaugmented state variables (not
including the shocks), $n_s$ as well as the non-state variables $n_{ns}$. 

The \javaF{setAllWeights} method also causes the \javaF{StateVariablePolynomials} to invoke its \javaF{setTheWeights} method.  This populates the matrix with
the chebyshev node basis polynomial values at the basis point and iterates
these polynomials forward coputing the values and derivatives of the polynomials at time t.



The order for shocks are always 1. The weight for the shocks are always (0,1)


Given and \javaF{eqValDrv} object describing a model and a
\javaF{WeightedStochasticBasis} describing a projection method grid and a matrix
of polynomial weights, we can
evaluate the model and the derivative with respect to the weights at the
collocation grid points.






Untransformed Chebyshev polynomials




The basis at the Chebyshev nodes

\begin{gather*}
  <*Chop[theStatePoly[getBasisAtChebNodes[]]]*>
\end{gather*}

The state variable polynomial weights

\begin{gather*}
  <*Chop[theStatePoly[getStateVariablePolynomialWeights[]][getArray[]]]*>
\end{gather*}


The non-state variables

\begin{gather*}
  <*ridDollar/@theNonStatePoly[getNonStateVariableNames[]]*>
\end{gather*}





The non-state variable polynomial weights


\begin{gather*}
  <*Chop[theNonStatePoly[getRelevantWeightsNSP[]]][getArray[]]*>
\end{gather*}


Applying the weights to get state and nonstate for time 0 produces


\begin{gather*}
  <*Chop[tryMat . theStatePoly[getBasisAtChebNodes[]]]*>
\end{gather*}



In \javaF{StateVariablePolynomials} iterated at cheb nodes


t variables

\begin{gather*}
<*Chop[theStatePoly[getVariablesAtChebyshevNodesTimeT[]][getArray[]]]*>  
\end{gather*}

time t derivatives

\begin{gather*}
<*Chop[theStatePoly[getVariablesAtChebNodesTimeTDerivWRTWtsNSP[]][getArray[]]]*>  
\end{gather*}




non state time t

\begin{gather*}
<*Chop[theStatePoly[getVariablesAtChebyshevNodesTimeTNSP[]][getArray[]]]*>
\end{gather*}




t+1

\begin{gather*}
  <*Chop[theStatePoly[getVariablesIteratedFromChebNodesTimeTP1[]][getArray[]]]*>
\end{gather*}

iterated $t+1$ derivatives

\begin{gather*}
  <*Chop[theStatePoly[getVariablesIteratedFromChebNodesTimeTP1DerivWRTWts[]][getArray[]]]*>
\end{gather*}


non state time tp1

\begin{gather*}
<*Chop[theStatePoly[getVariablesIteratedFromChebNodesTimeTP1[]][getArray[]]]*>
\end{gather*}


state tp1 derivatives

\begin{gather*}
<*Chop[theStatePoly[getVariablesIteratedFromChebNodesTimeTP1DerivWRTWts[]][getArray[]]]*>  
\end{gather*}

non state tp1 derivatives 

\begin{gather*}
<*Chop[theStatePoly[getVariablesIteratedFromChebNodesTimeTP1DerivWRTWtsNSP[]][getArray[]]]*>  
\end{gather*}


non state tp1 variables

\begin{gather*}
<*Chop[theStatePoly[getVariablesIteratedFromChebNodesTimeTP1NSP[]][getArray[]]]*>
\end{gather*}





To iterate forward we need to evaluate the basis at the time 0 state variable
values


The time t derivatives wrt weights are just the corresponding rows in the
orderered outer product.

They are recorded in \javaF{StateVariablePolynomials}

\begin{gather*}
  <*Chop[theStatePoly[getVariablesAtChebNodesTimeTDerivWRTWts[]][getArray[]]]*>
\end{gather*}

The shock variable values and derivatives

\begin{description}
%<*{vFName,dFName}=doExportState[varName="uu$Shock",vTime=-1,theBasis];*>
\aVar{<*ridDollar[varName]*>}{<*vFName*>}{<*dFName*>}{<*vTime*>}
\end{description}



\includegraphics{uuXShockX-1DrvsXLft.pdf}

\includegraphics{uuXShockX-1DrvsXRght.pdf}





State variable values and derivatives


\begin{description}
%<*{vFName,dFName}=doExportState[varName="qq",vTime=-1,theBasis];*>
\aVar{<*varName*>}{<*vFName*>}{<*dFName*>}{<*vTime*>}


\includegraphics{qqX-1DrvsXLft.pdf}

\includegraphics{qqX-1DrvsXRght.pdf}





%<*{vFName,dFName}=doExportState[varName="qq",vTime=0,theBasis];*>
\aVar{<*varName*>}{<*vFName*>}{<*dFName*>}{<*vTime*>}


\includegraphics{qqX0DrvsXLft.pdf}

\includegraphics{qqX0DrvsXRght.pdf}




%<*{vFName,dFName}=doExportState[varName="qq",vTime=1,theBasis];*>
\aVar{<*varName*>}{<*vFName*>}{<*dFName*>}{<*vTime*>}
\end{description}

\includegraphics{qqX1DrvsXLft.pdf}

\includegraphics{qqX1DrvsXRght.pdf}



Non-state variable values and derivatives


\begin{description}
%<*{vFName,dFName}=doExportNonState[varName="rr",vTime=0,theBasis];*>
\aVar{<*varName*>}{<*vFName*>}{<*dFName*>}{<*vTime*>}

\includegraphics{rrX0DrvsXLft.pdf}

\includegraphics{rrX0DrvsXRght.pdf}


%<*{vFName,dFName}=doExportNonState[varName="rr",vTime=1,theBasis];*>
\aVar{<*varName*>}{<*vFName*>}{<*dFName*>}{<*vTime*>}
\end{description}

\includegraphics{rrX1DrvsXLft.pdf}

\includegraphics{rrX1DrvsXRght.pdf}

System equation values

%<*{sysVals,sysDrvs}=doExportSys[theMod,theBasis];*>
\theSys{<*sysVals*>}{<*sysDrvs*>}


\includegraphics{lucaModX1DrvsXLft.pdf}

\includegraphics{lucaModX1DrvsXRght.pdf}



%<*daGr=theStatePoly[getTheGrid[]];*>

%<*ePoints=daGr[getXformedChebNodePts[#]]&/@theStatePoly[getStateVariableNames[]];*>

The evaluation transformed evaluation points for the state variables are:


\begin{gather*}
<*TableForm[Chop[ePoints]]*>  
\end{gather*}



%<*eSubs={qq->#[[1]],uu$Shock->#[[2]]}& /@Transpose[ePoints];*>


%<*ooPolys=Transpose[(preEvalPolys=doExportOrderedOuter[theBasis]/.toSymbSubs[theBasis])/.eSubs];*>




Before evaluation, the polynomials have the form

\begin{gather*}
<*TableForm[Transpose[{preEvalPolys/.uu$Shock->uuXShock}]]*> 
\end{gather*}

Evaluating the polynomials at each of the evaluation points produces:\footnote{This is by construction.  The untransformed polynomials can provide these
values with one computation once the grid dimensions have been specified. I 
don't think the code takes advantage of this fact.} These values are also
the derivatives of the state and non state variables
 with respect to the weights.

\begin{gather*}
<*TableForm[ooPolys//Chop]*>
\end{gather*}



%<*both=tryMat . ooPolys//Chop;*>

Applying the state and non-state weights produces their time 0 values:

commenting out mma


\begin{gather*}
<*(*TableForm[both//Chop]*)*>
\end{gather*}

%<*{numRows,numCols}=Dimensions[tryMat];*>
%<*coeffs=Array[aa,{numRows,numCols}];*>
%<*nowSubs=Thread[Flatten[coeffs]->Flatten[tryMat]];*>


%<*nxtStep=forIterate[coeffs=Array[aa,{numRows,numCols}]];*>
%<*nxtStepEvaled=nxtStep//.nowSubs;*>

\begin{gather*}
<*TableForm[nxtStepEvaled//Chop]*>
\end{gather*}



Applying the polynomials and their weights to the time 0 
state values produces the time t+1 state and non-state values:


The variables depend in a somewhat complicated way on the polynomial weights,
symbolic algebra programs can compute the polynomials and take their derivatives.\footnote{ The program uses operator overloading to accomplish this task.}

%\begin{gather*}
%<*TableForm[nxtStep[[1,1]]/.uu$Shock->uuXShock//Expand//Chop]*>
%\end{gather*}




%<*theDrv=D[nxtStep,#] &/@ Flatten[coeffs]//Expand;*>


Symbolic function composition and differentiation produces:

%<*drvsToShow=theDrv/.nowSubs/.uu$Shock->0//Chop;*>
%<*drvsToShowLeft=#[[All,1]]&/@drvsToShow;*>
%<*drvsToShowRight=#[[All,2]]&/@drvsToShow;*>

\begin{gather*}
<*TableForm[drvsToShowLeft]*>  
\end{gather*}



\begin{gather*}
<*TableForm[drvsToShowRight]*>
\end{gather*}


Numerical derivatives are not very good.
