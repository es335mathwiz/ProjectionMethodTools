Get["ProjectionInterface`"]
Get["paperFocus.mth"]
doSub[modSymbNow_Symbol,theRes_?JavaObjectQ]:=
Module[{betterEqnZSub,orig,forZSub,
betterPathZSub,pathNow,hProd,rrVal,
nodePtSubs=gtXFormedChebSubsNotStrings[
theRes[getTheWeightedStochasticBasis[]]]},
Print["theRes converged?",theRes[isConvergedQ[]]];
If[theRes[isConvergedQ[]], 
{orig,forZSub}=
ProjectionInterface`Private`redoCreatePolynomials[modSymbNow,theRes];
betterEqnZSub=Join[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->eps,qq->qq[t-1],rr->rr[t-1],ru->ru[t-1]}),{(discrep[t]->(discrep[t]-theEqns[[3]])),eqvdIf->If}];
rrVal=(theEqns[[4]]//.betterEqnZSub)/.{eps[ru][t]->ru$Shock,qq[t-1]->qq,ru[t-1]->ru,eps->ru$Shock};
betterPathZSub=Append[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->ru$Shock,qq->qtm1,rr->rtm1,ru->rutm1}),eqvdIf->If];
pathNow=(genPath[1,1]/.betterPathZSub)/.(discrep[t]->(discrep[t]-theEqns[[3]]))/.{qq[t-1]->qtm1,ru[t-1]->rutm1};
hProd=((hmat//numIt) . pathNow//Expand//Chop)/.
{eps[ru][t]->ru$Shock,qtm1->qq,rutm1->ru,eps->ru$Shock,eqvdIf->If};
Sort[{rr[t]-rrVal/.nodePtSubs,Flatten[hProd[[2,1]]]/.nodePtSubs}//Transpose],"not converged"]
]


doSubVerbose[modSymbNow_Symbol,theRes_?JavaObjectQ]:=
Module[{betterEqnZSub,orig,forZSub,xVarSubs,xVars,
betterPathZSub,pathNow,hProd,rrVal,
nodePtSubs=gtXFormedChebSubsNotStrings[
theRes[getTheWeightedStochasticBasis[]]]},
Print["theRes converged?",theRes[isConvergedQ[]]];
If[theRes[isConvergedQ[]], 
{orig,forZSub}=
ProjectionInterface`Private`redoCreatePolynomials[modSymbNow,theRes];
xVarSubs=MapThread[#1->#2& ,{xVars[[-1]],(xVars[[-1]]-orig[[{1,2}]])}];
betterEqnZSub=Join[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->eps,qq->qq[t-1],rr->rr[t-1],ru->ru[t-1]}),{(discrep[t]->(discrep[t]-theEqns[[3]])),eqvdIf->If}];
rrVal=((theEqns[[4]]/.betterEqnZSub)/.{eps[ru][t]->ru$Shock,qq[t-1]->qq,ru[t-1]->ru,eps->ru$Shock})/.xVarSubs;
betterPathZSub=Append[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->ru$Shock,qq->qtm1,rr->rtm1,ru->rutm1}),eqvdIf->If];
pathNow=(genPath[1,1]/.betterPathZSub)/.(discrep[t]->(discrep[t]-theEqns[[3]]))/.{qq[t-1]->qtm1,ru[t-1]->rutm1};
hProd=((hmat//numIt) . pathNow//Expand//Chop)/.
{eps[ru][t]->ru$Shock,qtm1->qq,rutm1->ru,eps->ru$Shock,eqvdIf->If};
Sort[{rr[t]-rrVal/.nodePtSubs,hProd/.nodePtSubs}//Transpose],"not converged"
]]

(* to debug doSub


*)
(*
thePath=genPath[1]/.
{Global`qtm1->Global`qq[Global`t-1],Global`rtm1->Global`rr[Global`t-1],Global`rutm1->Global`ru[Global`t-1],Global`eps->Global`eps[Global`ru][Global`t]};
zZap=
(Global`zzz$0$1[Global`t]/.Flatten[Solve[thePath[[5,1]]==Global`rUnderBar//Global`numIt,Global`zzz$0$1[Global`t]]])//Expand;
theEqns={
Global`qq[Global`t]-(thePath[[4,1]]),
Global`ru[Global`t]-(thePath[[6,1]]),
Global`discrep[Global`t]-((thePath[[5,1]]/.Global`zzz$0$1[Global`t]->0)-Global`rUnderBar//Global`numIt),
Global`rr[Global`t]-(thePath[[5,1]]),
Global`zzz$0$1[Global`t]-(Global`eqvdIf[Global`discrep[Global`t]>=0,0,zZap//Expand]//Expand)}
Print["variables in alphabetic orderr and grouped state then nonstate"];


newWeightedStochasticBasis[modSymbNow,(theEqns)//Expand];
{{stateVar, nonStateVar, theShock}, modClassNow} = 
  GenerateModelCode[modSymbNow];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs//N, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs//N, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {Length[theEqns], 1}], modClassNow, simp];

(*to debug*)
theRes=resZ10$0$0
modSymbNow=modSymb



zSubNow=doRecurIneqOcc[{}];
numZs=Length[zSubNow];
nodePtSubs=gtXFormedChebSubsNotStrings[
theRes[getTheWeightedStochasticBasis[]]];
If[theRes[isConvergedQ[]], 
{orig,forZSub}=
ProjectionInterface`Private`redoCreatePolynomials[modSymbNow,theRes];

xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0];
xVars=Through[#[Global`t]]&/@xVarsNoT;

xVarSubs=MapThread[#1->#2& ,{xVars[[-1]],({qq[t],ru[t]}-orig[[{1,2}]])}];
betterEqnZSub=Join[(MapThread[#1->#2&,forZSub]/.{eps[ru][t]->eps,qq->qq[t-1],rr->rr[t-1],ru->ru[t-1]}),{(discrep[t]->((discrep[t]-theEqns[[3]]))/.xVarSubs),eqvdIf->If}];
rrVal=(((theEqns[[4]]/.betterEqnZSub)/.{eps[ru][t]->ru$Shock,qq[t-1]->qq,ru[t-1]->ru,eps->ru$Shock,(discrep[t]->(discrep[t]-theEqns[[3]])),eqvdIf->If})/.xVarSubs)/.
{eps[ru][t]->ru$Shock,qtm1->qq,rutm1->ru,eps->ru$Shock,eqvdIf->If};



zSubs=
MapThread[(#1[Global`t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xTp1Vals}];
zEqns=ProjectionInterface`Private`subOutPiecewise[zSubs/.HoldPattern[xx_->yy_]->xx  -(yy)];
zZap=(zVarNames[[-1]][Global`t]/.Flatten[Solve[thePath[[5,1]]==Global`rUnderBar//Global`numIt,zVarNames[[-1]][Global`t]]])//Expand;
theEqns=Join[
	({xVars[[-1,1]]-(thePath[[4,1]]),xVars[[-1,2]]-(thePath[[6,1]])})//Expand,
{Global`discrep[Global`t]-((thePath[[5,1]]/.zVarNames[[-1]][Global`t]->0)-Global`rUnderBar//Global`numIt),
Global`rr[Global`t]-(thePath[[5,1]])
},
zEqns,
{zVarNames[[-1]][Global`t]-(Global`eqvdIf[Global`discrep[Global`t]>=0,0,zZap//Expand]//Expand)}//Expand];
newWeightedStochasticBasis[modSymb,(theEqns)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modSymb];
polyRange = {{Global`qLow, Global`qHigh}, {Global`ruLow, Global`ruHigh}} //. Global`mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. Global`mySubs, initPower, theShock,
    Global`theMean //. Global`mySubs, {Global`sigma$u} //. Global`mySubs, 
   Global`integOrder //. Global`mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {Length[theEqns], 1}], modClass, simp];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 01"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{1,1,1}]];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 02"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{2,2,1}]];
If[to$551[isConvergedQ[]]===True,Print["converged 03"],Throw["projection polynomial computation did not converge"]];

(*
polys = Expand[CreatePolynomials[modSymb,to$551]] // Chop;
Print["the Polys=",InputForm[{polys,CreatePolynomials[to$551]}]];
Append[zSubNow,
{
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],Global`ru$Shock},polys[[1]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],Global`ru$Shock},polys[[2]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],Global`ru$Shock},polys[[-1]]}//Expand)
}


*)


doRecurIneqOcc[zSubNow:{{(_Function)..}..}]:=
Module[{stateVar,nonStateVar,theShock,modEqns,polyRange,initPower,shockPower,
lucaBasis,simp,resZ10$0$0,modSymb=Unique["modSymb"],modClass=Unique["modClass"]},
With[{numZs=Length[zSubNow]},
With[{zVarNames=Flatten[redoGenZVars[numZs,1]]/.ProjectionInterface`Private`ridTSubs,
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])],
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0]},Print["zvn=",zVarNames];
With[{xVars=Through[#[Global`t]]&/@xVarsNoT},
With[{thePath=genPath[numZs+1]/.
{Global`qtm1->(xVars[[-1,1]]/.Global`t->Global`t-1),Global`rtm1->Global`rr[Global`t-1],
Global`rutm1->(xVars[[-1,2]]/.Global`t->Global`t-1),Global`eps->Global`eps[Global`ru][Global`t]}},
With[{(*zZap=(zVarNames[[-1]]/.Solve[thePath[[5,1]]==0.02,zVarNames[[-1]],Reals])//Expand*)},
With[{
xTp1Vals=MapThread[{
#2[[1]][#3[[1]][Global`t],#3[[2]][Global`t],0],
#2[[2]][#3[[1]][Global`t],#3[[2]][Global`t],0]}&,
{Drop[xVars,-1],Drop[zSubNow,0],Drop[xVarsNoT,1]}]
},
With[{
zSubs=
MapThread[(#1[Global`t]->
#2[[-1]][#3[[1]],#3[[2]],0])&,
{Drop[zVarNames,-1],zSubNow,xTp1Vals}]
},
With[{zEqns=subOutPiecewise[zSubs/.HoldPattern[xx_->yy_]->xx  -(yy)]},
With[{zZap=(zVarNames[[-1]][Global`t]/.Flatten[Solve[thePath[[5,1]]==Global`rUnderBar//Global`numIt,zVarNames[[-1]][Global`t]]])//Expand},
With[{theEqns=Join[
	({xVars[[-1,1]]-(thePath[[4,1]]),xVars[[-1,2]]-(thePath[[6,1]])})//Expand,
{Global`discrep[Global`t]-((thePath[[5,1]]/.zVarNames[[-1]][Global`t]->0)-Global`rUnderBar//Global`numIt)},
zEqns,
{zVarNames[[-1]][Global`t]-(Global`eqvdIf[Global`discrep[Global`t]>=0,0,zZap//Expand]//Expand)}//Expand]},
newWeightedStochasticBasis[modSymb,(theEqns)//Expand];
{{stateVar, nonStateVar, theShock}, modClass} = 
  GenerateModelCode[modSymb];
polyRange = {{Global`qLow, Global`qHigh}, {Global`ruLow, Global`ruHigh}} //. Global`mySubs;
Print["here",InputForm[{theEqns,zZap,zEqns,zSubs}]];
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. Global`mySubs, initPower, theShock,
    Global`theMean //. Global`mySubs, {Global`sigma$u} //. Global`mySubs, 
   Global`integOrder //. Global`mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {Length[theEqns], 1}], modClass, simp];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 01"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{1,1,1}]];
If[resZ10$0$0[isConvergedQ[]]===True,Print["converged 02"],Throw["projection polynomial computation did not converge at first stage"]];
to$551 = resZ10$0$0[toOrder[{2,2,1}]];
If[to$551[isConvergedQ[]]===True,Print["converged 03"],Throw["projection polynomial computation did not converge"]];
polys = Expand[CreatePolynomials[modSymb,to$551]] // Chop;
Print["the Polys=",InputForm[{polys,CreatePolynomials[to$551]}]];
Append[zSubNow,
{
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],Global`ru$Shock},polys[[1]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],Global`ru$Shock},polys[[2]]}//Expand),
Function @@ ({{xVarsNoT[[-1,1]],xVarsNoT[[-1,2]],Global`ru$Shock},polys[[-1]]}//Expand)
}]]]]]]]]]]]]/;
Length[zSubNow]>0



*)





(*
zVarNames=Flatten[redoGenZVars[numZs,1]]/.ProjectionInterface`Private`ridTSubs;
thePos=Reverse[{1,3}+#&/@(3*Range[numZs])];
xVarsNoT=Drop[Flatten[genXVars[numZs,1],1],0];
xVars=Through[#[Global`t]]&/@xVarsNoT;
thePath=genPath[numZs+1]/.
{Global`qtm1->(xVars[[-1,1]]/.Global`t->Global`t-1),Global`rtm1->Global`rr[Global`t-1],
Global`rutm1->(xVars[[-1,2]]/.Global`t->Global`t-1),Global`eps->Global`eps[Global`ru][Global`t]};
xTp1Vals=MapThread[{
#2[[1]][#3[[1]][Global`t],#3[[2]][Global`t],0],
#2[[2]][#3[[1]][Global`t],#3[[2]][Global`t],0]}&,
{Drop[xVars,-1],Drop[zSubNow,0],Drop[xVarsNoT,1]}]
*)
