Get["ProjectionInterface`"]
Get["paperFocus.mth"]


thePath=genPath[1]/.
{Global`qtm1->Global`qq[Global`t-1],Global`rtm1->Global`rr[Global`t-1],Global`rutm1->Global`ru[Global`t-1],Global`eps->Global`eps[Global`ru][Global`t]}},
With[{zZap=
(Global`zzz$0$1[Global`t]/.Flatten[Solve[thePath[[5,1]]==Global`rUnderBar//Global`numIt,Global`zzz$0$1[Global`t]]])//Expand},
With[{theEqn={
Global`qq[Global`t]-(thePath[[4,1]]),
Global`ru[Global`t]-(thePath[[6,1]]),
Global`discrep[Global`t]-((thePath[[5,1]]/.Global`zzz$0$1[Global`t]->0)-Global`rUnderBar//Global`numIt),
Global`rr[Global`t]-(thePath[[5,1]]),
Global`zzz$0$1[Global`t]-(Global`eqvdIf[Global`discrep[Global`t]>=0,0,zZap//Expand]//Expand)}},Print["variables in alphabetic orderr and grouped state then nonstate"];


newWeightedStochasticBasis[modSymbNow,(theEqn/.zSubs)//Expand];
{{stateVar, nonStateVar, theShock}, modClassNow} = 
  GenerateModelCode[modSymbNow];
polyRange = {{qLow, qHigh}, {ruLow, ruHigh}} //. mySubs;
initPower = {0, 0}; shockPower = {0};
lucaBasis = 
  GenerateBasis[stateVar, polyRange //. mySubs, initPower, theShock,
    theMean //. mySubs, {sigma$u} //. mySubs, 
   integOrder //. mySubs, shockPower, nonStateVar];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];
resZ10$0$0 = 
  ComputeInitialCollocationWeights[lucaBasis, 
   ConstantArray[1, {4, 1}], modClassNow, simp];
Print["resZ10$0$0 converged?",resZ10$0$0[isConvergedQ[]]];
to$551 = resZ10$0$0[toOrder[{5, 5, 1}]];
Print["to$551 converged?",to$551[isConvergedQ[]]];
If[to$551[isConvergedQ[]], 
polys = Expand[CreatePolynomials[modClassNow,to$551]] // Chop];
