Get["prepPackages.mth"]
uFunc[cc_] := (1/(1 + gamma))*cc^(1 + gamma)
uPrimeFunc[cc_] := (D[uFunc[xx], xx] /. xx -> cc)

fFunc[kk_] := AA*kk^alpha;
fPrimeFunc[kk_] := (D[fFunc[xx], xx] /. xx -> kk)

juddDetEqn = {kk[t] - (fFunc[kk[t - 1]] - cc[t]), 
   uPrimeFunc[cc[t]] - beta*uPrimeFunc[cc[t + 1]]*fPrimeFunc[kk[t]]};

juddDetEqn= {kk[t]  - kk[t-1] ,  kk[t-1] - cc[t]}
newWeightedStochasticBasis[juddDetMod, juddDetEqn]




{{stateVar, nonStateVar, theShock}, modEqns} = 
  GenerateModelCode[juddDetMod];



modDetParams = {AA, alpha, beta, 
    gamma} //. (jetDetSubs = {alpha->1,gamma->1,beta -> .95, alpha -> .25, gamma -> -.5,
       AA -> (1/(alpha*beta)), kLow -> 0.333, kHigh -> 1.667});

modEqns[updateParams[modDetParams]]

polyRange = {{kLow, kHigh}} /. jetDetSubs;
initPower = {2};
juddBasisDet00 = 
  GenerateBasis[{stateVar, nonStateVar}, polyRange, initPower];
simp = JavaNew[
   "gov.frb.ma.msu.ProjectionMethodToolsJava.SimpleFindZeroStrategy"];

tryMatSymb = {{a11, a12, a13},{a21, a22, a23}};
tryMat=tryMatSymb/.(matSub={a11 -> .3, a12 -> .2, a13 -> .1,a21 -> .73, a22 -> .32, a23 -> .51});
(*  
emulating   
nowTry = ComputeInitialCollocationWeights[juddBasisDet00, tryMat, 
  modEqns, simp]
fZero.findZeroCollocationWeights[theWSB,initWts, theSys,1.]
stratIters=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StrategyIterSequenceInfo"];

aSolver.solveWSB[aWSB,initWts,theSys]

*)
stratIters=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StrategyIterSequenceInfo"];



doExportState[vName_String,vTime_?NumberQ]:=
Module[{xxX,xxXVals,xxXDrvs},
With[{vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime",vName,vTime]},
xxX=vt[evalVar[juddBasisDet00]];
xxXVals=xxX[getTheVal[]][getArray[]];
xxXDrvs=xxX[getTheJac[]][getArray[]];
Export[varFName=vName<>"X"<>ToString[vTime]<>"ValsX.pdf",TableForm[xxXVals]];
Export[dvarFName=vName<>"X"<>ToString[vTime]<>"DrvsX.pdf",TableForm[xxXDrvs]];
{varFName,dvarFName}]]

doExportNonState[vName_String,vTime_?NumberQ]:=
Module[{xxX,xxXVals,xxXDrvs},
With[{vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime",vName,vTime]},
xxX=vt[evalVar[juddBasisDet00]];
xxXVals=xxX[getTheVal[]][getArray[]];
xxXDrvs=xxX[getTheJac[]][getArray[]];
Export[varFName=vName<>"X"<>ToString[vTime]<>"ValsX.pdf",TableForm[xxXVals]];
Export[dvarFName=vName<>"X"<>ToString[vTime]<>"DrvsX.pdf",TableForm[xxXDrvs]];
{varFName,dvarFName}]]

(*needs expanding*)
juddBasisDet00[setAllWeights[tryMat]]

(*needs expanding*)
(*kktm1*)
vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime","kk",-1];
kk$tm1=vt[evalVar[juddBasisDet00]];
kk$tm1Vals=kk$tm1[getTheVal[]][getArray[]];
kk$tm1Drvs=kk$tm1[getTheJac[]][getArray[]];
(*private method for lagged vartime doValSwitch*)




(*kk$t*)
vt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.StateVarTime","kk",0];
kk$t=vt[evalVar[juddBasisDet00]];
kk$tVals=kk$t[getTheVal[]][getArray[]];
kk$tDrvs=kk$t[getTheJac[]][getArray[]];

(*needs expanding*)
nvt=JavaNew["gov.frb.ma.msu.ProjectionMethodToolsJava.NonStateVarTime","cc",0];
cc$t=nvt[evalVar[juddBasisDet00]];
cc$tVals=cc$t[getTheVal[]][getArray[]];
cc$tDrvs=cc$t[getTheJac[]][getArray[]];

eqn3=kk$t[plus[kk$tm1[times[-1]]]]
eqn4=cc$t[times[-1]][plus[kk$tm1]]
sys=eqn3[augSys[eqn4]]


Splice["modelDoEqnsCalcs.mtex","judd.tex"]


(*

genPolys[theWts_?MatrixQ,
theStateVars_List,
theRanges_?MatrixQ,
theOrds_?VectorQ]:=

*)
