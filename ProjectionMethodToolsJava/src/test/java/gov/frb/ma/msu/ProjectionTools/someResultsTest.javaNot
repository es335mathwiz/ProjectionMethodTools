package gov.frb.ma.msu;

import junit.framework.TestCase;

public class someResultsTest extends TestCase {
	final double tol = 1.0e-7;
	public someResults theRes;
	public 	experBiggerMod modEqns;
	public CollocationSolution thePM;
	double sml= 1e-8;double notSml=0.01;
	double [][] theRanges= {{-sml,sml}, {1.0, 1.5}, {-sml,sml},  {-notSml,notSml},{-sml,sml}};
	String[] svbls={"aa","bigDelta","gg","aa$Shock","gg$Shock"};
	String[] nsvbls={"bigPi", "CC", "FF", "HH", "RR", "SS", "varphi1", "varphi2", 
			"varphi3", "varphi4", "varphi5", "varphi6"};
	int  [] theOrders={0,0,0,0,0};
	double [] easyParams={0.75, 11., 0.98, 1., 0.95, 0.95, 1., 1};
	public double [][] initArray={{0}, 
			{1.00003967990983},  {1.0}, {0.},{0}, {0.6747671791773169}, 
			{2.0668809577284812}, {1.0127222107305078}, {0.9993505117630093}, 
			{0.}, {0.8805516246685611}, {0.48341986166845025}, 
			{-0.0010637204556475056}, {0.0010367376656205925}, 
			{-0.8788729924864905}, {-0.0012079827424135007}, {0.}};

		
	double [] pVec={1,2,3,4,5,6,7,8};
	double [] rVec;

	protected void setUp() throws Exception {
		super.setUp();

		modEqns= new experBiggerMod();
		modEqns.updateParams(easyParams);

	}
	
	

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	public void testIncOrder() throws Exception{
		do00000();	
	int[] incArray={0, 0, 1, 0, 0};
	someResults res00100 = gen00100(incArray);
	incArray[1]=1;incArray[2]=0;
	gen01100(incArray, res00100);
	}



	public void do00000() throws Exception {
		thePM = new CollocationSolution(svbls,nsvbls,theRanges,theOrders);
		thePM.setAllWeights(initArray);
		theRes=new someResults(thePM,initArray,modEqns);
	double [][]expRes={{0.}, {1.1170701420763256}, {0.},  {0.},{0}, {0.8923511641122593}, 
			{0.9096955219974625}, {1.3077240089051505}, {1.0161937060039026}, {0.}, 
			{1.170133217666366}, {1.1166388761219266}, {0.015801385296395822}, 
			{-0.017659400326458744}, {-1.1516349603522378}/*, {0.017659400326458744}, {0.}*/};
	assertTrue(theRes.isConvergedQ());
	double [][] actArray=theRes.getResWeights();
	MyAssert.assertArrayEquals(expRes,actArray,tol);
	}



	private someResults gen00100(int[] incArray) throws Exception {
		someResults res00100=theRes.incOrder(incArray);
		assertTrue(res00100.isConvergedQ());
		double[][] exp00100={{0., 0.},  {1.0941269673807148, 0.0638562252585503}, {0., 0.},{0., 0.}, {0., 
			0.}, {0.8879191778355943, -0.12569463923778795}, {0.9155894578015996, 
				-0.06266258925444876}, {2.609745375924164, -0.6033102899422947}, 
				{0.9997704186228679, -0.010094742087467497}, {0., 0.}, {2.4041671608225643, 
				-0.6898667006469825}, {1.094039360676169, 0.06384594038639234}, 
				{-0.0003094709139006959, -0.010098669145066184}, {0.0006575444745056413, 
				0.011073217615028394}, {-2.407953231944587, 0.6931759305300121}/*, 
				{-0.0006575444745056413, -0.011073217615028394}, {0., 0.}*/};
		MyAssert.assertArrayEquals(exp00100,res00100.getResWeights(),tol);
		return res00100;
	}



	private void gen01100(int[] incArray, someResults res00100) throws Exception {
		someResults res01100=res00100.incOrder(incArray);
		assertTrue(res01100.isConvergedQ());
		double[][] exp01100={{0, -0.01, 0, 0}, {0, 0, 0, 0}, {1.0941269673807215, 0, 0.06385622525855689, 
			  0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0.8879191778357544, 0, -0.12569463923745458, 
				  0}, {0.915612347633633, 0.00915597087733047, -0.0626641558260897, 
				  -0.0006266311144438614}, {2.6097453759317566, 0, -0.6033102899472271, 0}, 
				 {0.9997704186230872, 0, -0.010094742087859258, 0}, {0, 0, 0, 0}, 
				 {2.40416716082956, 0, -0.6898667006516299, 0}, 
				 {1.0940667117739018, -0.010940484776934043, 0.06384753654121418, 
				  -0.0006384647243690872}, {-0.0003094709138890385, 0, -0.01009866914573926, 0}, 
				 {0.0006575444745091415, 0, 0.01107321761576035, 0}, 
				 {-2.4079532319690506, 0, 0.6931759305494168, 0}, 
				 {-0.0006575444745091415, 0, -0.01107321761576035, 0}, {0, 0, 0, 0}};
		MyAssert.assertArrayEquals(exp01100,res01100.getResWeights(),tol);
	}

	public void testToOrder()throws Exception {
		do00000();	
		int[] ordArray={0, 0, 5, 0, 0};
		someResults res00500=theRes.toOrder(ordArray);
		assertTrue(res00500.isConvergedQ());
		double [][] expRes={{0., 0., 0., 0., 0., 0.}, {0., 0., 0., 0., 0., 0.}, {1.094194237511897, 
			0.0676453532126018, -0.022855900809799077, 0.004017762659211315, 
			0.00006900900665031416, -0.00023074392721953227}, {0., 0., 0., 0., 0., 0.}, {0., 
			0., 0., 0., 0., 0.}, {0.8876288375916535, -0.12277594950616183, 
			-0.00639498737568874, 0.003889972829862562, -0.0003238893686403744, 
			-0.0001491447542466488}, {0.9159797348447674, -0.057909033578223135, 
			0.02116571015129312, -0.004678149854875729, 0.0004668783497884859, 
			0.00005379912883846252}, {2.6575649119395064, -0.7203636506141967, 
			0.2964903071851092, -0.08222059871831218, 0.014359065555058378, 
			-0.0007626210064202995}, {1.0000498403982205, 0.00007240993338453266, 
			-0.00001329346433242436, -0.000050164686810920354, 0.00006546263629483597, 
			-0.000040435789682042727}, {0., 0., 0., 0., 0., 0.}, {2.4583722368340957, 
			-0.8317007955738634, 0.3529781908951053, -0.10437276538567267, 
			0.021379615472551877, -0.0025092889963957083}, {1.094194221358767, 
			0.06764535152552686, -0.0228558974581773, 0.004017759323651931, 
			0.00006901607143024326, -0.00023075099887494237}, {0.00004982569585998853, 
			0.00007240914666767555, -0.000013290494643571279, -0.000050168059686431915, 
			0.00006546942255408068, -0.00004044242408280964}, {-0.00005702670288323988, 
			-0.00008198987772896437, 0.000015612232395556607, 0.00005328046205201845, 
			-0.00006893656402508904, 0.0000420929198193671}, {-2.4583649959586014, 
			0.8318032062501363, -0.35311007591996113, 0.10451335238430522, 
			-0.021496746490650018, 0.002575161500091554}, {0.00005702670288323989, 
			0.00008198987772896438, -0.000015612232395556607, -0.00005328046205201845, 
			0.00006893656402508904, -0.00004209291981936709}, {0., 0., 0., 0., 0., 0.}};
		MyAssert.assertArrayEquals(expRes, res00500.getResWeights(), tol);
	}


}
