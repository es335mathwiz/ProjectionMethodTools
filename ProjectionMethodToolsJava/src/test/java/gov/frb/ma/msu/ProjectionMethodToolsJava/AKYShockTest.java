package gov.frb.ma.msu.ProjectionMethodToolsJava;

import gov.frb.ma.msu.ProjectionMethodToolsJava.ProjectionResults;
import gov.frb.ma.msu.ProjectionMethodToolsJava.WeightedStochasticBasis;
import junit.framework.TestCase;

public class AKYShockTest extends TestCase {
	WeightedStochasticBasis theCS;
	double [][] initWts={{0.1}, {1.50284087122292278}, {0.1}, {0.9920371580990985}, 
			{0.9385389161671303}, {3.1791459698943725}, {0.9652015981524534}, {0.}, 
			{3.113881958400919}, {1.029675220236188}, {-0.03360973479537691}, 
			{0.034314162948813995}, {-2.9347004071004585}, {-0.034314162948813995}, {0.}};

	AKYWithShocks theMod;

	
	public void testZeroOrder() {
		 double[][] zeroWts={{0.0}, {1.0284087122292278}, {0.}, {0.9920371580990985}, 
				 {0.9385389161671303}, {3.1791459698943725}, {0.9652015981524534}, {0.}, 
				 {3.113881958400919}, {1.029675220236188}, {-0.03360973479537691}, 
				 {0.034314162948813995}, {-2.9347004071004585}, {-0.034314162948813995}, {0.}};

		try {
			ProjectionResults zeroRes= new ProjectionResults(theCS,initWts,theMod);
			MyAssert.assertArrayEquals(zeroWts,zeroRes.getResWeights(),1.0e-8);
		} catch (Exception ee) {
			// TODO Auto-generated catch block
			ee.printStackTrace();
		}
	}

	public void testtwotwotwo(){
		double [][] twoWts={{0, 0.38000000000000006, 0, 0, 0, 0, 0, 0, 0, 0.02334414218338976, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1.0267357593682702, 0, 0, 
				  0.03938708279230887, 0, 0, -0.0020749288968011717, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
				 {0.9935334959194511, 0, 0, -0.018570191827791748, 0, 0, 
				  -0.0016817093397651479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0}, {0.9602472251000546, 0.35845847821791205, 0.03374951443292433, 
				  -0.0423046981786447, -0.015792264048463754, -0.0014868702397050463, 
				  0.004317184332253765, 0.0016115967695344588, 0.00015173475238713252, 
				  0.022414620932056636, 0.008367335722630334, 0.0007877998008023249, 
				  -0.0009874996235687743, -0.0003686317471715001, -0.00003470734611546445, 
				  0.00010077410043157128, 0.00003761878164334368, 3.5418763712319336e-6, 
				  0.00013080806930374417, 0.00004883040558274766, 4.597471054859412e-6, 
				  -5.76288662605468e-6, -2.1512747091947715e-6, -2.0254640700739382e-7, 
				  5.881012021070021e-7, 2.195370696441963e-7, 2.066981231095293e-8}, 
				 {4.190282958263439, 0, 0, -0.7451018954484061, 0, 0, 0.0682449960264592, 0, 
				  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
				 {0.950330686581759, 0, 0, -0.005291981039171653, 0, 0, 
				  0.0015546612764645502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0, 0, 0, 0}, {4.168084643927495, 0, 0, -0.9353466507043506, 0, 0, 
				  0.09988034635970078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0}, {1.0644236469530224, -0.39734734003129607, 0.03741097115052188, 
				  0.04085263091379061, -0.015250210076919858, 0.00143583487731934, 
				  -0.0020567430866518356, 0.0007677783154744751, -0.00007228771786414124, 
				  -0.024846364492313977, 0.00927510100769546, -0.0008732675451904054, 
				  -0.0009536046677088643, 0.0003559788240709781, -0.00003351605050762503, 
				  0.000048009632766231645, -0.00001792190537123932, 1.6873798243543556e-6, 
				  0.00014499932781862238, -0.000054127975623248895, 5.096246861173676e-6, 
				  5.565081195910914e-6, -2.077434315450413e-6, 1.9559420040898987e-7, 
				  -2.801763807996347e-7, 1.0458931447332282e-7, -9.847273200029148e-9}, 
				 {-0.04954269594587073, 0, 0, -0.005276822538816263, 0, 0, 
				  0.0016386087132755774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0}, {0.050196930654503875, 0, 0, 0.0076248888439556335, 0, 0, 
				  -0.0016616451028513422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0}, {-3.1755743377196337, 0, 0, 0.689988277226315, 0, 0, 
				  -0.08868863838575292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0}, {-0.050196930654503875, 0, 0, -0.007624888843955636, 0, 0, 
				  0.0016616451028513444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				  0, 0, 0, 0, 0, 0}};
		int[] theGoal={2,2,0,2,0};
		try {
			ProjectionResults zeroRes= new ProjectionResults(theCS,initWts,theMod);
			ProjectionResults fifteenRes= zeroRes.toOrder(theGoal);
		MyAssert.assertArrayEquals(twoWts,fifteenRes.getResWeights(),1.0e-8);
		} catch (Exception ee) {
			// TODO Auto-generated catch block
			ee.printStackTrace();
		}
		}

	protected void setUp() throws Exception {
		super.setUp();
		String [] sNames={"AA", "bigDelta", "GG"};
		String [] nsNames={"bigPi", "CC", "FF", "HH", "RR", "SS", "varphi1", "varphi2", "varphi3", 
				 "varphi4", "varphi5", "varphi6"};
		String[] shockVars={"AA$Shock","GG$Shock"};
		double [][] initRanges={{-0.4, 0.4}, {0.98, 1.1}, {-0.004, 0.004}};
		int [] initPowers={0,0,0};
int [] initShockPowers={0,0};
double [] shockMeans={0,0};
double [] shockStDevs={0.01,0.00000001};
int [] integOrders={4,2};
		theCS = new WeightedStochasticBasis(sNames,initRanges,initPowers,shockVars,shockMeans,shockStDevs,integOrders,initShockPowers,nsNames);
		double [] targParams={0.75, 11., 0.99, 1., 0.95, 0.95, 1., 0.9090909090909091, 1.};
		theMod=new AKYWithShocks();
		theMod.updateParams(targParams);
	
	}

}
