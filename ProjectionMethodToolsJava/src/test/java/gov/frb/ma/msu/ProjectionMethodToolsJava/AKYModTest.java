package gov.frb.ma.msu.ProjectionMethodToolsJava;

//import junit.framework.Test;

import gov.frb.ma.msu.ProjectionMethodToolsJava.ProjectionResults;
import gov.frb.ma.msu.ProjectionMethodToolsJava.WeightedStochasticBasis;
import junit.framework.TestCase;

//import junit.framework.TestSuite;

public class AKYModTest extends TestCase {
WeightedStochasticBasis theCS;
double [][] initWts={{0}, {0.22965439931020232}, {0}, {0.13495343583546338}, 
		 {0.41337619154569627}, {0.20254444214610157}, {0.1998701023526186}, {0.}, 
		 {0.17611032493371223}, {0.09668397233369005}, {-0.00021274409112950114}, 
		 {0.0002073475331241185}, {-0.17577459849729812}, {-0.00024159654848270016}, 
		 {0.}};;

AKYMod theMod;


	
	public void testZeroOrder() {
		 double[][] zeroWts={{0.}, {1.114831142123881}, {0.}, {0.9014979263037608}, {0.8706004837101697}, 
				 {1.357285049861328}, {0.9705725315882118}, {0.}, {1.21867861594292}, 
				 {1.1164607175216146}, {-0.028008759282279236}, {0.031194336014166085}, 
				 {-1.1419897659352356}, {-0.031194336014166085}, {0.}};

		try {
			ProjectionResults zeroRes= new ProjectionResults(theCS,initWts,theMod);
		MyAssert.assertArrayEquals(zeroWts,zeroRes.getResWeights(),1.0e-8);
		} catch (Exception ee) {
			// TODO Auto-generated catch block
			ee.printStackTrace();
		}
	}	
	public void testFifteenOrder(){
	double [][] fifteenWts={{-1.234610216649193e-25, -1.3076349482227024e-25, -7.711737352733596e-26, 
		5.936603658776586e-27, 2.5308079644811262e-26, -7.86041412670806e-27, 
		2.9570946724891344e-26, -2.563883202662113e-26, 7.918402513277572e-26, 
		-1.321719781339411e-26, -7.559917037685643e-26, 6.375021906382881e-26, 
		7.905400239442948e-27, -1.4791566394424557e-26, -5.577280921515832e-26, 
		-3.431636976617453e-26}, {1.08931609736875, 0.07473798213050817, 
		-0.02544018660241476, 0.0043220339837976764, 0.00019506820561391146, 
		-0.00028060715481644996, 0.00004237034523158701, 0.000012221591343010839, 
		-5.994960749311858e-6, 2.2882271904220847e-7, 5.45852297836033e-7, 
		-1.8827866493493457e-7, 4.683008481910966e-9, 1.8948746803037396e-8, 
		-8.82012633599733e-9, 2.3060677885386547e-9}, {0., 0., 0., 0., 0., 0., 0., 
		0., 0., 0., 0., 0., 0., 0., 0., 0.}, {0.8969576385026108, 
		-0.1263808243826754, -0.008159054755659235, 0.004600574688490722, 
		-0.00038742808261677414, -0.00017702876692057362, 0.00005782109613405659, 
		-1.6301378187753139e-6, -2.068217126050647e-6, -1.8953924505362195e-7, 
		3.330573274289865e-7, -5.375578480533249e-10, -8.428787590797258e-8, 
		4.2444472900028084e-8, -6.314417592459146e-9, -3.1067508924473304e-9}, 
		{0.8723216648151582, -0.06541514626955093, 0.02604114758252992, 
		-0.006883277518566653, 0.0011811071741256991, -0.00007993236103107482, 
		-0.000041253629293902354, 0.00003321825852041522, -0.000016937846371962262, 
		5.396750825792511e-6, -1.804971090628037e-7, -9.291830823436959e-7, 
		5.934638664596794e-7, -1.7979501413106104e-7, -2.2509514973062516e-9, 
		2.8631496038364577e-8}, {3.2467780517233846, -1.117078149272439, 
		0.4733984250978283, -0.13462740235588044, 0.023461651776409114, 
		-0.0004921042353252743, -0.0011727798268642252, 0.000389992306429327, 
		-0.000044275953527422906, -0.000012845373196860405, 7.162214732423371e-6, 
		-1.2748791688694373e-6, -1.636031164718419e-7, 1.5226925744936525e-7, 
		-2.8145872727350393e-8, -6.838967637576798e-9}, {0.9474435386370577, 
		-0.004111449521323083, 0.003320257696282458, -0.0018877450693090513, 
		0.0007342222358593924, -0.00015346959961477351, -0.00002815514143643816, 
		0.00004265792845191148, -0.000020651645317454915, 4.95564561413066e-6, 
		6.365401691530986e-7, -1.2435115996223107e-6, 6.236895534298045e-7, 
		-1.4661189082655538e-7, -2.5904885942857797e-8, 3.733751078878951e-8}, 
		{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}, 
		{3.0610789311344546, -1.3191924876221162, 0.5867229998365577, 
		-0.18434330356275694, 0.04094101993478564, -0.005249050552869272, 
		-0.0003309161955293484, 0.0003982699483384366, -0.00011724057683637117, 
		0.000015830468287234876, 3.062590878655134e-6, -3.0149927531804873e-6, 
		1.2475917829802509e-6, -3.116012199209098e-7, 8.401280476934189e-10, 
		4.071888724885028e-8}, {1.0897457008964728, 0.0750320909674176, 
		-0.025455708073496872, 0.004259862824794064, 0.00023411370471683405, 
		-0.0002897340371888871, 0.00003926282917719348, 0.000016208921311699472, 
		-7.891041288196579e-6, 6.10405408666673e-7, 6.93346308952585e-7, 
		-3.604024754105375e-7, 8.395591187506616e-8, 3.818875520466335e-9, 
		-1.540726340795124e-8, 8.819846995385009e-9}, {-0.05219129304178109, 
		-0.0038795914791989058, 0.0033098372688113845, -0.0019418047543224165, 
		0.0007698393989957774, -0.0001631703795617947, -0.0000300351317542715, 
		0.00004602051809165709, -0.00002243071568812806, 5.399650705391452e-6, 
		7.184236392791798e-7, -1.3862887259799231e-6, 6.976947701310513e-7, 
		-1.6448959255556712e-7, -2.9535039560431315e-8, 4.2466036419891334e-8}, 
		{0.05669785075539847, 0.008402791763785118, -0.004894876385168961, 
		0.0021748735485250118, -0.0006870348095244242, 0.00008901326779675909, 
		0.00005982191971248802, -0.00005248746936936626, 0.000021643940483460593, 
		-3.828244651303833e-6, -1.5592936465899217e-6, 1.6263731226566188e-6, 
		-6.926168051044492e-7, 1.1697987419363354e-7, 5.838545486182268e-8, 
		-5.232389132026678e-8}, {-2.4022905212222168, 0.9244603349800329, 
		-0.41282455127025, 0.1329711156214324, -0.032462370786682335, 
		0.006020929751638103, -0.0007420581569109484, -0.000043791631472625344, 
		0.00009283073233482522, -0.0000513363854615402, 0.00001730732207424981, 
		-1.7562935605396417e-6, -1.9893257417710806e-6, 1.465926650682417e-6, 
		-5.015177552262612e-7, 6.440668932791418e-8}, {-0.05669785075539847, 
		-0.00840279176378512, 0.004894876385168959, -0.0021748735485250096, 
		0.0006870348095244165, -0.00008901326779676333, -0.0000598219197124847, 
		0.00005248746936936884, -0.00002164394048345281, 3.828244651305219e-6, 
		1.5592936465890975e-6, -1.6263731226536743e-6, 6.926168051054493e-7, 
		-1.1697987419625614e-7, -5.838545486942846e-8, 5.2323891320444026e-8}, 
		{0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}};
	int[] theGoal={0,15,0};
	try {
		ProjectionResults zeroRes= new ProjectionResults(theCS,initWts,theMod);
		ProjectionResults fifteenRes= zeroRes.toOrder(theGoal);
	MyAssert.assertArrayEquals(fifteenWts,fifteenRes.getResWeights(),1.0e-8);
	} catch (Exception ee) {
		// TODO Auto-generated catch block
		ee.printStackTrace();
	}
	}
	public void testThreeThreeThree(){
		double [][] threeWts={{0, 0.095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			 {1.089318407423856, 0, 0, 0, 0.07474838414244724, 0, 0, 0, 
			  -0.02552555506255745, 0, 0, 0, 0.004637409628583435, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.095, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			 {0.8971235622068328, 0, 0, 0, -0.12627852852427657, 0, 0, 0, 
			  -0.008591558769196341, 0, 0, 0, 0.00506704388805308, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			 {0.8723217113703835, 0.0827772146308629, 0.001965219954018952, 
			  0.00003110662539905678, -0.06516854523208215, -0.006184038051033818, 
			  -0.0001468157031921856, -2.323882918420614e-6, 0.028127689731412487, 
			  0.0026691205545140424, 0.00006336778782439832, 1.0030215877586987e-6, 
			  -0.00856030541155521, -0.0008123129679358768, -0.000019285182047011623, 
			  -3.052568912099676e-7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0}, {3.254248263520949, 0, 0, 0, -1.0894032906750493, 0, 0, 
			  0, 0.4515525188742477, 0, 0, 0, -0.12184716711974855, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			 {0.9452876308426851, 0, 0, 0, -0.003718807828342636, 0, 0, 0, 
			  0.005474341831027422, 0, 0, 0, -0.003563033284695712, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {3.065750576222065, 0, 0, 0, 
			  -1.2903635373216902, 0, 0, 0, 0.5616836827490578, 0, 0, 0, 
			  -0.16483547461983955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0}, {1.0919906942537245, -0.10362226102471189, 
			  0.0024601037369331217, -0.000038939928953551785, 0.07523813073788133, 
			  -0.007139571118470118, 0.0001695010841777056, -2.6829601031105096e-6, 
			  -0.025327197607555602, 0.0024033734859877816, -0.00005705866708234465, 
			  9.031572160502686e-7, 0.004358815890576817, -0.00041362106870376157, 
			  9.819808279832756e-6, -1.5543354169178334e-7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {-0.05453288868578768, 0, 0, 0, 
			  -0.0034628258261559103, 0, 0, 0, 0.005698968029830901, 0, 0, 0, 
			  -0.0038145421124328284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.059258876774004765, 0, 0, 0, 
			  0.008004767754180863, 0, 0, 0, -0.007485707191227897, 0, 0, 0, 
			  0.0042204687081838655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0}, {-2.457850803509953, 0, 0, 0, 
			  0.9991661508294437, 0, 0, 0, -0.45605250491862426, 0, 0, 0, 
			  0.14513330118860035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0}, {-0.059258876774004765, 0, 0, 0, 
			  -0.008004767754180863, 0, 0, 0, 0.007485707191227899, 0, 0, 0, 
			  -0.004220468708183862, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
		int[] theGoal={3,3,3};
		try {
			ProjectionResults zeroRes= new ProjectionResults(theCS,initWts,theMod);
			ProjectionResults fifteenRes= zeroRes.toOrder(theGoal);
		MyAssert.assertArrayEquals(threeWts,fifteenRes.getResWeights(),1.0e-8);
		} catch (Exception ee) {
			// TODO Auto-generated catch block
			ee.printStackTrace();
		}
		}

	protected void setUp() throws Exception {
		super.setUp();
		String [] sNames={"AA", "bigDelta", "GG"};
		String [] nsNames={"bigPi", "CC", "FF", "HH", "RR", "SS", "varphi1", "varphi2", "varphi3", 
				 "varphi4", "varphi5", "varphi6"};
		double [][] initRanges={{-0.1, 0.1}, {0.98, 1.5}, {-0.1, 0.1}};
		int [] initPowers={0,0,0};

		theCS = new WeightedStochasticBasis(sNames,nsNames,initRanges,initPowers);
		double [] targParams={0.75, 11., 0.99, 1., 0.95, 0.95, 1., 0.9090909090909091, 1.};
		theMod=new AKYMod();
		theMod.updateParams(targParams);
	
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

}
