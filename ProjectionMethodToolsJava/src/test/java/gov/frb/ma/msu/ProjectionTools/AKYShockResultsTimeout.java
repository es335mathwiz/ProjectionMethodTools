package gov.frb.ma.msu.ProjectionTools;

import gov.frb.ma.msu.ProjectionTools.ProjectionResults;
import gov.frb.ma.msu.ProjectionTools.WeightedStochasticBasis;
import junit.framework.TestCase;

public class AKYShockResultsTimeout extends TestCase {
	WeightedStochasticBasis cs;AKYShockMod akysm;
	protected void setUp() throws Exception {
		super.setUp();
		String[] stateVars ={"AA", "bigDelta", "GG"};
		double [][] stateRanges = {{0.9, 1.1}, {0.98, 1.1}, {0.9, 1.1}};
		int [] statePowers={0,0,0};
		String[] shockVars={"AA$Shock", "GG$Shock"};
		double [] shockMeans={0.,0.};
		double [] shockStDevs={1.e-7,1.e-8};
		int [] intOrders={4,3};
		int [] shockPowers={0,0};
		String[]nonStateVars={"bigPi", "CC", "FF", "HH", "RR", "SS", "varphi1", "varphi2", "varphi3", 
				 "varphi4", "varphi5", "varphi6"};
		cs= new WeightedStochasticBasis(
		    	stateVars,stateRanges,statePowers,
		    	shockVars,shockMeans,shockStDevs,intOrders,shockPowers,
		    	nonStateVars);
		akysm=new AKYShockMod();
		double[] paramVec={0.75, 11., 0.99, 1., 0.95, 0.95, 1., 0.9090909090909091, 1.};
		akysm.updateParams(paramVec);
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	public void testToOrder() throws Exception{
		double [][] initWts={{1.}, {1.0284087122292278}, {1.}, {0}, {0}, {0.9920371580990985}, 
				 {0.9385389161671298}, {3.1791459698943743}, {0.9652015981524531}, {0.}, 
				 {3.1138819584009214}, {1.029675220236188}, {-0.033609734795377336}, 
				 {0.03431416294881442}, {-2.9347004071004616}, {-0.03431416294881442}, {0.}};
		double [][] expWts={{2.2826568780915375}, {1.0284087122292278}, {1.8448028874152147}, {0.}, 
				{0.}, {0.9920371580990985}, {2.1423623123454765}, {3.1791459698943707}, 
				{0.9652015981524534}, {0.}, {3.113881958400917}, {0.4510862890164506}, 
				{-0.03360973479537696}, {0.03431416294881404}, {-2.9347004071004585}, 
				{-0.03431416294881404}, {0.}};
		
		ProjectionResults sr= new ProjectionResults( cs, initWts, akysm);
MyAssert.assertArrayEquals(expWts,sr.getResWeights(),1e-8);
int[] ord10000={1,0,0,0,0};
double [][] exp10000={{2.2823855689735137, 0.21686190557738577}, {1.0284087122292276, 0}, {1.8448028874152147, 0}, {0, 0}, 
		 {0, 0}, {0.9920371580990983, 0}, {2.1421076781799058, 0.2035333378185395}, {3.179145969894438, 0}, 
		 {0.9652015981524557, 0}, {0, 0}, {3.113881958400982, 0}, {0.45318557541224197, -0.043059634095164265}, 
		 {-0.033609734795374734, 0}, {0.03431416294881179, 0}, {-2.9347004071005407, 0}, {-0.03431416294881179, 0}, 
		 {0, 0}};
ProjectionResults sr10000=sr.toOrder(ord10000);
MyAssert.assertArrayEquals(exp10000,sr10000.getResWeights(),1e-8);

int[] ord11000={1,1,0,0,0};
ProjectionResults sr11000=sr.toOrder(ord11000);


int[] ord11100={1,1,1,0,0};
ProjectionResults sr11100=sr11000.toOrder(ord11100);


int[] ord11110={1,1,1,1,0};
ProjectionResults sr11110=sr11100.toOrder(ord11110);


int[] ord11111={1,1,1,1,1};
double [][] exp11111={{2.682225856896555, 0.2548529128569308, 0, 0, 0, 0, 0, 0, -1.9925118127358274, -0.18931941844938857, 0, 0, 
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1.0267333846583917, 0, 0.03953863830590208, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		 {2.0202323056969407, 0, 0, 0, 0.19195329372831244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.1652037050367303, 0, 
		  0, 0, -0.11071236135345001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.993697209295156, 0, -0.017835204675786327, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		 {2.4769573822885307, 0.23534923514213033, -0.11998008106766829, -0.011399962112243311, 0, 0, 0, 0, 
		  -1.8400265701580603, -0.17483096359450634, 0.0891281128345415, 0.008468548282443885, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {4.160479605878388, 0, -0.7089977148288891, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		 {0.9472740357505097, 0, -0.00941458103674043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0}, {4.136314281593773, 0, -0.8875090345599002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.5309604605564489, -0.05044945027158621, 
		  0.020180472688125926, -0.0019174568145243031, 0, 0, 0, 0, 0.39442800353078455, -0.037476756610075816, 
		  0.014991217131957927, -0.0014243973316143373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		 {-0.052883801916625665, 0, -0.009888476745088769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.05367541281155913, 0, 0.012398411105508168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {-3.2813333665812543, 0, 0.7615754584663703, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
		 {-0.05367541281155913, 0, -0.012398411105508168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		  0, 0, 0, 0, 0, 0, 0}};
ProjectionResults sr11111=sr11110.toOrder(ord11111);
MyAssert.assertArrayEquals(exp11111,sr11111.getResWeights(),1e-8);
	}
}
